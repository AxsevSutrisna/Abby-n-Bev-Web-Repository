import To from "uglify-js";
var Ui = typeof global == "object" && global && global.Object === Object && global, yo = typeof self == "object" && self && self.Object === Object && self, Oe = Ui || yo || Function("return this")(), ce = Oe.Symbol, Di = Object.prototype, Ao = Di.hasOwnProperty, _o = Di.toString, pt = ce ? ce.toStringTag : void 0;
function vo(t) {
  var e = Ao.call(t, pt), n = t[pt];
  try {
    t[pt] = void 0;
    var r = !0;
  } catch {
  }
  var i = _o.call(t);
  return r && (e ? t[pt] = n : delete t[pt]), i;
}
var Ro = Object.prototype, Oo = Ro.toString;
function Io(t) {
  return Oo.call(t);
}
var So = "[object Null]", No = "[object Undefined]", xr = ce ? ce.toStringTag : void 0;
function Be(t) {
  return t == null ? t === void 0 ? No : So : xr && xr in Object(t) ? vo(t) : Io(t);
}
function pe(t) {
  return t != null && typeof t == "object";
}
var Lo = "[object Symbol]";
function on(t) {
  return typeof t == "symbol" || pe(t) && Be(t) == Lo;
}
function an(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length, i = Array(r); ++n < r; )
    i[n] = e(t[n], n, t);
  return i;
}
var b = Array.isArray, Mr = ce ? ce.prototype : void 0, Pr = Mr ? Mr.toString : void 0;
function Fi(t) {
  if (typeof t == "string")
    return t;
  if (b(t))
    return an(t, Fi) + "";
  if (on(t))
    return Pr ? Pr.call(t) : "";
  var e = t + "";
  return e == "0" && 1 / t == -1 / 0 ? "-0" : e;
}
var ko = /\s/;
function Co(t) {
  for (var e = t.length; e-- && ko.test(t.charAt(e)); )
    ;
  return e;
}
var bo = /^\s+/;
function xo(t) {
  return t && t.slice(0, Co(t) + 1).replace(bo, "");
}
function ue(t) {
  var e = typeof t;
  return t != null && (e == "object" || e == "function");
}
var wr = NaN, Mo = /^[-+]0x[0-9a-f]+$/i, Po = /^0b[01]+$/i, wo = /^0o[0-7]+$/i, Uo = parseInt;
function Do(t) {
  if (typeof t == "number")
    return t;
  if (on(t))
    return wr;
  if (ue(t)) {
    var e = typeof t.valueOf == "function" ? t.valueOf() : t;
    t = ue(e) ? e + "" : e;
  }
  if (typeof t != "string")
    return t === 0 ? t : +t;
  t = xo(t);
  var n = Po.test(t);
  return n || wo.test(t) ? Uo(t.slice(2), n ? 2 : 8) : Mo.test(t) ? wr : +t;
}
var Fo = 1 / 0, $o = 17976931348623157e292;
function jo(t) {
  if (!t)
    return t === 0 ? t : 0;
  if (t = Do(t), t === Fo || t === -1 / 0) {
    var e = t < 0 ? -1 : 1;
    return e * $o;
  }
  return t === t ? t : 0;
}
function cn(t) {
  var e = jo(t), n = e % 1;
  return e === e ? n ? e - n : e : 0;
}
function at(t) {
  return t;
}
var Go = "[object AsyncFunction]", Bo = "[object Function]", Vo = "[object GeneratorFunction]", Ko = "[object Proxy]";
function Ue(t) {
  if (!ue(t))
    return !1;
  var e = Be(t);
  return e == Bo || e == Vo || e == Go || e == Ko;
}
var In = Oe["__core-js_shared__"], Ur = function() {
  var t = /[^.]+$/.exec(In && In.keys && In.keys.IE_PROTO || "");
  return t ? "Symbol(src)_1." + t : "";
}();
function Ho(t) {
  return !!Ur && Ur in t;
}
var Wo = Function.prototype, zo = Wo.toString;
function Je(t) {
  if (t != null) {
    try {
      return zo.call(t);
    } catch {
    }
    try {
      return t + "";
    } catch {
    }
  }
  return "";
}
var Yo = /[\\^$.*+?()[\]{}|]/g, Xo = /^\[object .+?Constructor\]$/, qo = Function.prototype, Qo = Object.prototype, Zo = qo.toString, Jo = Qo.hasOwnProperty, ea = RegExp(
  "^" + Zo.call(Jo).replace(Yo, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function ta(t) {
  if (!ue(t) || Ho(t))
    return !1;
  var e = Ue(t) ? ea : Xo;
  return e.test(Je(t));
}
function na(t, e) {
  return t?.[e];
}
function et(t, e) {
  var n = na(t, e);
  return ta(n) ? n : void 0;
}
var Dn = et(Oe, "WeakMap"), Dr = Object.create, ra = /* @__PURE__ */ function() {
  function t() {
  }
  return function(e) {
    if (!ue(e))
      return {};
    if (Dr)
      return Dr(e);
    t.prototype = e;
    var n = new t();
    return t.prototype = void 0, n;
  };
}();
function ia(t, e, n) {
  switch (n.length) {
    case 0:
      return t.call(e);
    case 1:
      return t.call(e, n[0]);
    case 2:
      return t.call(e, n[0], n[1]);
    case 3:
      return t.call(e, n[0], n[1], n[2]);
  }
  return t.apply(e, n);
}
function B() {
}
function sa(t, e) {
  var n = -1, r = t.length;
  for (e || (e = Array(r)); ++n < r; )
    e[n] = t[n];
  return e;
}
var oa = 800, aa = 16, ca = Date.now;
function ua(t) {
  var e = 0, n = 0;
  return function() {
    var r = ca(), i = aa - (r - n);
    if (n = r, i > 0) {
      if (++e >= oa)
        return arguments[0];
    } else
      e = 0;
    return t.apply(void 0, arguments);
  };
}
function la(t) {
  return function() {
    return t;
  };
}
var Yt = function() {
  try {
    var t = et(Object, "defineProperty");
    return t({}, "", {}), t;
  } catch {
  }
}(), ha = Yt ? function(t, e) {
  return Yt(t, "toString", {
    configurable: !0,
    enumerable: !1,
    value: la(e),
    writable: !0
  });
} : at, fa = ua(ha);
function $i(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length; ++n < r && e(t[n], n, t) !== !1; )
    ;
  return t;
}
function ji(t, e, n, r) {
  for (var i = t.length, s = n + -1; ++s < i; )
    if (e(t[s], s, t))
      return s;
  return -1;
}
function da(t) {
  return t !== t;
}
function pa(t, e, n) {
  for (var r = n - 1, i = t.length; ++r < i; )
    if (t[r] === e)
      return r;
  return -1;
}
function rr(t, e, n) {
  return e === e ? pa(t, e, n) : ji(t, da, n);
}
function Gi(t, e) {
  var n = t == null ? 0 : t.length;
  return !!n && rr(t, e, 0) > -1;
}
var ma = 9007199254740991, ga = /^(?:0|[1-9]\d*)$/;
function un(t, e) {
  var n = typeof t;
  return e = e ?? ma, !!e && (n == "number" || n != "symbol" && ga.test(t)) && t > -1 && t % 1 == 0 && t < e;
}
function ir(t, e, n) {
  e == "__proto__" && Yt ? Yt(t, e, {
    configurable: !0,
    enumerable: !0,
    value: n,
    writable: !0
  }) : t[e] = n;
}
function St(t, e) {
  return t === e || t !== t && e !== e;
}
var Ea = Object.prototype, Ta = Ea.hasOwnProperty;
function ln(t, e, n) {
  var r = t[e];
  (!(Ta.call(t, e) && St(r, n)) || n === void 0 && !(e in t)) && ir(t, e, n);
}
function sr(t, e, n, r) {
  var i = !n;
  n || (n = {});
  for (var s = -1, o = e.length; ++s < o; ) {
    var a = e[s], c = void 0;
    c === void 0 && (c = t[a]), i ? ir(n, a, c) : ln(n, a, c);
  }
  return n;
}
var Fr = Math.max;
function ya(t, e, n) {
  return e = Fr(e === void 0 ? t.length - 1 : e, 0), function() {
    for (var r = arguments, i = -1, s = Fr(r.length - e, 0), o = Array(s); ++i < s; )
      o[i] = r[e + i];
    i = -1;
    for (var a = Array(e + 1); ++i < e; )
      a[i] = r[i];
    return a[e] = n(o), ia(t, this, a);
  };
}
function or(t, e) {
  return fa(ya(t, e, at), t + "");
}
var Aa = 9007199254740991;
function ar(t) {
  return typeof t == "number" && t > -1 && t % 1 == 0 && t <= Aa;
}
function Ie(t) {
  return t != null && ar(t.length) && !Ue(t);
}
function Bi(t, e, n) {
  if (!ue(n))
    return !1;
  var r = typeof e;
  return (r == "number" ? Ie(n) && un(e, n.length) : r == "string" && e in n) ? St(n[e], t) : !1;
}
function _a(t) {
  return or(function(e, n) {
    var r = -1, i = n.length, s = i > 1 ? n[i - 1] : void 0, o = i > 2 ? n[2] : void 0;
    for (s = t.length > 3 && typeof s == "function" ? (i--, s) : void 0, o && Bi(n[0], n[1], o) && (s = i < 3 ? void 0 : s, i = 1), e = Object(e); ++r < i; ) {
      var a = n[r];
      a && t(e, a, r, s);
    }
    return e;
  });
}
var va = Object.prototype;
function Nt(t) {
  var e = t && t.constructor, n = typeof e == "function" && e.prototype || va;
  return t === n;
}
function Ra(t, e) {
  for (var n = -1, r = Array(t); ++n < t; )
    r[n] = e(n);
  return r;
}
var Oa = "[object Arguments]";
function $r(t) {
  return pe(t) && Be(t) == Oa;
}
var Vi = Object.prototype, Ia = Vi.hasOwnProperty, Sa = Vi.propertyIsEnumerable, hn = $r(/* @__PURE__ */ function() {
  return arguments;
}()) ? $r : function(t) {
  return pe(t) && Ia.call(t, "callee") && !Sa.call(t, "callee");
};
function Na() {
  return !1;
}
var Ki = typeof exports == "object" && exports && !exports.nodeType && exports, jr = Ki && typeof module == "object" && module && !module.nodeType && module, La = jr && jr.exports === Ki, Gr = La ? Oe.Buffer : void 0, ka = Gr ? Gr.isBuffer : void 0, vt = ka || Na, Ca = "[object Arguments]", ba = "[object Array]", xa = "[object Boolean]", Ma = "[object Date]", Pa = "[object Error]", wa = "[object Function]", Ua = "[object Map]", Da = "[object Number]", Fa = "[object Object]", $a = "[object RegExp]", ja = "[object Set]", Ga = "[object String]", Ba = "[object WeakMap]", Va = "[object ArrayBuffer]", Ka = "[object DataView]", Ha = "[object Float32Array]", Wa = "[object Float64Array]", za = "[object Int8Array]", Ya = "[object Int16Array]", Xa = "[object Int32Array]", qa = "[object Uint8Array]", Qa = "[object Uint8ClampedArray]", Za = "[object Uint16Array]", Ja = "[object Uint32Array]", U = {};
U[Ha] = U[Wa] = U[za] = U[Ya] = U[Xa] = U[qa] = U[Qa] = U[Za] = U[Ja] = !0;
U[Ca] = U[ba] = U[Va] = U[xa] = U[Ka] = U[Ma] = U[Pa] = U[wa] = U[Ua] = U[Da] = U[Fa] = U[$a] = U[ja] = U[Ga] = U[Ba] = !1;
function ec(t) {
  return pe(t) && ar(t.length) && !!U[Be(t)];
}
function fn(t) {
  return function(e) {
    return t(e);
  };
}
var Hi = typeof exports == "object" && exports && !exports.nodeType && exports, At = Hi && typeof module == "object" && module && !module.nodeType && module, tc = At && At.exports === Hi, Sn = tc && Ui.process, je = function() {
  try {
    var t = At && At.require && At.require("util").types;
    return t || Sn && Sn.binding && Sn.binding("util");
  } catch {
  }
}(), Br = je && je.isTypedArray, cr = Br ? fn(Br) : ec, nc = Object.prototype, rc = nc.hasOwnProperty;
function Wi(t, e) {
  var n = b(t), r = !n && hn(t), i = !n && !r && vt(t), s = !n && !r && !i && cr(t), o = n || r || i || s, a = o ? Ra(t.length, String) : [], c = a.length;
  for (var u in t)
    (e || rc.call(t, u)) && !(o && // Safari 9 has enumerable `arguments.length` in strict mode.
    (u == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    i && (u == "offset" || u == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    s && (u == "buffer" || u == "byteLength" || u == "byteOffset") || // Skip index properties.
    un(u, c))) && a.push(u);
  return a;
}
function zi(t, e) {
  return function(n) {
    return t(e(n));
  };
}
var ic = zi(Object.keys, Object), sc = Object.prototype, oc = sc.hasOwnProperty;
function Yi(t) {
  if (!Nt(t))
    return ic(t);
  var e = [];
  for (var n in Object(t))
    oc.call(t, n) && n != "constructor" && e.push(n);
  return e;
}
function le(t) {
  return Ie(t) ? Wi(t) : Yi(t);
}
var ac = Object.prototype, cc = ac.hasOwnProperty, te = _a(function(t, e) {
  if (Nt(e) || Ie(e)) {
    sr(e, le(e), t);
    return;
  }
  for (var n in e)
    cc.call(e, n) && ln(t, n, e[n]);
});
function uc(t) {
  var e = [];
  if (t != null)
    for (var n in Object(t))
      e.push(n);
  return e;
}
var lc = Object.prototype, hc = lc.hasOwnProperty;
function fc(t) {
  if (!ue(t))
    return uc(t);
  var e = Nt(t), n = [];
  for (var r in t)
    r == "constructor" && (e || !hc.call(t, r)) || n.push(r);
  return n;
}
function Xi(t) {
  return Ie(t) ? Wi(t, !0) : fc(t);
}
var dc = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, pc = /^\w*$/;
function ur(t, e) {
  if (b(t))
    return !1;
  var n = typeof t;
  return n == "number" || n == "symbol" || n == "boolean" || t == null || on(t) ? !0 : pc.test(t) || !dc.test(t) || e != null && t in Object(e);
}
var Rt = et(Object, "create");
function mc() {
  this.__data__ = Rt ? Rt(null) : {}, this.size = 0;
}
function gc(t) {
  var e = this.has(t) && delete this.__data__[t];
  return this.size -= e ? 1 : 0, e;
}
var Ec = "__lodash_hash_undefined__", Tc = Object.prototype, yc = Tc.hasOwnProperty;
function Ac(t) {
  var e = this.__data__;
  if (Rt) {
    var n = e[t];
    return n === Ec ? void 0 : n;
  }
  return yc.call(e, t) ? e[t] : void 0;
}
var _c = Object.prototype, vc = _c.hasOwnProperty;
function Rc(t) {
  var e = this.__data__;
  return Rt ? e[t] !== void 0 : vc.call(e, t);
}
var Oc = "__lodash_hash_undefined__";
function Ic(t, e) {
  var n = this.__data__;
  return this.size += this.has(t) ? 0 : 1, n[t] = Rt && e === void 0 ? Oc : e, this;
}
function qe(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.clear(); ++e < n; ) {
    var r = t[e];
    this.set(r[0], r[1]);
  }
}
qe.prototype.clear = mc;
qe.prototype.delete = gc;
qe.prototype.get = Ac;
qe.prototype.has = Rc;
qe.prototype.set = Ic;
function Sc() {
  this.__data__ = [], this.size = 0;
}
function dn(t, e) {
  for (var n = t.length; n--; )
    if (St(t[n][0], e))
      return n;
  return -1;
}
var Nc = Array.prototype, Lc = Nc.splice;
function kc(t) {
  var e = this.__data__, n = dn(e, t);
  if (n < 0)
    return !1;
  var r = e.length - 1;
  return n == r ? e.pop() : Lc.call(e, n, 1), --this.size, !0;
}
function Cc(t) {
  var e = this.__data__, n = dn(e, t);
  return n < 0 ? void 0 : e[n][1];
}
function bc(t) {
  return dn(this.__data__, t) > -1;
}
function xc(t, e) {
  var n = this.__data__, r = dn(n, t);
  return r < 0 ? (++this.size, n.push([t, e])) : n[r][1] = e, this;
}
function De(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.clear(); ++e < n; ) {
    var r = t[e];
    this.set(r[0], r[1]);
  }
}
De.prototype.clear = Sc;
De.prototype.delete = kc;
De.prototype.get = Cc;
De.prototype.has = bc;
De.prototype.set = xc;
var Ot = et(Oe, "Map");
function Mc() {
  this.size = 0, this.__data__ = {
    hash: new qe(),
    map: new (Ot || De)(),
    string: new qe()
  };
}
function Pc(t) {
  var e = typeof t;
  return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? t !== "__proto__" : t === null;
}
function pn(t, e) {
  var n = t.__data__;
  return Pc(e) ? n[typeof e == "string" ? "string" : "hash"] : n.map;
}
function wc(t) {
  var e = pn(this, t).delete(t);
  return this.size -= e ? 1 : 0, e;
}
function Uc(t) {
  return pn(this, t).get(t);
}
function Dc(t) {
  return pn(this, t).has(t);
}
function Fc(t, e) {
  var n = pn(this, t), r = n.size;
  return n.set(t, e), this.size += n.size == r ? 0 : 1, this;
}
function Fe(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.clear(); ++e < n; ) {
    var r = t[e];
    this.set(r[0], r[1]);
  }
}
Fe.prototype.clear = Mc;
Fe.prototype.delete = wc;
Fe.prototype.get = Uc;
Fe.prototype.has = Dc;
Fe.prototype.set = Fc;
var $c = "Expected a function";
function lr(t, e) {
  if (typeof t != "function" || e != null && typeof e != "function")
    throw new TypeError($c);
  var n = function() {
    var r = arguments, i = e ? e.apply(this, r) : r[0], s = n.cache;
    if (s.has(i))
      return s.get(i);
    var o = t.apply(this, r);
    return n.cache = s.set(i, o) || s, o;
  };
  return n.cache = new (lr.Cache || Fe)(), n;
}
lr.Cache = Fe;
var jc = 500;
function Gc(t) {
  var e = lr(t, function(r) {
    return n.size === jc && n.clear(), r;
  }), n = e.cache;
  return e;
}
var Bc = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, Vc = /\\(\\)?/g, Kc = Gc(function(t) {
  var e = [];
  return t.charCodeAt(0) === 46 && e.push(""), t.replace(Bc, function(n, r, i, s) {
    e.push(i ? s.replace(Vc, "$1") : r || n);
  }), e;
});
function Hc(t) {
  return t == null ? "" : Fi(t);
}
function mn(t, e) {
  return b(t) ? t : ur(t, e) ? [t] : Kc(Hc(t));
}
function Lt(t) {
  if (typeof t == "string" || on(t))
    return t;
  var e = t + "";
  return e == "0" && 1 / t == -1 / 0 ? "-0" : e;
}
function hr(t, e) {
  e = mn(e, t);
  for (var n = 0, r = e.length; t != null && n < r; )
    t = t[Lt(e[n++])];
  return n && n == r ? t : void 0;
}
function Wc(t, e, n) {
  var r = t == null ? void 0 : hr(t, e);
  return r === void 0 ? n : r;
}
function fr(t, e) {
  for (var n = -1, r = e.length, i = t.length; ++n < r; )
    t[i + n] = e[n];
  return t;
}
var Vr = ce ? ce.isConcatSpreadable : void 0;
function zc(t) {
  return b(t) || hn(t) || !!(Vr && t && t[Vr]);
}
function dr(t, e, n, r, i) {
  var s = -1, o = t.length;
  for (n || (n = zc), i || (i = []); ++s < o; ) {
    var a = t[s];
    n(a) ? fr(i, a) : r || (i[i.length] = a);
  }
  return i;
}
function fe(t) {
  var e = t == null ? 0 : t.length;
  return e ? dr(t) : [];
}
var qi = zi(Object.getPrototypeOf, Object);
function Qi(t, e, n) {
  var r = -1, i = t.length;
  e < 0 && (e = -e > i ? 0 : i + e), n = n > i ? i : n, n < 0 && (n += i), i = e > n ? 0 : n - e >>> 0, e >>>= 0;
  for (var s = Array(i); ++r < i; )
    s[r] = t[r + e];
  return s;
}
function Yc(t, e, n, r) {
  var i = -1, s = t == null ? 0 : t.length;
  for (r && s && (n = t[++i]); ++i < s; )
    n = e(n, t[i], i, t);
  return n;
}
function Xc() {
  this.__data__ = new De(), this.size = 0;
}
function qc(t) {
  var e = this.__data__, n = e.delete(t);
  return this.size = e.size, n;
}
function Qc(t) {
  return this.__data__.get(t);
}
function Zc(t) {
  return this.__data__.has(t);
}
var Jc = 200;
function eu(t, e) {
  var n = this.__data__;
  if (n instanceof De) {
    var r = n.__data__;
    if (!Ot || r.length < Jc - 1)
      return r.push([t, e]), this.size = ++n.size, this;
    n = this.__data__ = new Fe(r);
  }
  return n.set(t, e), this.size = n.size, this;
}
function Re(t) {
  var e = this.__data__ = new De(t);
  this.size = e.size;
}
Re.prototype.clear = Xc;
Re.prototype.delete = qc;
Re.prototype.get = Qc;
Re.prototype.has = Zc;
Re.prototype.set = eu;
function tu(t, e) {
  return t && sr(e, le(e), t);
}
var Zi = typeof exports == "object" && exports && !exports.nodeType && exports, Kr = Zi && typeof module == "object" && module && !module.nodeType && module, nu = Kr && Kr.exports === Zi, Hr = nu ? Oe.Buffer : void 0, Wr = Hr ? Hr.allocUnsafe : void 0;
function ru(t, e) {
  var n = t.length, r = Wr ? Wr(n) : new t.constructor(n);
  return t.copy(r), r;
}
function pr(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length, i = 0, s = []; ++n < r; ) {
    var o = t[n];
    e(o, n, t) && (s[i++] = o);
  }
  return s;
}
function Ji() {
  return [];
}
var iu = Object.prototype, su = iu.propertyIsEnumerable, zr = Object.getOwnPropertySymbols, mr = zr ? function(t) {
  return t == null ? [] : (t = Object(t), pr(zr(t), function(e) {
    return su.call(t, e);
  }));
} : Ji;
function ou(t, e) {
  return sr(t, mr(t), e);
}
var au = Object.getOwnPropertySymbols, cu = au ? function(t) {
  for (var e = []; t; )
    fr(e, mr(t)), t = qi(t);
  return e;
} : Ji;
function es(t, e, n) {
  var r = e(t);
  return b(t) ? r : fr(r, n(t));
}
function Fn(t) {
  return es(t, le, mr);
}
function uu(t) {
  return es(t, Xi, cu);
}
var $n = et(Oe, "DataView"), jn = et(Oe, "Promise"), ot = et(Oe, "Set"), Yr = "[object Map]", lu = "[object Object]", Xr = "[object Promise]", qr = "[object Set]", Qr = "[object WeakMap]", Zr = "[object DataView]", hu = Je($n), fu = Je(Ot), du = Je(jn), pu = Je(ot), mu = Je(Dn), oe = Be;
($n && oe(new $n(new ArrayBuffer(1))) != Zr || Ot && oe(new Ot()) != Yr || jn && oe(jn.resolve()) != Xr || ot && oe(new ot()) != qr || Dn && oe(new Dn()) != Qr) && (oe = function(t) {
  var e = Be(t), n = e == lu ? t.constructor : void 0, r = n ? Je(n) : "";
  if (r)
    switch (r) {
      case hu:
        return Zr;
      case fu:
        return Yr;
      case du:
        return Xr;
      case pu:
        return qr;
      case mu:
        return Qr;
    }
  return e;
});
var gu = Object.prototype, Eu = gu.hasOwnProperty;
function Tu(t) {
  var e = t.length, n = new t.constructor(e);
  return e && typeof t[0] == "string" && Eu.call(t, "index") && (n.index = t.index, n.input = t.input), n;
}
var Xt = Oe.Uint8Array;
function yu(t) {
  var e = new t.constructor(t.byteLength);
  return new Xt(e).set(new Xt(t)), e;
}
function Au(t, e) {
  var n = t.buffer;
  return new t.constructor(n, t.byteOffset, t.byteLength);
}
var _u = /\w*$/;
function vu(t) {
  var e = new t.constructor(t.source, _u.exec(t));
  return e.lastIndex = t.lastIndex, e;
}
var Jr = ce ? ce.prototype : void 0, ei = Jr ? Jr.valueOf : void 0;
function Ru(t) {
  return ei ? Object(ei.call(t)) : {};
}
function Ou(t, e) {
  var n = t.buffer;
  return new t.constructor(n, t.byteOffset, t.length);
}
var Iu = "[object Boolean]", Su = "[object Date]", Nu = "[object Map]", Lu = "[object Number]", ku = "[object RegExp]", Cu = "[object Set]", bu = "[object String]", xu = "[object Symbol]", Mu = "[object ArrayBuffer]", Pu = "[object DataView]", wu = "[object Float32Array]", Uu = "[object Float64Array]", Du = "[object Int8Array]", Fu = "[object Int16Array]", $u = "[object Int32Array]", ju = "[object Uint8Array]", Gu = "[object Uint8ClampedArray]", Bu = "[object Uint16Array]", Vu = "[object Uint32Array]";
function Ku(t, e, n) {
  var r = t.constructor;
  switch (e) {
    case Mu:
      return yu(t);
    case Iu:
    case Su:
      return new r(+t);
    case Pu:
      return Au(t);
    case wu:
    case Uu:
    case Du:
    case Fu:
    case $u:
    case ju:
    case Gu:
    case Bu:
    case Vu:
      return Ou(t);
    case Nu:
      return new r();
    case Lu:
    case bu:
      return new r(t);
    case ku:
      return vu(t);
    case Cu:
      return new r();
    case xu:
      return Ru(t);
  }
}
function Hu(t) {
  return typeof t.constructor == "function" && !Nt(t) ? ra(qi(t)) : {};
}
var Wu = "[object Map]";
function zu(t) {
  return pe(t) && oe(t) == Wu;
}
var ti = je && je.isMap, Yu = ti ? fn(ti) : zu, Xu = "[object Set]";
function qu(t) {
  return pe(t) && oe(t) == Xu;
}
var ni = je && je.isSet, Qu = ni ? fn(ni) : qu, ts = "[object Arguments]", Zu = "[object Array]", Ju = "[object Boolean]", el = "[object Date]", tl = "[object Error]", ns = "[object Function]", nl = "[object GeneratorFunction]", rl = "[object Map]", il = "[object Number]", rs = "[object Object]", sl = "[object RegExp]", ol = "[object Set]", al = "[object String]", cl = "[object Symbol]", ul = "[object WeakMap]", ll = "[object ArrayBuffer]", hl = "[object DataView]", fl = "[object Float32Array]", dl = "[object Float64Array]", pl = "[object Int8Array]", ml = "[object Int16Array]", gl = "[object Int32Array]", El = "[object Uint8Array]", Tl = "[object Uint8ClampedArray]", yl = "[object Uint16Array]", Al = "[object Uint32Array]", P = {};
P[ts] = P[Zu] = P[ll] = P[hl] = P[Ju] = P[el] = P[fl] = P[dl] = P[pl] = P[ml] = P[gl] = P[rl] = P[il] = P[rs] = P[sl] = P[ol] = P[al] = P[cl] = P[El] = P[Tl] = P[yl] = P[Al] = !0;
P[tl] = P[ns] = P[ul] = !1;
function Gt(t, e, n, r, i, s) {
  var o;
  if (o !== void 0)
    return o;
  if (!ue(t))
    return t;
  var a = b(t);
  if (a)
    return o = Tu(t), sa(t, o);
  var c = oe(t), u = c == ns || c == nl;
  if (vt(t))
    return ru(t);
  if (c == rs || c == ts || u && !i)
    return o = u ? {} : Hu(t), ou(t, tu(o, t));
  if (!P[c])
    return i ? t : {};
  o = Ku(t, c), s || (s = new Re());
  var l = s.get(t);
  if (l)
    return l;
  s.set(t, o), Qu(t) ? t.forEach(function(T) {
    o.add(Gt(T, e, n, T, t, s));
  }) : Yu(t) && t.forEach(function(T, p) {
    o.set(p, Gt(T, e, n, p, t, s));
  });
  var h = Fn, f = a ? void 0 : h(t);
  return $i(f || t, function(T, p) {
    f && (p = T, T = t[p]), ln(o, p, Gt(T, e, n, p, t, s));
  }), o;
}
var _l = 4;
function W(t) {
  return Gt(t, _l);
}
function kt(t) {
  for (var e = -1, n = t == null ? 0 : t.length, r = 0, i = []; ++e < n; ) {
    var s = t[e];
    s && (i[r++] = s);
  }
  return i;
}
var vl = "__lodash_hash_undefined__";
function Rl(t) {
  return this.__data__.set(t, vl), this;
}
function Ol(t) {
  return this.__data__.has(t);
}
function ct(t) {
  var e = -1, n = t == null ? 0 : t.length;
  for (this.__data__ = new Fe(); ++e < n; )
    this.add(t[e]);
}
ct.prototype.add = ct.prototype.push = Rl;
ct.prototype.has = Ol;
function is(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length; ++n < r; )
    if (e(t[n], n, t))
      return !0;
  return !1;
}
function gr(t, e) {
  return t.has(e);
}
var Il = 1, Sl = 2;
function ss(t, e, n, r, i, s) {
  var o = n & Il, a = t.length, c = e.length;
  if (a != c && !(o && c > a))
    return !1;
  var u = s.get(t), l = s.get(e);
  if (u && l)
    return u == e && l == t;
  var h = -1, f = !0, T = n & Sl ? new ct() : void 0;
  for (s.set(t, e), s.set(e, t); ++h < a; ) {
    var p = t[h], _ = e[h];
    if (r)
      var O = o ? r(_, p, h, e, t, s) : r(p, _, h, t, e, s);
    if (O !== void 0) {
      if (O)
        continue;
      f = !1;
      break;
    }
    if (T) {
      if (!is(e, function(A, y) {
        if (!gr(T, y) && (p === A || i(p, A, n, r, s)))
          return T.push(y);
      })) {
        f = !1;
        break;
      }
    } else if (!(p === _ || i(p, _, n, r, s))) {
      f = !1;
      break;
    }
  }
  return s.delete(t), s.delete(e), f;
}
function Nl(t) {
  var e = -1, n = Array(t.size);
  return t.forEach(function(r, i) {
    n[++e] = [i, r];
  }), n;
}
function Er(t) {
  var e = -1, n = Array(t.size);
  return t.forEach(function(r) {
    n[++e] = r;
  }), n;
}
var Ll = 1, kl = 2, Cl = "[object Boolean]", bl = "[object Date]", xl = "[object Error]", Ml = "[object Map]", Pl = "[object Number]", wl = "[object RegExp]", Ul = "[object Set]", Dl = "[object String]", Fl = "[object Symbol]", $l = "[object ArrayBuffer]", jl = "[object DataView]", ri = ce ? ce.prototype : void 0, Nn = ri ? ri.valueOf : void 0;
function Gl(t, e, n, r, i, s, o) {
  switch (n) {
    case jl:
      if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset)
        return !1;
      t = t.buffer, e = e.buffer;
    case $l:
      return !(t.byteLength != e.byteLength || !s(new Xt(t), new Xt(e)));
    case Cl:
    case bl:
    case Pl:
      return St(+t, +e);
    case xl:
      return t.name == e.name && t.message == e.message;
    case wl:
    case Dl:
      return t == e + "";
    case Ml:
      var a = Nl;
    case Ul:
      var c = r & Ll;
      if (a || (a = Er), t.size != e.size && !c)
        return !1;
      var u = o.get(t);
      if (u)
        return u == e;
      r |= kl, o.set(t, e);
      var l = ss(a(t), a(e), r, i, s, o);
      return o.delete(t), l;
    case Fl:
      if (Nn)
        return Nn.call(t) == Nn.call(e);
  }
  return !1;
}
var Bl = 1, Vl = Object.prototype, Kl = Vl.hasOwnProperty;
function Hl(t, e, n, r, i, s) {
  var o = n & Bl, a = Fn(t), c = a.length, u = Fn(e), l = u.length;
  if (c != l && !o)
    return !1;
  for (var h = c; h--; ) {
    var f = a[h];
    if (!(o ? f in e : Kl.call(e, f)))
      return !1;
  }
  var T = s.get(t), p = s.get(e);
  if (T && p)
    return T == e && p == t;
  var _ = !0;
  s.set(t, e), s.set(e, t);
  for (var O = o; ++h < c; ) {
    f = a[h];
    var A = t[f], y = e[f];
    if (r)
      var d = o ? r(y, A, f, e, t, s) : r(A, y, f, t, e, s);
    if (!(d === void 0 ? A === y || i(A, y, n, r, s) : d)) {
      _ = !1;
      break;
    }
    O || (O = f == "constructor");
  }
  if (_ && !O) {
    var m = t.constructor, N = e.constructor;
    m != N && "constructor" in t && "constructor" in e && !(typeof m == "function" && m instanceof m && typeof N == "function" && N instanceof N) && (_ = !1);
  }
  return s.delete(t), s.delete(e), _;
}
var Wl = 1, ii = "[object Arguments]", si = "[object Array]", wt = "[object Object]", zl = Object.prototype, oi = zl.hasOwnProperty;
function Yl(t, e, n, r, i, s) {
  var o = b(t), a = b(e), c = o ? si : oe(t), u = a ? si : oe(e);
  c = c == ii ? wt : c, u = u == ii ? wt : u;
  var l = c == wt, h = u == wt, f = c == u;
  if (f && vt(t)) {
    if (!vt(e))
      return !1;
    o = !0, l = !1;
  }
  if (f && !l)
    return s || (s = new Re()), o || cr(t) ? ss(t, e, n, r, i, s) : Gl(t, e, c, n, r, i, s);
  if (!(n & Wl)) {
    var T = l && oi.call(t, "__wrapped__"), p = h && oi.call(e, "__wrapped__");
    if (T || p) {
      var _ = T ? t.value() : t, O = p ? e.value() : e;
      return s || (s = new Re()), i(_, O, n, r, s);
    }
  }
  return f ? (s || (s = new Re()), Hl(t, e, n, r, i, s)) : !1;
}
function Tr(t, e, n, r, i) {
  return t === e ? !0 : t == null || e == null || !pe(t) && !pe(e) ? t !== t && e !== e : Yl(t, e, n, r, Tr, i);
}
var Xl = 1, ql = 2;
function Ql(t, e, n, r) {
  var i = n.length, s = i;
  if (t == null)
    return !s;
  for (t = Object(t); i--; ) {
    var o = n[i];
    if (o[2] ? o[1] !== t[o[0]] : !(o[0] in t))
      return !1;
  }
  for (; ++i < s; ) {
    o = n[i];
    var a = o[0], c = t[a], u = o[1];
    if (o[2]) {
      if (c === void 0 && !(a in t))
        return !1;
    } else {
      var l = new Re(), h;
      if (!(h === void 0 ? Tr(u, c, Xl | ql, r, l) : h))
        return !1;
    }
  }
  return !0;
}
function os(t) {
  return t === t && !ue(t);
}
function Zl(t) {
  for (var e = le(t), n = e.length; n--; ) {
    var r = e[n], i = t[r];
    e[n] = [r, i, os(i)];
  }
  return e;
}
function as(t, e) {
  return function(n) {
    return n == null ? !1 : n[t] === e && (e !== void 0 || t in Object(n));
  };
}
function Jl(t) {
  var e = Zl(t);
  return e.length == 1 && e[0][2] ? as(e[0][0], e[0][1]) : function(n) {
    return n === t || Ql(n, t, e);
  };
}
function eh(t, e) {
  return t != null && e in Object(t);
}
function cs(t, e, n) {
  e = mn(e, t);
  for (var r = -1, i = e.length, s = !1; ++r < i; ) {
    var o = Lt(e[r]);
    if (!(s = t != null && n(t, o)))
      break;
    t = t[o];
  }
  return s || ++r != i ? s : (i = t == null ? 0 : t.length, !!i && ar(i) && un(o, i) && (b(t) || hn(t)));
}
function th(t, e) {
  return t != null && cs(t, e, eh);
}
var nh = 1, rh = 2;
function ih(t, e) {
  return ur(t) && os(e) ? as(Lt(t), e) : function(n) {
    var r = Wc(n, t);
    return r === void 0 && r === e ? th(n, t) : Tr(e, r, nh | rh);
  };
}
function sh(t) {
  return function(e) {
    return e?.[t];
  };
}
function oh(t) {
  return function(e) {
    return hr(e, t);
  };
}
function ah(t) {
  return ur(t) ? sh(Lt(t)) : oh(t);
}
function Se(t) {
  return typeof t == "function" ? t : t == null ? at : typeof t == "object" ? b(t) ? ih(t[0], t[1]) : Jl(t) : ah(t);
}
function ch(t, e, n, r) {
  for (var i = -1, s = t == null ? 0 : t.length; ++i < s; ) {
    var o = t[i];
    e(r, o, n(o), t);
  }
  return r;
}
function uh(t) {
  return function(e, n, r) {
    for (var i = -1, s = Object(e), o = r(e), a = o.length; a--; ) {
      var c = o[++i];
      if (n(s[c], c, s) === !1)
        break;
    }
    return e;
  };
}
var lh = uh();
function hh(t, e) {
  return t && lh(t, e, le);
}
function fh(t, e) {
  return function(n, r) {
    if (n == null)
      return n;
    if (!Ie(n))
      return t(n, r);
    for (var i = n.length, s = -1, o = Object(n); ++s < i && r(o[s], s, o) !== !1; )
      ;
    return n;
  };
}
var tt = fh(hh);
function dh(t, e, n, r) {
  return tt(t, function(i, s, o) {
    e(r, i, n(i), o);
  }), r;
}
function ph(t, e) {
  return function(n, r) {
    var i = b(n) ? ch : dh, s = {};
    return i(n, t, Se(r), s);
  };
}
var us = Object.prototype, mh = us.hasOwnProperty, yr = or(function(t, e) {
  t = Object(t);
  var n = -1, r = e.length, i = r > 2 ? e[2] : void 0;
  for (i && Bi(e[0], e[1], i) && (r = 1); ++n < r; )
    for (var s = e[n], o = Xi(s), a = -1, c = o.length; ++a < c; ) {
      var u = o[a], l = t[u];
      (l === void 0 || St(l, us[u]) && !mh.call(t, u)) && (t[u] = s[u]);
    }
  return t;
});
function ai(t) {
  return pe(t) && Ie(t);
}
var gh = 200;
function Eh(t, e, n, r) {
  var i = -1, s = Gi, o = !0, a = t.length, c = [], u = e.length;
  if (!a)
    return c;
  e.length >= gh && (s = gr, o = !1, e = new ct(e));
  e:
    for (; ++i < a; ) {
      var l = t[i], h = l;
      if (l = l !== 0 ? l : 0, o && h === h) {
        for (var f = u; f--; )
          if (e[f] === h)
            continue e;
        c.push(l);
      } else s(e, h, r) || c.push(l);
    }
  return c;
}
var gn = or(function(t, e) {
  return ai(t) ? Eh(t, dr(e, 1, ai, !0)) : [];
});
function ut(t) {
  var e = t == null ? 0 : t.length;
  return e ? t[e - 1] : void 0;
}
function H(t, e, n) {
  var r = t == null ? 0 : t.length;
  return r ? (e = e === void 0 ? 1 : cn(e), Qi(t, e < 0 ? 0 : e, r)) : [];
}
function It(t, e, n) {
  var r = t == null ? 0 : t.length;
  return r ? (e = e === void 0 ? 1 : cn(e), e = r - e, Qi(t, 0, e < 0 ? 0 : e)) : [];
}
function Th(t) {
  return typeof t == "function" ? t : at;
}
function I(t, e) {
  var n = b(t) ? $i : tt;
  return n(t, Th(e));
}
function yh(t, e) {
  for (var n = -1, r = t == null ? 0 : t.length; ++n < r; )
    if (!e(t[n], n, t))
      return !1;
  return !0;
}
function Ah(t, e) {
  var n = !0;
  return tt(t, function(r, i, s) {
    return n = !!e(r, i, s), n;
  }), n;
}
function de(t, e, n) {
  var r = b(t) ? yh : Ah;
  return r(t, Se(e));
}
function ls(t, e) {
  var n = [];
  return tt(t, function(r, i, s) {
    e(r, i, s) && n.push(r);
  }), n;
}
function he(t, e) {
  var n = b(t) ? pr : ls;
  return n(t, Se(e));
}
function _h(t) {
  return function(e, n, r) {
    var i = Object(e);
    if (!Ie(e)) {
      var s = Se(n);
      e = le(e), n = function(a) {
        return s(i[a], a, i);
      };
    }
    var o = t(e, n, r);
    return o > -1 ? i[s ? e[o] : o] : void 0;
  };
}
var vh = Math.max;
function Rh(t, e, n) {
  var r = t == null ? 0 : t.length;
  if (!r)
    return -1;
  var i = n == null ? 0 : cn(n);
  return i < 0 && (i = vh(r + i, 0)), ji(t, Se(e), i);
}
var lt = _h(Rh);
function me(t) {
  return t && t.length ? t[0] : void 0;
}
function Oh(t, e) {
  var n = -1, r = Ie(t) ? Array(t.length) : [];
  return tt(t, function(i, s, o) {
    r[++n] = e(i, s, o);
  }), r;
}
function v(t, e) {
  var n = b(t) ? an : Oh;
  return n(t, Se(e));
}
function ae(t, e) {
  return dr(v(t, e));
}
var Ih = Object.prototype, Sh = Ih.hasOwnProperty, Nh = ph(function(t, e, n) {
  Sh.call(t, n) ? t[n].push(e) : ir(t, n, [e]);
}), Lh = Object.prototype, kh = Lh.hasOwnProperty;
function Ch(t, e) {
  return t != null && kh.call(t, e);
}
function R(t, e) {
  return t != null && cs(t, e, Ch);
}
var bh = "[object String]";
function J(t) {
  return typeof t == "string" || !b(t) && pe(t) && Be(t) == bh;
}
function xh(t, e) {
  return an(e, function(n) {
    return t[n];
  });
}
function V(t) {
  return t == null ? [] : xh(t, le(t));
}
var Mh = Math.max;
function q(t, e, n, r) {
  t = Ie(t) ? t : V(t), n = n ? cn(n) : 0;
  var i = t.length;
  return n < 0 && (n = Mh(i + n, 0)), J(t) ? n <= i && t.indexOf(e, n) > -1 : !!i && rr(t, e, n) > -1;
}
function ci(t, e, n) {
  var r = t == null ? 0 : t.length;
  if (!r)
    return -1;
  var i = 0;
  return rr(t, e, i);
}
var Ph = "[object Map]", wh = "[object Set]", Uh = Object.prototype, Dh = Uh.hasOwnProperty;
function w(t) {
  if (t == null)
    return !0;
  if (Ie(t) && (b(t) || typeof t == "string" || typeof t.splice == "function" || vt(t) || cr(t) || hn(t)))
    return !t.length;
  var e = oe(t);
  if (e == Ph || e == wh)
    return !t.size;
  if (Nt(t))
    return !Yi(t).length;
  for (var n in t)
    if (Dh.call(t, n))
      return !1;
  return !0;
}
var Fh = "[object RegExp]";
function $h(t) {
  return pe(t) && Be(t) == Fh;
}
var ui = je && je.isRegExp, Me = ui ? fn(ui) : $h;
function Pe(t) {
  return t === void 0;
}
var jh = "Expected a function";
function Gh(t) {
  if (typeof t != "function")
    throw new TypeError(jh);
  return function() {
    var e = arguments;
    switch (e.length) {
      case 0:
        return !t.call(this);
      case 1:
        return !t.call(this, e[0]);
      case 2:
        return !t.call(this, e[0], e[1]);
      case 3:
        return !t.call(this, e[0], e[1], e[2]);
    }
    return !t.apply(this, e);
  };
}
function Bh(t, e, n, r) {
  if (!ue(t))
    return t;
  e = mn(e, t);
  for (var i = -1, s = e.length, o = s - 1, a = t; a != null && ++i < s; ) {
    var c = Lt(e[i]), u = n;
    if (c === "__proto__" || c === "constructor" || c === "prototype")
      return t;
    if (i != o) {
      var l = a[c];
      u = void 0, u === void 0 && (u = ue(l) ? l : un(e[i + 1]) ? [] : {});
    }
    ln(a, c, u), a = a[c];
  }
  return t;
}
function Vh(t, e, n) {
  for (var r = -1, i = e.length, s = {}; ++r < i; ) {
    var o = e[r], a = hr(t, o);
    n(a, o) && Bh(s, mn(o, t), a);
  }
  return s;
}
function ge(t, e) {
  if (t == null)
    return {};
  var n = an(uu(t), function(r) {
    return [r];
  });
  return e = Se(e), Vh(t, n, function(r, i) {
    return e(r, i[0]);
  });
}
function Kh(t, e, n, r, i) {
  return i(t, function(s, o, a) {
    n = r ? (r = !1, s) : e(n, s, o, a);
  }), n;
}
function ne(t, e, n) {
  var r = b(t) ? Yc : Kh, i = arguments.length < 3;
  return r(t, Se(e), n, i, tt);
}
function En(t, e) {
  var n = b(t) ? pr : ls;
  return n(t, Gh(Se(e)));
}
function Hh(t, e) {
  var n;
  return tt(t, function(r, i, s) {
    return n = e(r, i, s), !n;
  }), !!n;
}
function hs(t, e, n) {
  var r = b(t) ? is : Hh;
  return r(t, Se(e));
}
var Wh = 1 / 0, zh = ot && 1 / Er(new ot([, -0]))[1] == Wh ? function(t) {
  return new ot(t);
} : B, Yh = 200;
function Xh(t, e, n) {
  var r = -1, i = Gi, s = t.length, o = !0, a = [], c = a;
  if (s >= Yh) {
    var u = zh(t);
    if (u)
      return Er(u);
    o = !1, i = gr, c = new ct();
  } else
    c = a;
  e:
    for (; ++r < s; ) {
      var l = t[r], h = l;
      if (l = l !== 0 ? l : 0, o && h === h) {
        for (var f = c.length; f--; )
          if (c[f] === h)
            continue e;
        a.push(l);
      } else i(c, h, n) || (c !== a && c.push(h), a.push(l));
    }
  return a;
}
function Ar(t) {
  return t && t.length ? Xh(t) : [];
}
function Gn(t) {
  console && console.error && console.error(`Error: ${t}`);
}
function fs(t) {
  console && console.warn && console.warn(`Warning: ${t}`);
}
function ds(t) {
  const e = (/* @__PURE__ */ new Date()).getTime(), n = t();
  return { time: (/* @__PURE__ */ new Date()).getTime() - e, value: n };
}
function ps(t) {
  function e() {
  }
  e.prototype = t;
  const n = new e();
  function r() {
    return typeof n.bar;
  }
  return r(), r(), t;
}
function qh(t) {
  return Qh(t) ? t.LABEL : t.name;
}
function Qh(t) {
  return J(t.LABEL) && t.LABEL !== "";
}
class Ne {
  get definition() {
    return this._definition;
  }
  set definition(e) {
    this._definition = e;
  }
  constructor(e) {
    this._definition = e;
  }
  accept(e) {
    e.visit(this), I(this.definition, (n) => {
      n.accept(e);
    });
  }
}
class re extends Ne {
  constructor(e) {
    super([]), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
  set definition(e) {
  }
  get definition() {
    return this.referencedRule !== void 0 ? this.referencedRule.definition : [];
  }
  accept(e) {
    e.visit(this);
  }
}
class ht extends Ne {
  constructor(e) {
    super(e.definition), this.orgText = "", te(this, ge(e, (n) => n !== void 0));
  }
}
class ee extends Ne {
  constructor(e) {
    super(e.definition), this.ignoreAmbiguities = !1, te(this, ge(e, (n) => n !== void 0));
  }
}
class Z extends Ne {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class Le extends Ne {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class ke extends Ne {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class K extends Ne {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class Ee extends Ne {
  constructor(e) {
    super(e.definition), this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
}
class Te extends Ne {
  get definition() {
    return this._definition;
  }
  set definition(e) {
    this._definition = e;
  }
  constructor(e) {
    super(e.definition), this.idx = 1, this.ignoreAmbiguities = !1, this.hasPredicates = !1, te(this, ge(e, (n) => n !== void 0));
  }
}
class F {
  constructor(e) {
    this.idx = 1, te(this, ge(e, (n) => n !== void 0));
  }
  accept(e) {
    e.visit(this);
  }
}
function Zh(t) {
  return v(t, Bt);
}
function Bt(t) {
  function e(n) {
    return v(n, Bt);
  }
  if (t instanceof re) {
    const n = {
      type: "NonTerminal",
      name: t.nonTerminalName,
      idx: t.idx
    };
    return J(t.label) && (n.label = t.label), n;
  } else {
    if (t instanceof ee)
      return {
        type: "Alternative",
        definition: e(t.definition)
      };
    if (t instanceof Z)
      return {
        type: "Option",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof Le)
      return {
        type: "RepetitionMandatory",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof ke)
      return {
        type: "RepetitionMandatoryWithSeparator",
        idx: t.idx,
        separator: Bt(new F({ terminalType: t.separator })),
        definition: e(t.definition)
      };
    if (t instanceof Ee)
      return {
        type: "RepetitionWithSeparator",
        idx: t.idx,
        separator: Bt(new F({ terminalType: t.separator })),
        definition: e(t.definition)
      };
    if (t instanceof K)
      return {
        type: "Repetition",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof Te)
      return {
        type: "Alternation",
        idx: t.idx,
        definition: e(t.definition)
      };
    if (t instanceof F) {
      const n = {
        type: "Terminal",
        name: t.terminalType.name,
        label: qh(t.terminalType),
        idx: t.idx
      };
      J(t.label) && (n.terminalLabel = t.label);
      const r = t.terminalType.PATTERN;
      return t.terminalType.PATTERN && (n.pattern = Me(r) ? r.source : r), n;
    } else {
      if (t instanceof ht)
        return {
          type: "Rule",
          name: t.name,
          orgText: t.orgText,
          definition: e(t.definition)
        };
      throw Error("non exhaustive match");
    }
  }
}
class ft {
  visit(e) {
    const n = e;
    switch (n.constructor) {
      case re:
        return this.visitNonTerminal(n);
      case ee:
        return this.visitAlternative(n);
      case Z:
        return this.visitOption(n);
      case Le:
        return this.visitRepetitionMandatory(n);
      case ke:
        return this.visitRepetitionMandatoryWithSeparator(n);
      case Ee:
        return this.visitRepetitionWithSeparator(n);
      case K:
        return this.visitRepetition(n);
      case Te:
        return this.visitAlternation(n);
      case F:
        return this.visitTerminal(n);
      case ht:
        return this.visitRule(n);
      /* c8 ignore next 2 */
      default:
        throw Error("non exhaustive match");
    }
  }
  /* c8 ignore next */
  visitNonTerminal(e) {
  }
  /* c8 ignore next */
  visitAlternative(e) {
  }
  /* c8 ignore next */
  visitOption(e) {
  }
  /* c8 ignore next */
  visitRepetition(e) {
  }
  /* c8 ignore next */
  visitRepetitionMandatory(e) {
  }
  /* c8 ignore next 3 */
  visitRepetitionMandatoryWithSeparator(e) {
  }
  /* c8 ignore next */
  visitRepetitionWithSeparator(e) {
  }
  /* c8 ignore next */
  visitAlternation(e) {
  }
  /* c8 ignore next */
  visitTerminal(e) {
  }
  /* c8 ignore next */
  visitRule(e) {
  }
}
function Jh(t) {
  return t instanceof ee || t instanceof Z || t instanceof K || t instanceof Le || t instanceof ke || t instanceof Ee || t instanceof F || t instanceof ht;
}
function qt(t, e = []) {
  return t instanceof Z || t instanceof K || t instanceof Ee ? !0 : t instanceof Te ? hs(t.definition, (n) => qt(n, e)) : t instanceof re && q(e, t) ? !1 : t instanceof Ne ? (t instanceof re && e.push(t), de(t.definition, (n) => qt(n, e))) : !1;
}
function ef(t) {
  return t instanceof Te;
}
function ve(t) {
  if (t instanceof re)
    return "SUBRULE";
  if (t instanceof Z)
    return "OPTION";
  if (t instanceof Te)
    return "OR";
  if (t instanceof Le)
    return "AT_LEAST_ONE";
  if (t instanceof ke)
    return "AT_LEAST_ONE_SEP";
  if (t instanceof Ee)
    return "MANY_SEP";
  if (t instanceof K)
    return "MANY";
  if (t instanceof F)
    return "CONSUME";
  throw Error("non exhaustive match");
}
class Tn {
  walk(e, n = []) {
    I(e.definition, (r, i) => {
      const s = H(e.definition, i + 1);
      if (r instanceof re)
        this.walkProdRef(r, s, n);
      else if (r instanceof F)
        this.walkTerminal(r, s, n);
      else if (r instanceof ee)
        this.walkFlat(r, s, n);
      else if (r instanceof Z)
        this.walkOption(r, s, n);
      else if (r instanceof Le)
        this.walkAtLeastOne(r, s, n);
      else if (r instanceof ke)
        this.walkAtLeastOneSep(r, s, n);
      else if (r instanceof Ee)
        this.walkManySep(r, s, n);
      else if (r instanceof K)
        this.walkMany(r, s, n);
      else if (r instanceof Te)
        this.walkOr(r, s, n);
      else
        throw Error("non exhaustive match");
    });
  }
  walkTerminal(e, n, r) {
  }
  walkProdRef(e, n, r) {
  }
  walkFlat(e, n, r) {
    const i = n.concat(r);
    this.walk(e, i);
  }
  walkOption(e, n, r) {
    const i = n.concat(r);
    this.walk(e, i);
  }
  walkAtLeastOne(e, n, r) {
    const i = [
      new Z({ definition: e.definition })
    ].concat(n, r);
    this.walk(e, i);
  }
  walkAtLeastOneSep(e, n, r) {
    const i = li(e, n, r);
    this.walk(e, i);
  }
  walkMany(e, n, r) {
    const i = [
      new Z({ definition: e.definition })
    ].concat(n, r);
    this.walk(e, i);
  }
  walkManySep(e, n, r) {
    const i = li(e, n, r);
    this.walk(e, i);
  }
  walkOr(e, n, r) {
    const i = n.concat(r);
    I(e.definition, (s) => {
      const o = new ee({ definition: [s] });
      this.walk(o, i);
    });
  }
}
function li(t, e, n) {
  return [
    new Z({
      definition: [
        new F({ terminalType: t.separator })
      ].concat(t.definition)
    })
  ].concat(e, n);
}
function Ct(t) {
  if (t instanceof re)
    return Ct(t.referencedRule);
  if (t instanceof F)
    return rf(t);
  if (Jh(t))
    return tf(t);
  if (ef(t))
    return nf(t);
  throw Error("non exhaustive match");
}
function tf(t) {
  let e = [];
  const n = t.definition;
  let r = 0, i = n.length > r, s, o = !0;
  for (; i && o; )
    s = n[r], o = qt(s), e = e.concat(Ct(s)), r = r + 1, i = n.length > r;
  return Ar(e);
}
function nf(t) {
  const e = v(t.definition, (n) => Ct(n));
  return Ar(fe(e));
}
function rf(t) {
  return [t.terminalType];
}
const ms = "_~IN~_";
class sf extends Tn {
  constructor(e) {
    super(), this.topProd = e, this.follows = {};
  }
  startWalking() {
    return this.walk(this.topProd), this.follows;
  }
  walkTerminal(e, n, r) {
  }
  walkProdRef(e, n, r) {
    const i = af(e.referencedRule, e.idx) + this.topProd.name, s = n.concat(r), o = new ee({ definition: s }), a = Ct(o);
    this.follows[i] = a;
  }
}
function of(t) {
  const e = {};
  return I(t, (n) => {
    const r = new sf(n).startWalking();
    te(e, r);
  }), e;
}
function af(t, e) {
  return t.name + e + ms;
}
function S(t) {
  return t.charCodeAt(0);
}
function Ln(t, e) {
  Array.isArray(t) ? t.forEach(function(n) {
    e.push(n);
  }) : e.push(t);
}
function mt(t, e) {
  if (t[e] === !0)
    throw "duplicate flag " + e;
  t[e], t[e] = !0;
}
function st(t) {
  if (t === void 0)
    throw Error("Internal Error - Should never get here!");
  return !0;
}
function cf() {
  throw Error("Internal Error - Should never get here!");
}
function hi(t) {
  return t.type === "Character";
}
const Qt = [];
for (let t = S("0"); t <= S("9"); t++)
  Qt.push(t);
const Zt = [S("_")].concat(Qt);
for (let t = S("a"); t <= S("z"); t++)
  Zt.push(t);
for (let t = S("A"); t <= S("Z"); t++)
  Zt.push(t);
const fi = [
  S(" "),
  S("\f"),
  S(`
`),
  S("\r"),
  S("	"),
  S("\v"),
  S("	"),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S(" "),
  S("\u2028"),
  S("\u2029"),
  S(" "),
  S(" "),
  S("　"),
  S("\uFEFF")
], uf = /[0-9a-fA-F]/, Ut = /[0-9]/, lf = /[1-9]/;
class hf {
  constructor() {
    this.idx = 0, this.input = "", this.groupIdx = 0;
  }
  saveState() {
    return {
      idx: this.idx,
      input: this.input,
      groupIdx: this.groupIdx
    };
  }
  restoreState(e) {
    this.idx = e.idx, this.input = e.input, this.groupIdx = e.groupIdx;
  }
  pattern(e) {
    this.idx = 0, this.input = e, this.groupIdx = 0, this.consumeChar("/");
    const n = this.disjunction();
    this.consumeChar("/");
    const r = {
      type: "Flags",
      loc: { begin: this.idx, end: e.length },
      global: !1,
      ignoreCase: !1,
      multiLine: !1,
      unicode: !1,
      sticky: !1
    };
    for (; this.isRegExpFlag(); )
      switch (this.popChar()) {
        case "g":
          mt(r, "global");
          break;
        case "i":
          mt(r, "ignoreCase");
          break;
        case "m":
          mt(r, "multiLine");
          break;
        case "u":
          mt(r, "unicode");
          break;
        case "y":
          mt(r, "sticky");
          break;
      }
    if (this.idx !== this.input.length)
      throw Error("Redundant input: " + this.input.substring(this.idx));
    return {
      type: "Pattern",
      flags: r,
      value: n,
      loc: this.loc(0)
    };
  }
  disjunction() {
    const e = [], n = this.idx;
    for (e.push(this.alternative()); this.peekChar() === "|"; )
      this.consumeChar("|"), e.push(this.alternative());
    return { type: "Disjunction", value: e, loc: this.loc(n) };
  }
  alternative() {
    const e = [], n = this.idx;
    for (; this.isTerm(); )
      e.push(this.term());
    return { type: "Alternative", value: e, loc: this.loc(n) };
  }
  term() {
    return this.isAssertion() ? this.assertion() : this.atom();
  }
  assertion() {
    const e = this.idx;
    switch (this.popChar()) {
      case "^":
        return {
          type: "StartAnchor",
          loc: this.loc(e)
        };
      case "$":
        return { type: "EndAnchor", loc: this.loc(e) };
      // '\b' or '\B'
      case "\\":
        switch (this.popChar()) {
          case "b":
            return {
              type: "WordBoundary",
              loc: this.loc(e)
            };
          case "B":
            return {
              type: "NonWordBoundary",
              loc: this.loc(e)
            };
        }
        throw Error("Invalid Assertion Escape");
      // '(?=' or '(?!'
      case "(":
        this.consumeChar("?");
        let n;
        switch (this.popChar()) {
          case "=":
            n = "Lookahead";
            break;
          case "!":
            n = "NegativeLookahead";
            break;
        }
        st(n);
        const r = this.disjunction();
        return this.consumeChar(")"), {
          type: n,
          value: r,
          loc: this.loc(e)
        };
    }
    return cf();
  }
  quantifier(e = !1) {
    let n;
    const r = this.idx;
    switch (this.popChar()) {
      case "*":
        n = {
          atLeast: 0,
          atMost: 1 / 0
        };
        break;
      case "+":
        n = {
          atLeast: 1,
          atMost: 1 / 0
        };
        break;
      case "?":
        n = {
          atLeast: 0,
          atMost: 1
        };
        break;
      case "{":
        const i = this.integerIncludingZero();
        switch (this.popChar()) {
          case "}":
            n = {
              atLeast: i,
              atMost: i
            };
            break;
          case ",":
            let s;
            this.isDigit() ? (s = this.integerIncludingZero(), n = {
              atLeast: i,
              atMost: s
            }) : n = {
              atLeast: i,
              atMost: 1 / 0
            }, this.consumeChar("}");
            break;
        }
        if (e === !0 && n === void 0)
          return;
        st(n);
        break;
    }
    if (!(e === !0 && n === void 0) && st(n))
      return this.peekChar(0) === "?" ? (this.consumeChar("?"), n.greedy = !1) : n.greedy = !0, n.type = "Quantifier", n.loc = this.loc(r), n;
  }
  atom() {
    let e;
    const n = this.idx;
    switch (this.peekChar()) {
      case ".":
        e = this.dotAll();
        break;
      case "\\":
        e = this.atomEscape();
        break;
      case "[":
        e = this.characterClass();
        break;
      case "(":
        e = this.group();
        break;
    }
    if (e === void 0 && this.isPatternCharacter() && (e = this.patternCharacter()), st(e))
      return e.loc = this.loc(n), this.isQuantifier() && (e.quantifier = this.quantifier()), e;
  }
  dotAll() {
    return this.consumeChar("."), {
      type: "Set",
      complement: !0,
      value: [S(`
`), S("\r"), S("\u2028"), S("\u2029")]
    };
  }
  atomEscape() {
    switch (this.consumeChar("\\"), this.peekChar()) {
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        return this.decimalEscapeAtom();
      case "d":
      case "D":
      case "s":
      case "S":
      case "w":
      case "W":
        return this.characterClassEscape();
      case "f":
      case "n":
      case "r":
      case "t":
      case "v":
        return this.controlEscapeAtom();
      case "c":
        return this.controlLetterEscapeAtom();
      case "0":
        return this.nulCharacterAtom();
      case "x":
        return this.hexEscapeSequenceAtom();
      case "u":
        return this.regExpUnicodeEscapeSequenceAtom();
      default:
        return this.identityEscapeAtom();
    }
  }
  decimalEscapeAtom() {
    return { type: "GroupBackReference", value: this.positiveInteger() };
  }
  characterClassEscape() {
    let e, n = !1;
    switch (this.popChar()) {
      case "d":
        e = Qt;
        break;
      case "D":
        e = Qt, n = !0;
        break;
      case "s":
        e = fi;
        break;
      case "S":
        e = fi, n = !0;
        break;
      case "w":
        e = Zt;
        break;
      case "W":
        e = Zt, n = !0;
        break;
    }
    if (st(e))
      return { type: "Set", value: e, complement: n };
  }
  controlEscapeAtom() {
    let e;
    switch (this.popChar()) {
      case "f":
        e = S("\f");
        break;
      case "n":
        e = S(`
`);
        break;
      case "r":
        e = S("\r");
        break;
      case "t":
        e = S("	");
        break;
      case "v":
        e = S("\v");
        break;
    }
    if (st(e))
      return { type: "Character", value: e };
  }
  controlLetterEscapeAtom() {
    this.consumeChar("c");
    const e = this.popChar();
    if (/[a-zA-Z]/.test(e) === !1)
      throw Error("Invalid ");
    return { type: "Character", value: e.toUpperCase().charCodeAt(0) - 64 };
  }
  nulCharacterAtom() {
    return this.consumeChar("0"), { type: "Character", value: S("\0") };
  }
  hexEscapeSequenceAtom() {
    return this.consumeChar("x"), this.parseHexDigits(2);
  }
  regExpUnicodeEscapeSequenceAtom() {
    return this.consumeChar("u"), this.parseHexDigits(4);
  }
  identityEscapeAtom() {
    const e = this.popChar();
    return { type: "Character", value: S(e) };
  }
  classPatternCharacterAtom() {
    switch (this.peekChar()) {
      // istanbul ignore next
      case `
`:
      // istanbul ignore next
      case "\r":
      // istanbul ignore next
      case "\u2028":
      // istanbul ignore next
      case "\u2029":
      // istanbul ignore next
      case "\\":
      // istanbul ignore next
      case "]":
        throw Error("TBD");
      default:
        const e = this.popChar();
        return { type: "Character", value: S(e) };
    }
  }
  characterClass() {
    const e = [];
    let n = !1;
    for (this.consumeChar("["), this.peekChar(0) === "^" && (this.consumeChar("^"), n = !0); this.isClassAtom(); ) {
      const r = this.classAtom();
      if (r.type, hi(r) && this.isRangeDash()) {
        this.consumeChar("-");
        const i = this.classAtom();
        if (i.type, hi(i)) {
          if (i.value < r.value)
            throw Error("Range out of order in character class");
          e.push({ from: r.value, to: i.value });
        } else
          Ln(r.value, e), e.push(S("-")), Ln(i.value, e);
      } else
        Ln(r.value, e);
    }
    return this.consumeChar("]"), { type: "Set", complement: n, value: e };
  }
  classAtom() {
    switch (this.peekChar()) {
      // istanbul ignore next
      case "]":
      // istanbul ignore next
      case `
`:
      // istanbul ignore next
      case "\r":
      // istanbul ignore next
      case "\u2028":
      // istanbul ignore next
      case "\u2029":
        throw Error("TBD");
      case "\\":
        return this.classEscape();
      default:
        return this.classPatternCharacterAtom();
    }
  }
  classEscape() {
    switch (this.consumeChar("\\"), this.peekChar()) {
      // Matches a backspace.
      // (Not to be confused with \b word boundary outside characterClass)
      case "b":
        return this.consumeChar("b"), { type: "Character", value: S("\b") };
      case "d":
      case "D":
      case "s":
      case "S":
      case "w":
      case "W":
        return this.characterClassEscape();
      case "f":
      case "n":
      case "r":
      case "t":
      case "v":
        return this.controlEscapeAtom();
      case "c":
        return this.controlLetterEscapeAtom();
      case "0":
        return this.nulCharacterAtom();
      case "x":
        return this.hexEscapeSequenceAtom();
      case "u":
        return this.regExpUnicodeEscapeSequenceAtom();
      default:
        return this.identityEscapeAtom();
    }
  }
  group() {
    let e = !0;
    switch (this.consumeChar("("), this.peekChar(0)) {
      case "?":
        this.consumeChar("?"), this.consumeChar(":"), e = !1;
        break;
      default:
        this.groupIdx++;
        break;
    }
    const n = this.disjunction();
    this.consumeChar(")");
    const r = {
      type: "Group",
      capturing: e,
      value: n
    };
    return e && (r.idx = this.groupIdx), r;
  }
  positiveInteger() {
    let e = this.popChar();
    if (lf.test(e) === !1)
      throw Error("Expecting a positive integer");
    for (; Ut.test(this.peekChar(0)); )
      e += this.popChar();
    return parseInt(e, 10);
  }
  integerIncludingZero() {
    let e = this.popChar();
    if (Ut.test(e) === !1)
      throw Error("Expecting an integer");
    for (; Ut.test(this.peekChar(0)); )
      e += this.popChar();
    return parseInt(e, 10);
  }
  patternCharacter() {
    const e = this.popChar();
    switch (e) {
      // istanbul ignore next
      case `
`:
      // istanbul ignore next
      case "\r":
      // istanbul ignore next
      case "\u2028":
      // istanbul ignore next
      case "\u2029":
      // istanbul ignore next
      case "^":
      // istanbul ignore next
      case "$":
      // istanbul ignore next
      case "\\":
      // istanbul ignore next
      case ".":
      // istanbul ignore next
      case "*":
      // istanbul ignore next
      case "+":
      // istanbul ignore next
      case "?":
      // istanbul ignore next
      case "(":
      // istanbul ignore next
      case ")":
      // istanbul ignore next
      case "[":
      // istanbul ignore next
      case "|":
        throw Error("TBD");
      default:
        return { type: "Character", value: S(e) };
    }
  }
  isRegExpFlag() {
    switch (this.peekChar(0)) {
      case "g":
      case "i":
      case "m":
      case "u":
      case "y":
        return !0;
      default:
        return !1;
    }
  }
  isRangeDash() {
    return this.peekChar() === "-" && this.isClassAtom(1);
  }
  isDigit() {
    return Ut.test(this.peekChar(0));
  }
  isClassAtom(e = 0) {
    switch (this.peekChar(e)) {
      case "]":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        return !1;
      default:
        return !0;
    }
  }
  isTerm() {
    return this.isAtom() || this.isAssertion();
  }
  isAtom() {
    if (this.isPatternCharacter())
      return !0;
    switch (this.peekChar(0)) {
      case ".":
      case "\\":
      // atomEscape
      case "[":
      // characterClass
      // TODO: isAtom must be called before isAssertion - disambiguate
      case "(":
        return !0;
      default:
        return !1;
    }
  }
  isAssertion() {
    switch (this.peekChar(0)) {
      case "^":
      case "$":
        return !0;
      // '\b' or '\B'
      case "\\":
        switch (this.peekChar(1)) {
          case "b":
          case "B":
            return !0;
          default:
            return !1;
        }
      // '(?=' or '(?!'
      case "(":
        return this.peekChar(1) === "?" && (this.peekChar(2) === "=" || this.peekChar(2) === "!");
      default:
        return !1;
    }
  }
  isQuantifier() {
    const e = this.saveState();
    try {
      return this.quantifier(!0) !== void 0;
    } catch {
      return !1;
    } finally {
      this.restoreState(e);
    }
  }
  isPatternCharacter() {
    switch (this.peekChar()) {
      case "^":
      case "$":
      case "\\":
      case ".":
      case "*":
      case "+":
      case "?":
      case "(":
      case ")":
      case "[":
      case "|":
      case "/":
      case `
`:
      case "\r":
      case "\u2028":
      case "\u2029":
        return !1;
      default:
        return !0;
    }
  }
  parseHexDigits(e) {
    let n = "";
    for (let r = 0; r < e; r++) {
      const i = this.popChar();
      if (uf.test(i) === !1)
        throw Error("Expecting a HexDecimal digits");
      n += i;
    }
    return { type: "Character", value: parseInt(n, 16) };
  }
  peekChar(e = 0) {
    return this.input[this.idx + e];
  }
  popChar() {
    const e = this.peekChar(0);
    return this.consumeChar(void 0), e;
  }
  consumeChar(e) {
    if (e !== void 0 && this.input[this.idx] !== e)
      throw Error("Expected: '" + e + "' but found: '" + this.input[this.idx] + "' at offset: " + this.idx);
    if (this.idx >= this.input.length)
      throw Error("Unexpected end of input");
    this.idx++;
  }
  loc(e) {
    return { begin: e, end: this.idx };
  }
}
class _r {
  visitChildren(e) {
    for (const n in e) {
      const r = e[n];
      e.hasOwnProperty(n) && (r.type !== void 0 ? this.visit(r) : Array.isArray(r) && r.forEach((i) => {
        this.visit(i);
      }, this));
    }
  }
  visit(e) {
    switch (e.type) {
      case "Pattern":
        this.visitPattern(e);
        break;
      case "Flags":
        this.visitFlags(e);
        break;
      case "Disjunction":
        this.visitDisjunction(e);
        break;
      case "Alternative":
        this.visitAlternative(e);
        break;
      case "StartAnchor":
        this.visitStartAnchor(e);
        break;
      case "EndAnchor":
        this.visitEndAnchor(e);
        break;
      case "WordBoundary":
        this.visitWordBoundary(e);
        break;
      case "NonWordBoundary":
        this.visitNonWordBoundary(e);
        break;
      case "Lookahead":
        this.visitLookahead(e);
        break;
      case "NegativeLookahead":
        this.visitNegativeLookahead(e);
        break;
      case "Character":
        this.visitCharacter(e);
        break;
      case "Set":
        this.visitSet(e);
        break;
      case "Group":
        this.visitGroup(e);
        break;
      case "GroupBackReference":
        this.visitGroupBackReference(e);
        break;
      case "Quantifier":
        this.visitQuantifier(e);
        break;
    }
    this.visitChildren(e);
  }
  visitPattern(e) {
  }
  visitFlags(e) {
  }
  visitDisjunction(e) {
  }
  visitAlternative(e) {
  }
  // Assertion
  visitStartAnchor(e) {
  }
  visitEndAnchor(e) {
  }
  visitWordBoundary(e) {
  }
  visitNonWordBoundary(e) {
  }
  visitLookahead(e) {
  }
  visitNegativeLookahead(e) {
  }
  // atoms
  visitCharacter(e) {
  }
  visitSet(e) {
  }
  visitGroup(e) {
  }
  visitGroupBackReference(e) {
  }
  visitQuantifier(e) {
  }
}
let Vt = {};
const ff = new hf();
function yn(t) {
  const e = t.toString();
  if (Vt.hasOwnProperty(e))
    return Vt[e];
  {
    const n = ff.pattern(e);
    return Vt[e] = n, n;
  }
}
function df() {
  Vt = {};
}
const gs = "Complement Sets are not supported for first char optimization", Jt = `Unable to use "first char" lexer optimizations:
`;
function pf(t, e = !1) {
  try {
    const n = yn(t);
    return Bn(n.value, {}, n.flags.ignoreCase);
  } catch (n) {
    if (n.message === gs)
      e && fs(`${Jt}	Unable to optimize: < ${t.toString()} >
	Complement Sets cannot be automatically optimized.
	This will disable the lexer's first char optimizations.
	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.`);
    else {
      let r = "";
      e && (r = `
	This will disable the lexer's first char optimizations.
	See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.`), Gn(`${Jt}
	Failed parsing: < ${t.toString()} >
	Using the @chevrotain/regexp-to-ast library
	Please open an issue at: https://github.com/chevrotain/chevrotain/issues` + r);
    }
  }
  return [];
}
function Bn(t, e, n) {
  switch (t.type) {
    case "Disjunction":
      for (let i = 0; i < t.value.length; i++)
        Bn(t.value[i], e, n);
      break;
    case "Alternative":
      const r = t.value;
      for (let i = 0; i < r.length; i++) {
        const s = r[i];
        switch (s.type) {
          case "EndAnchor":
          // A group back reference cannot affect potential starting char.
          // because if a back reference is the first production than automatically
          // the group being referenced has had to come BEFORE so its codes have already been added
          case "GroupBackReference":
          // assertions do not affect potential starting codes
          case "Lookahead":
          case "NegativeLookahead":
          case "StartAnchor":
          case "WordBoundary":
          case "NonWordBoundary":
            continue;
        }
        const o = s;
        switch (o.type) {
          case "Character":
            Dt(o.value, e, n);
            break;
          case "Set":
            if (o.complement === !0)
              throw Error(gs);
            I(o.value, (c) => {
              if (typeof c == "number")
                Dt(c, e, n);
              else {
                const u = c;
                if (n === !0)
                  for (let l = u.from; l <= u.to; l++)
                    Dt(l, e, n);
                else {
                  for (let l = u.from; l <= u.to && l < Tt; l++)
                    Dt(l, e, n);
                  if (u.to >= Tt) {
                    const l = u.from >= Tt ? u.from : Tt, h = u.to, f = Ge(l), T = Ge(h);
                    for (let p = f; p <= T; p++)
                      e[p] = p;
                  }
                }
              }
            });
            break;
          case "Group":
            Bn(o.value, e, n);
            break;
          /* istanbul ignore next */
          default:
            throw Error("Non Exhaustive Match");
        }
        const a = o.quantifier !== void 0 && o.quantifier.atLeast === 0;
        if (
          // A group may be optional due to empty contents /(?:)/
          // or if everything inside it is optional /((a)?)/
          o.type === "Group" && Vn(o) === !1 || // If this term is not a group it may only be optional if it has an optional quantifier
          o.type !== "Group" && a === !1
        )
          break;
      }
      break;
    /* istanbul ignore next */
    default:
      throw Error("non exhaustive match!");
  }
  return V(e);
}
function Dt(t, e, n) {
  const r = Ge(t);
  e[r] = r, n === !0 && mf(t, e);
}
function mf(t, e) {
  const n = String.fromCharCode(t), r = n.toUpperCase();
  if (r !== n) {
    const i = Ge(r.charCodeAt(0));
    e[i] = i;
  } else {
    const i = n.toLowerCase();
    if (i !== n) {
      const s = Ge(i.charCodeAt(0));
      e[s] = s;
    }
  }
}
function di(t, e) {
  return lt(t.value, (n) => {
    if (typeof n == "number")
      return q(e, n);
    {
      const r = n;
      return lt(e, (i) => r.from <= i && i <= r.to) !== void 0;
    }
  });
}
function Vn(t) {
  const e = t.quantifier;
  return e && e.atLeast === 0 ? !0 : t.value ? b(t.value) ? de(t.value, Vn) : Vn(t.value) : !1;
}
class gf extends _r {
  constructor(e) {
    super(), this.targetCharCodes = e, this.found = !1;
  }
  visitChildren(e) {
    if (this.found !== !0) {
      switch (e.type) {
        case "Lookahead":
          this.visitLookahead(e);
          return;
        case "NegativeLookahead":
          this.visitNegativeLookahead(e);
          return;
      }
      super.visitChildren(e);
    }
  }
  visitCharacter(e) {
    q(this.targetCharCodes, e.value) && (this.found = !0);
  }
  visitSet(e) {
    e.complement ? di(e, this.targetCharCodes) === void 0 && (this.found = !0) : di(e, this.targetCharCodes) !== void 0 && (this.found = !0);
  }
}
function vr(t, e) {
  if (e instanceof RegExp) {
    const n = yn(e), r = new gf(t);
    return r.visit(n), r.found;
  } else
    return lt(e, (n) => q(t, n.charCodeAt(0))) !== void 0;
}
const Qe = "PATTERN", Et = "defaultMode", Ft = "modes";
let Es = typeof new RegExp("(?:)").sticky == "boolean";
function Ef(t, e) {
  e = yr(e, {
    useSticky: Es,
    debug: !1,
    safeMode: !1,
    positionTracking: "full",
    lineTerminatorCharacters: ["\r", `
`],
    tracer: (y, d) => d()
  });
  const n = e.tracer;
  n("initCharCodeToOptimizedIndexMap", () => {
    jf();
  });
  let r;
  n("Reject Lexer.NA", () => {
    r = En(t, (y) => y[Qe] === Y.NA);
  });
  let i = !1, s;
  n("Transform Patterns", () => {
    i = !1, s = v(r, (y) => {
      const d = y[Qe];
      if (Me(d)) {
        const m = d.source;
        return m.length === 1 && // only these regExp meta characters which can appear in a length one regExp
        m !== "^" && m !== "$" && m !== "." && !d.ignoreCase ? m : m.length === 2 && m[0] === "\\" && // not a meta character
        !q([
          "d",
          "D",
          "s",
          "S",
          "t",
          "r",
          "n",
          "t",
          "0",
          "c",
          "b",
          "B",
          "f",
          "v",
          "w",
          "W"
        ], m[1]) ? m[1] : e.useSticky ? mi(d) : pi(d);
      } else {
        if (Ue(d))
          return i = !0, { exec: d };
        if (typeof d == "object")
          return i = !0, d;
        if (typeof d == "string") {
          if (d.length === 1)
            return d;
          {
            const m = d.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&"), N = new RegExp(m);
            return e.useSticky ? mi(N) : pi(N);
          }
        } else
          throw Error("non exhaustive match");
      }
    });
  });
  let o, a, c, u, l;
  n("misc mapping", () => {
    o = v(r, (y) => y.tokenTypeIdx), a = v(r, (y) => {
      const d = y.GROUP;
      if (d !== Y.SKIPPED) {
        if (J(d))
          return d;
        if (Pe(d))
          return !1;
        throw Error("non exhaustive match");
      }
    }), c = v(r, (y) => {
      const d = y.LONGER_ALT;
      if (d)
        return b(d) ? v(d, (m) => ci(r, m)) : [ci(r, d)];
    }), u = v(r, (y) => y.PUSH_MODE), l = v(r, (y) => R(y, "POP_MODE"));
  });
  let h;
  n("Line Terminator Handling", () => {
    const y = As(e.lineTerminatorCharacters);
    h = v(r, (d) => !1), e.positionTracking !== "onlyOffset" && (h = v(r, (d) => R(d, "LINE_BREAKS") ? !!d.LINE_BREAKS : ys(d, y) === !1 && vr(y, d.PATTERN)));
  });
  let f, T, p, _;
  n("Misc Mapping #2", () => {
    f = v(r, Ts), T = v(s, Df), p = ne(r, (y, d) => {
      const m = d.GROUP;
      return J(m) && m !== Y.SKIPPED && (y[m] = []), y;
    }, {}), _ = v(s, (y, d) => ({
      pattern: s[d],
      longerAlt: c[d],
      canLineTerminator: h[d],
      isCustom: f[d],
      short: T[d],
      group: a[d],
      push: u[d],
      pop: l[d],
      tokenTypeIdx: o[d],
      tokenType: r[d]
    }));
  });
  let O = !0, A = [];
  return e.safeMode || n("First Char Optimization", () => {
    A = ne(r, (y, d, m) => {
      if (typeof d.PATTERN == "string") {
        const N = d.PATTERN.charCodeAt(0), z = Ge(N);
        kn(y, z, _[m]);
      } else if (b(d.START_CHARS_HINT)) {
        let N;
        I(d.START_CHARS_HINT, (z) => {
          const ie = typeof z == "string" ? z.charCodeAt(0) : z, ye = Ge(ie);
          N !== ye && (N = ye, kn(y, ye, _[m]));
        });
      } else if (Me(d.PATTERN))
        if (d.PATTERN.unicode)
          O = !1, e.ensureOptimizations && Gn(`${Jt}	Unable to analyze < ${d.PATTERN.toString()} > pattern.
	The regexp unicode flag is not currently supported by the regexp-to-ast library.
	This will disable the lexer's first char optimizations.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE`);
        else {
          const N = pf(d.PATTERN, e.ensureOptimizations);
          w(N) && (O = !1), I(N, (z) => {
            kn(y, z, _[m]);
          });
        }
      else
        e.ensureOptimizations && Gn(`${Jt}	TokenType: <${d.name}> is using a custom token pattern without providing <start_chars_hint> parameter.
	This will disable the lexer's first char optimizations.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE`), O = !1;
      return y;
    }, []);
  }), {
    emptyGroups: p,
    patternIdxToConfig: _,
    charCodeToPatternIdxToConfig: A,
    hasCustom: i,
    canBeOptimized: O
  };
}
function Tf(t, e) {
  let n = [];
  const r = Af(t);
  n = n.concat(r.errors);
  const i = _f(r.valid), s = i.valid;
  return n = n.concat(i.errors), n = n.concat(yf(s)), n = n.concat(kf(s)), n = n.concat(Cf(s, e)), n = n.concat(bf(s)), n;
}
function yf(t) {
  let e = [];
  const n = he(t, (r) => Me(r[Qe]));
  return e = e.concat(Rf(n)), e = e.concat(Sf(n)), e = e.concat(Nf(n)), e = e.concat(Lf(n)), e = e.concat(Of(n)), e;
}
function Af(t) {
  const e = he(t, (i) => !R(i, Qe)), n = v(e, (i) => ({
    message: "Token Type: ->" + i.name + "<- missing static 'PATTERN' property",
    type: j.MISSING_PATTERN,
    tokenTypes: [i]
  })), r = gn(t, e);
  return { errors: n, valid: r };
}
function _f(t) {
  const e = he(t, (i) => {
    const s = i[Qe];
    return !Me(s) && !Ue(s) && !R(s, "exec") && !J(s);
  }), n = v(e, (i) => ({
    message: "Token Type: ->" + i.name + "<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",
    type: j.INVALID_PATTERN,
    tokenTypes: [i]
  })), r = gn(t, e);
  return { errors: n, valid: r };
}
const vf = /[^\\][$]/;
function Rf(t) {
  class e extends _r {
    constructor() {
      super(...arguments), this.found = !1;
    }
    visitEndAnchor(i) {
      this.found = !0;
    }
  }
  const n = he(t, (r) => {
    const i = r.PATTERN;
    try {
      const s = yn(i), o = new e();
      return o.visit(s), o.found;
    } catch {
      return vf.test(i.source);
    }
  });
  return v(n, (r) => ({
    message: `Unexpected RegExp Anchor Error:
	Token Type: ->` + r.name + `<- static 'PATTERN' cannot contain end of input anchor '$'
	See chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.`,
    type: j.EOI_ANCHOR_FOUND,
    tokenTypes: [r]
  }));
}
function Of(t) {
  const e = he(t, (n) => n.PATTERN.test(""));
  return v(e, (n) => ({
    message: "Token Type: ->" + n.name + "<- static 'PATTERN' must not match an empty string",
    type: j.EMPTY_MATCH_PATTERN,
    tokenTypes: [n]
  }));
}
const If = /[^\\[][\^]|^\^/;
function Sf(t) {
  class e extends _r {
    constructor() {
      super(...arguments), this.found = !1;
    }
    visitStartAnchor(i) {
      this.found = !0;
    }
  }
  const n = he(t, (r) => {
    const i = r.PATTERN;
    try {
      const s = yn(i), o = new e();
      return o.visit(s), o.found;
    } catch {
      return If.test(i.source);
    }
  });
  return v(n, (r) => ({
    message: `Unexpected RegExp Anchor Error:
	Token Type: ->` + r.name + `<- static 'PATTERN' cannot contain start of input anchor '^'
	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS	for details.`,
    type: j.SOI_ANCHOR_FOUND,
    tokenTypes: [r]
  }));
}
function Nf(t) {
  const e = he(t, (n) => {
    const r = n[Qe];
    return r instanceof RegExp && (r.multiline || r.global);
  });
  return v(e, (n) => ({
    message: "Token Type: ->" + n.name + "<- static 'PATTERN' may NOT contain global('g') or multiline('m')",
    type: j.UNSUPPORTED_FLAGS_FOUND,
    tokenTypes: [n]
  }));
}
function Lf(t) {
  const e = [];
  let n = v(t, (i) => ne(t, (s, o) => (i.PATTERN.source === o.PATTERN.source && !q(e, o) && o.PATTERN !== Y.NA && (e.push(o), s.push(o)), s), []));
  n = kt(n);
  const r = he(n, (i) => i.length > 1);
  return v(r, (i) => {
    const s = v(i, (o) => o.name);
    return {
      message: `The same RegExp pattern ->${me(i).PATTERN}<-has been used in all of the following Token Types: ${s.join(", ")} <-`,
      type: j.DUPLICATE_PATTERNS_FOUND,
      tokenTypes: i
    };
  });
}
function kf(t) {
  const e = he(t, (n) => {
    if (!R(n, "GROUP"))
      return !1;
    const r = n.GROUP;
    return r !== Y.SKIPPED && r !== Y.NA && !J(r);
  });
  return v(e, (n) => ({
    message: "Token Type: ->" + n.name + "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",
    type: j.INVALID_GROUP_TYPE_FOUND,
    tokenTypes: [n]
  }));
}
function Cf(t, e) {
  const n = he(t, (r) => r.PUSH_MODE !== void 0 && !q(e, r.PUSH_MODE));
  return v(n, (r) => ({
    message: `Token Type: ->${r.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${r.PUSH_MODE}<-which does not exist`,
    type: j.PUSH_MODE_DOES_NOT_EXIST,
    tokenTypes: [r]
  }));
}
function bf(t) {
  const e = [], n = ne(t, (r, i, s) => {
    const o = i.PATTERN;
    return o === Y.NA || (J(o) ? r.push({ str: o, idx: s, tokenType: i }) : Me(o) && Mf(o) && r.push({ str: o.source, idx: s, tokenType: i })), r;
  }, []);
  return I(t, (r, i) => {
    I(n, ({ str: s, idx: o, tokenType: a }) => {
      if (i < o && xf(s, r.PATTERN)) {
        const c = `Token: ->${a.name}<- can never be matched.
Because it appears AFTER the Token Type ->${r.name}<-in the lexer's definition.
See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;
        e.push({
          message: c,
          type: j.UNREACHABLE_PATTERN,
          tokenTypes: [r, a]
        });
      }
    });
  }), e;
}
function xf(t, e) {
  if (Me(e)) {
    const n = e.exec(t);
    return n !== null && n.index === 0;
  } else {
    if (Ue(e))
      return e(t, 0, [], {});
    if (R(e, "exec"))
      return e.exec(t, 0, [], {});
    if (typeof e == "string")
      return e === t;
    throw Error("non exhaustive match");
  }
}
function Mf(t) {
  return lt([
    ".",
    "\\",
    "[",
    "]",
    "|",
    "^",
    "$",
    "(",
    ")",
    "?",
    "*",
    "+",
    "{"
  ], (e) => t.source.indexOf(e) !== -1) === void 0;
}
function pi(t) {
  const e = t.ignoreCase ? "i" : "";
  return new RegExp(`^(?:${t.source})`, e);
}
function mi(t) {
  const e = t.ignoreCase ? "iy" : "y";
  return new RegExp(`${t.source}`, e);
}
function Pf(t, e, n) {
  const r = [];
  return R(t, Et) || r.push({
    message: "A MultiMode Lexer cannot be initialized without a <" + Et + `> property in its definition
`,
    type: j.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE
  }), R(t, Ft) || r.push({
    message: "A MultiMode Lexer cannot be initialized without a <" + Ft + `> property in its definition
`,
    type: j.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY
  }), R(t, Ft) && R(t, Et) && !R(t.modes, t.defaultMode) && r.push({
    message: `A MultiMode Lexer cannot be initialized with a ${Et}: <${t.defaultMode}>which does not exist
`,
    type: j.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST
  }), R(t, Ft) && I(t.modes, (i, s) => {
    I(i, (o, a) => {
      if (Pe(o))
        r.push({
          message: `A Lexer cannot be initialized using an undefined Token Type. Mode:<${s}> at index: <${a}>
`,
          type: j.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED
        });
      else if (R(o, "LONGER_ALT")) {
        const c = b(o.LONGER_ALT) ? o.LONGER_ALT : [o.LONGER_ALT];
        I(c, (u) => {
          !Pe(u) && !q(i, u) && r.push({
            message: `A MultiMode Lexer cannot be initialized with a longer_alt <${u.name}> on token <${o.name}> outside of mode <${s}>
`,
            type: j.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE
          });
        });
      }
    });
  }), r;
}
function wf(t, e, n) {
  const r = [];
  let i = !1;
  const s = kt(fe(V(t.modes))), o = En(s, (c) => c[Qe] === Y.NA), a = As(n);
  return e && I(o, (c) => {
    const u = ys(c, a);
    if (u !== !1) {
      const l = {
        message: $f(c, u),
        type: u.issue,
        tokenType: c
      };
      r.push(l);
    } else
      R(c, "LINE_BREAKS") ? c.LINE_BREAKS === !0 && (i = !0) : vr(a, c.PATTERN) && (i = !0);
  }), e && !i && r.push({
    message: `Warning: No LINE_BREAKS Found.
	This Lexer has been defined to track line and column information,
	But none of the Token Types can be identified as matching a line terminator.
	See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS 
	for details.`,
    type: j.NO_LINE_BREAKS_FLAGS
  }), r;
}
function Uf(t) {
  const e = {}, n = le(t);
  return I(n, (r) => {
    const i = t[r];
    if (b(i))
      e[r] = [];
    else
      throw Error("non exhaustive match");
  }), e;
}
function Ts(t) {
  const e = t.PATTERN;
  if (Me(e))
    return !1;
  if (Ue(e) || R(e, "exec"))
    return !0;
  if (J(e))
    return !1;
  throw Error("non exhaustive match");
}
function Df(t) {
  return J(t) && t.length === 1 ? t.charCodeAt(0) : !1;
}
const Ff = {
  // implements /\n|\r\n?/g.test
  test: function(t) {
    const e = t.length;
    for (let n = this.lastIndex; n < e; n++) {
      const r = t.charCodeAt(n);
      if (r === 10)
        return this.lastIndex = n + 1, !0;
      if (r === 13)
        return t.charCodeAt(n + 1) === 10 ? this.lastIndex = n + 2 : this.lastIndex = n + 1, !0;
    }
    return !1;
  },
  lastIndex: 0
};
function ys(t, e) {
  if (R(t, "LINE_BREAKS"))
    return !1;
  if (Me(t.PATTERN)) {
    try {
      vr(e, t.PATTERN);
    } catch (n) {
      return {
        issue: j.IDENTIFY_TERMINATOR,
        errMsg: n.message
      };
    }
    return !1;
  } else {
    if (J(t.PATTERN))
      return !1;
    if (Ts(t))
      return { issue: j.CUSTOM_LINE_BREAK };
    throw Error("non exhaustive match");
  }
}
function $f(t, e) {
  if (e.issue === j.IDENTIFY_TERMINATOR)
    return `Warning: unable to identify line terminator usage in pattern.
	The problem is in the <${t.name}> Token Type
	 Root cause: ${e.errMsg}.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR`;
  if (e.issue === j.CUSTOM_LINE_BREAK)
    return `Warning: A Custom Token Pattern should specify the <line_breaks> option.
	The problem is in the <${t.name}> Token Type
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK`;
  throw Error("non exhaustive match");
}
function As(t) {
  return v(t, (e) => J(e) ? e.charCodeAt(0) : e);
}
function kn(t, e, n) {
  t[e] === void 0 ? t[e] = [n] : t[e].push(n);
}
const Tt = 256;
let Kt = [];
function Ge(t) {
  return t < Tt ? t : Kt[t];
}
function jf() {
  if (w(Kt)) {
    Kt = new Array(65536);
    for (let t = 0; t < 65536; t++)
      Kt[t] = t > 255 ? 255 + ~~(t / 255) : t;
  }
}
function bt(t, e) {
  const n = t.tokenTypeIdx;
  return n === e.tokenTypeIdx ? !0 : e.isParent === !0 && e.categoryMatchesMap[n] === !0;
}
function en(t, e) {
  return t.tokenTypeIdx === e.tokenTypeIdx;
}
let gi = 1;
const _s = {};
function xt(t) {
  const e = Gf(t);
  Bf(e), Kf(e), Vf(e), I(e, (n) => {
    n.isParent = n.categoryMatches.length > 0;
  });
}
function Gf(t) {
  let e = W(t), n = t, r = !0;
  for (; r; ) {
    n = kt(fe(v(n, (s) => s.CATEGORIES)));
    const i = gn(n, e);
    e = e.concat(i), w(i) ? r = !1 : n = i;
  }
  return e;
}
function Bf(t) {
  I(t, (e) => {
    Rs(e) || (_s[gi] = e, e.tokenTypeIdx = gi++), Ei(e) && !b(e.CATEGORIES) && (e.CATEGORIES = [e.CATEGORIES]), Ei(e) || (e.CATEGORIES = []), Hf(e) || (e.categoryMatches = []), Wf(e) || (e.categoryMatchesMap = {});
  });
}
function Vf(t) {
  I(t, (e) => {
    e.categoryMatches = [], I(e.categoryMatchesMap, (n, r) => {
      e.categoryMatches.push(_s[r].tokenTypeIdx);
    });
  });
}
function Kf(t) {
  I(t, (e) => {
    vs([], e);
  });
}
function vs(t, e) {
  I(t, (n) => {
    e.categoryMatchesMap[n.tokenTypeIdx] = !0;
  }), I(e.CATEGORIES, (n) => {
    const r = t.concat(e);
    q(r, n) || vs(r, n);
  });
}
function Rs(t) {
  return R(t, "tokenTypeIdx");
}
function Ei(t) {
  return R(t, "CATEGORIES");
}
function Hf(t) {
  return R(t, "categoryMatches");
}
function Wf(t) {
  return R(t, "categoryMatchesMap");
}
function zf(t) {
  return R(t, "tokenTypeIdx");
}
const Yf = {
  buildUnableToPopLexerModeMessage(t) {
    return `Unable to pop Lexer Mode after encountering Token ->${t.image}<- The Mode Stack is empty`;
  },
  buildUnexpectedCharactersMessage(t, e, n, r, i) {
    return `unexpected character: ->${t.charAt(e)}<- at offset: ${e}, skipped ${n} characters.`;
  }
};
var j;
(function(t) {
  t[t.MISSING_PATTERN = 0] = "MISSING_PATTERN", t[t.INVALID_PATTERN = 1] = "INVALID_PATTERN", t[t.EOI_ANCHOR_FOUND = 2] = "EOI_ANCHOR_FOUND", t[t.UNSUPPORTED_FLAGS_FOUND = 3] = "UNSUPPORTED_FLAGS_FOUND", t[t.DUPLICATE_PATTERNS_FOUND = 4] = "DUPLICATE_PATTERNS_FOUND", t[t.INVALID_GROUP_TYPE_FOUND = 5] = "INVALID_GROUP_TYPE_FOUND", t[t.PUSH_MODE_DOES_NOT_EXIST = 6] = "PUSH_MODE_DOES_NOT_EXIST", t[t.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE", t[t.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY", t[t.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST", t[t.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED", t[t.SOI_ANCHOR_FOUND = 11] = "SOI_ANCHOR_FOUND", t[t.EMPTY_MATCH_PATTERN = 12] = "EMPTY_MATCH_PATTERN", t[t.NO_LINE_BREAKS_FLAGS = 13] = "NO_LINE_BREAKS_FLAGS", t[t.UNREACHABLE_PATTERN = 14] = "UNREACHABLE_PATTERN", t[t.IDENTIFY_TERMINATOR = 15] = "IDENTIFY_TERMINATOR", t[t.CUSTOM_LINE_BREAK = 16] = "CUSTOM_LINE_BREAK", t[t.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE = 17] = "MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE";
})(j || (j = {}));
const yt = {
  deferDefinitionErrorsHandling: !1,
  positionTracking: "full",
  lineTerminatorsPattern: /\n|\r\n?/g,
  lineTerminatorCharacters: [`
`, "\r"],
  ensureOptimizations: !1,
  safeMode: !1,
  errorMessageProvider: Yf,
  traceInitPerf: !1,
  skipValidations: !1,
  recoveryEnabled: !0
};
Object.freeze(yt);
class Y {
  constructor(e, n = yt) {
    if (this.lexerDefinition = e, this.lexerDefinitionErrors = [], this.lexerDefinitionWarning = [], this.patternIdxToConfig = {}, this.charCodeToPatternIdxToConfig = {}, this.modes = [], this.emptyGroups = {}, this.trackStartLines = !0, this.trackEndLines = !0, this.hasCustom = !1, this.canModeBeOptimized = {}, this.TRACE_INIT = (i, s) => {
      if (this.traceInitPerf === !0) {
        this.traceInitIndent++;
        const o = new Array(this.traceInitIndent + 1).join("	");
        this.traceInitIndent < this.traceInitMaxIdent && console.log(`${o}--> <${i}>`);
        const { time: a, value: c } = ds(s), u = a > 10 ? console.warn : console.log;
        return this.traceInitIndent < this.traceInitMaxIdent && u(`${o}<-- <${i}> time: ${a}ms`), this.traceInitIndent--, c;
      } else
        return s();
    }, typeof n == "boolean")
      throw Error(`The second argument to the Lexer constructor is now an ILexerConfig Object.
a boolean 2nd argument is no longer supported`);
    this.config = te({}, yt, n);
    const r = this.config.traceInitPerf;
    r === !0 ? (this.traceInitMaxIdent = 1 / 0, this.traceInitPerf = !0) : typeof r == "number" && (this.traceInitMaxIdent = r, this.traceInitPerf = !0), this.traceInitIndent = -1, this.TRACE_INIT("Lexer Constructor", () => {
      let i, s = !0;
      this.TRACE_INIT("Lexer Config handling", () => {
        if (this.config.lineTerminatorsPattern === yt.lineTerminatorsPattern)
          this.config.lineTerminatorsPattern = Ff;
        else if (this.config.lineTerminatorCharacters === yt.lineTerminatorCharacters)
          throw Error(`Error: Missing <lineTerminatorCharacters> property on the Lexer config.
	For details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS`);
        if (n.safeMode && n.ensureOptimizations)
          throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
        this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking), this.trackEndLines = /full/i.test(this.config.positionTracking), b(e) ? i = {
          modes: { defaultMode: W(e) },
          defaultMode: Et
        } : (s = !1, i = W(e));
      }), this.config.skipValidations === !1 && (this.TRACE_INIT("performRuntimeChecks", () => {
        this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(Pf(i, this.trackStartLines, this.config.lineTerminatorCharacters));
      }), this.TRACE_INIT("performWarningRuntimeChecks", () => {
        this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(wf(i, this.trackStartLines, this.config.lineTerminatorCharacters));
      })), i.modes = i.modes ? i.modes : {}, I(i.modes, (a, c) => {
        i.modes[c] = En(a, (u) => Pe(u));
      });
      const o = le(i.modes);
      if (I(i.modes, (a, c) => {
        this.TRACE_INIT(`Mode: <${c}> processing`, () => {
          if (this.modes.push(c), this.config.skipValidations === !1 && this.TRACE_INIT("validatePatterns", () => {
            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(Tf(a, o));
          }), w(this.lexerDefinitionErrors)) {
            xt(a);
            let u;
            this.TRACE_INIT("analyzeTokenTypes", () => {
              u = Ef(a, {
                lineTerminatorCharacters: this.config.lineTerminatorCharacters,
                positionTracking: n.positionTracking,
                ensureOptimizations: n.ensureOptimizations,
                safeMode: n.safeMode,
                tracer: this.TRACE_INIT
              });
            }), this.patternIdxToConfig[c] = u.patternIdxToConfig, this.charCodeToPatternIdxToConfig[c] = u.charCodeToPatternIdxToConfig, this.emptyGroups = te({}, this.emptyGroups, u.emptyGroups), this.hasCustom = u.hasCustom || this.hasCustom, this.canModeBeOptimized[c] = u.canBeOptimized;
          }
        });
      }), this.defaultMode = i.defaultMode, !w(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {
        const a = v(this.lexerDefinitionErrors, (c) => c.message).join(`-----------------------
`);
        throw new Error(`Errors detected in definition of Lexer:
` + a);
      }
      I(this.lexerDefinitionWarning, (a) => {
        fs(a.message);
      }), this.TRACE_INIT("Choosing sub-methods implementations", () => {
        if (Es ? (this.chopInput = at, this.match = this.matchWithTest) : (this.updateLastIndex = B, this.match = this.matchWithExec), s && (this.handleModes = B), this.trackStartLines === !1 && (this.computeNewColumn = at), this.trackEndLines === !1 && (this.updateTokenEndLineColumnLocation = B), /full/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createFullToken;
        else if (/onlyStart/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createStartOnlyToken;
        else if (/onlyOffset/i.test(this.config.positionTracking))
          this.createTokenInstance = this.createOffsetOnlyToken;
        else
          throw Error(`Invalid <positionTracking> config option: "${this.config.positionTracking}"`);
        this.hasCustom ? (this.addToken = this.addTokenUsingPush, this.handlePayload = this.handlePayloadWithCustom) : (this.addToken = this.addTokenUsingMemberAccess, this.handlePayload = this.handlePayloadNoCustom);
      }), this.TRACE_INIT("Failed Optimization Warnings", () => {
        const a = ne(this.canModeBeOptimized, (c, u, l) => (u === !1 && c.push(l), c), []);
        if (n.ensureOptimizations && !w(a))
          throw Error(`Lexer Modes: < ${a.join(", ")} > cannot be optimized.
	 Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.
	 Or inspect the console log for details on how to resolve these issues.`);
      }), this.TRACE_INIT("clearRegExpParserCache", () => {
        df();
      }), this.TRACE_INIT("toFastProperties", () => {
        ps(this);
      });
    });
  }
  tokenize(e, n = this.defaultMode) {
    if (!w(this.lexerDefinitionErrors)) {
      const r = v(this.lexerDefinitionErrors, (i) => i.message).join(`-----------------------
`);
      throw new Error(`Unable to Tokenize because Errors detected in definition of Lexer:
` + r);
    }
    return this.tokenizeInternal(e, n);
  }
  // There is quite a bit of duplication between this and "tokenizeInternalLazy"
  // This is intentional due to performance considerations.
  // this method also used quite a bit of `!` none null assertions because it is too optimized
  // for `tsc` to always understand it is "safe"
  tokenizeInternal(e, n) {
    let r, i, s, o, a, c, u, l, h, f, T, p, _, O, A;
    const y = e, d = y.length;
    let m = 0, N = 0;
    const z = this.hasCustom ? 0 : Math.floor(e.length / 10), ie = new Array(z), ye = [];
    let Ke = this.trackStartLines ? 1 : void 0, Ae = this.trackStartLines ? 1 : void 0;
    const He = Uf(this.emptyGroups), Rn = this.trackStartLines, dt = this.config.lineTerminatorsPattern;
    let nt = 0, _e = [], We = [];
    const rt = [], it = [];
    Object.freeze(it);
    let ze;
    function Pt() {
      return _e;
    }
    function g(M) {
      const G = Ge(M), Ce = We[G];
      return Ce === void 0 ? it : Ce;
    }
    const E = (M) => {
      if (rt.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a "transition"
      // So no error should occur.
      M.tokenType.PUSH_MODE === void 0) {
        const G = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(M);
        ye.push({
          offset: M.startOffset,
          line: M.startLine,
          column: M.startColumn,
          length: M.image.length,
          message: G
        });
      } else {
        rt.pop();
        const G = ut(rt);
        _e = this.patternIdxToConfig[G], We = this.charCodeToPatternIdxToConfig[G], nt = _e.length;
        const Ce = this.canModeBeOptimized[G] && this.config.safeMode === !1;
        We && Ce ? ze = g : ze = Pt;
      }
    };
    function L(M) {
      rt.push(M), We = this.charCodeToPatternIdxToConfig[M], _e = this.patternIdxToConfig[M], nt = _e.length, nt = _e.length;
      const G = this.canModeBeOptimized[M] && this.config.safeMode === !1;
      We && G ? ze = g : ze = Pt;
    }
    L.call(this, n);
    let k;
    const D = this.config.recoveryEnabled;
    for (; m < d; ) {
      c = null;
      const M = y.charCodeAt(m), G = ze(M), Ce = G.length;
      for (r = 0; r < Ce; r++) {
        k = G[r];
        const Q = k.pattern;
        u = null;
        const be = k.short;
        if (be !== !1 ? M === be && (c = Q) : k.isCustom === !0 ? (A = Q.exec(y, m, ie, He), A !== null ? (c = A[0], A.payload !== void 0 && (u = A.payload)) : c = null) : (this.updateLastIndex(Q, m), c = this.match(Q, e, m)), c !== null) {
          if (a = k.longerAlt, a !== void 0) {
            const $e = a.length;
            for (s = 0; s < $e; s++) {
              const xe = _e[a[s]], Ye = xe.pattern;
              if (l = null, xe.isCustom === !0 ? (A = Ye.exec(y, m, ie, He), A !== null ? (o = A[0], A.payload !== void 0 && (l = A.payload)) : o = null) : (this.updateLastIndex(Ye, m), o = this.match(Ye, e, m)), o && o.length > c.length) {
                c = o, u = l, k = xe;
                break;
              }
            }
          }
          break;
        }
      }
      if (c !== null) {
        if (h = c.length, f = k.group, f !== void 0 && (T = k.tokenTypeIdx, p = this.createTokenInstance(c, m, T, k.tokenType, Ke, Ae, h), this.handlePayload(p, u), f === !1 ? N = this.addToken(ie, N, p) : He[f].push(p)), e = this.chopInput(e, h), m = m + h, Ae = this.computeNewColumn(Ae, h), Rn === !0 && k.canLineTerminator === !0) {
          let Q = 0, be, $e;
          dt.lastIndex = 0;
          do
            be = dt.test(c), be === !0 && ($e = dt.lastIndex - 1, Q++);
          while (be === !0);
          Q !== 0 && (Ke = Ke + Q, Ae = h - $e, this.updateTokenEndLineColumnLocation(p, f, $e, Q, Ke, Ae, h));
        }
        this.handleModes(k, E, L, p);
      } else {
        const Q = m, be = Ke, $e = Ae;
        let xe = D === !1;
        for (; xe === !1 && m < d; )
          for (e = this.chopInput(e, 1), m++, i = 0; i < nt; i++) {
            const Ye = _e[i], On = Ye.pattern, br = Ye.short;
            if (br !== !1 ? y.charCodeAt(m) === br && (xe = !0) : Ye.isCustom === !0 ? xe = On.exec(y, m, ie, He) !== null : (this.updateLastIndex(On, m), xe = On.exec(e) !== null), xe === !0)
              break;
          }
        if (_ = m - Q, Ae = this.computeNewColumn(Ae, _), O = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(y, Q, _, be, $e), ye.push({
          offset: Q,
          line: be,
          column: $e,
          length: _,
          message: O
        }), D === !1)
          break;
      }
    }
    return this.hasCustom || (ie.length = N), {
      tokens: ie,
      groups: He,
      errors: ye
    };
  }
  handleModes(e, n, r, i) {
    if (e.pop === !0) {
      const s = e.push;
      n(i), s !== void 0 && r.call(this, s);
    } else e.push !== void 0 && r.call(this, e.push);
  }
  chopInput(e, n) {
    return e.substring(n);
  }
  updateLastIndex(e, n) {
    e.lastIndex = n;
  }
  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler
  updateTokenEndLineColumnLocation(e, n, r, i, s, o, a) {
    let c, u;
    n !== void 0 && (c = r === a - 1, u = c ? -1 : 0, i === 1 && c === !0 || (e.endLine = s + u, e.endColumn = o - 1 + -u));
  }
  computeNewColumn(e, n) {
    return e + n;
  }
  createOffsetOnlyToken(e, n, r, i) {
    return {
      image: e,
      startOffset: n,
      tokenTypeIdx: r,
      tokenType: i
    };
  }
  createStartOnlyToken(e, n, r, i, s, o) {
    return {
      image: e,
      startOffset: n,
      startLine: s,
      startColumn: o,
      tokenTypeIdx: r,
      tokenType: i
    };
  }
  createFullToken(e, n, r, i, s, o, a) {
    return {
      image: e,
      startOffset: n,
      endOffset: n + a - 1,
      startLine: s,
      endLine: s,
      startColumn: o,
      endColumn: o + a - 1,
      tokenTypeIdx: r,
      tokenType: i
    };
  }
  addTokenUsingPush(e, n, r) {
    return e.push(r), n;
  }
  addTokenUsingMemberAccess(e, n, r) {
    return e[n] = r, n++, n;
  }
  handlePayloadNoCustom(e, n) {
  }
  handlePayloadWithCustom(e, n) {
    n !== null && (e.payload = n);
  }
  matchWithTest(e, n, r) {
    return e.test(n) === !0 ? n.substring(r, e.lastIndex) : null;
  }
  matchWithExec(e, n) {
    const r = e.exec(n);
    return r !== null ? r[0] : null;
  }
}
Y.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.";
Y.NA = /NOT_APPLICABLE/;
function _t(t) {
  return Os(t) ? t.LABEL : t.name;
}
function Os(t) {
  return J(t.LABEL) && t.LABEL !== "";
}
const Xf = "parent", Ti = "categories", yi = "label", Ai = "group", _i = "push_mode", vi = "pop_mode", Ri = "longer_alt", Oi = "line_breaks", Ii = "start_chars_hint";
function x(t) {
  return qf(t);
}
function qf(t) {
  const e = t.pattern, n = {};
  if (n.name = t.name, Pe(e) || (n.PATTERN = e), R(t, Xf))
    throw `The parent property is no longer supported.
See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.`;
  return R(t, Ti) && (n.CATEGORIES = t[Ti]), xt([n]), R(t, yi) && (n.LABEL = t[yi]), R(t, Ai) && (n.GROUP = t[Ai]), R(t, vi) && (n.POP_MODE = t[vi]), R(t, _i) && (n.PUSH_MODE = t[_i]), R(t, Ri) && (n.LONGER_ALT = t[Ri]), R(t, Oi) && (n.LINE_BREAKS = t[Oi]), R(t, Ii) && (n.START_CHARS_HINT = t[Ii]), n;
}
const Ze = x({ name: "EOF", pattern: Y.NA });
xt([Ze]);
function Rr(t, e, n, r, i, s, o, a) {
  return {
    image: e,
    startOffset: n,
    endOffset: r,
    startLine: i,
    endLine: s,
    startColumn: o,
    endColumn: a,
    tokenTypeIdx: t.tokenTypeIdx,
    tokenType: t
  };
}
function Qf(t, e) {
  return bt(t, e);
}
const Is = {
  buildMismatchTokenMessage({ expected: t, actual: e, previous: n, ruleName: r }) {
    return `Expecting ${Os(t) ? `--> ${_t(t)} <--` : `token of type --> ${t.name} <--`} but found --> '${e.image}' <--`;
  },
  buildNotAllInputParsedMessage({ firstRedundant: t, ruleName: e }) {
    return "Redundant input, expecting EOF but found: " + t.image;
  },
  buildNoViableAltMessage({ expectedPathsPerAlt: t, actual: e, previous: n, customUserDescription: r, ruleName: i }) {
    const s = "Expecting: ", o = `
but found: '` + me(e).image + "'";
    if (r)
      return s + r + o;
    {
      const a = ne(t, (l, h) => l.concat(h), []), c = v(a, (l) => `[${v(l, (h) => _t(h)).join(", ")}]`), u = `one of these possible Token sequences:
${v(c, (l, h) => `  ${h + 1}. ${l}`).join(`
`)}`;
      return s + u + o;
    }
  },
  buildEarlyExitMessage({ expectedIterationPaths: t, actual: e, customUserDescription: n, ruleName: r }) {
    const i = "Expecting: ", s = `
but found: '` + me(e).image + "'";
    if (n)
      return i + n + s;
    {
      const o = `expecting at least one iteration which starts with one of these possible Token sequences::
  <${v(t, (a) => `[${v(a, (c) => _t(c)).join(",")}]`).join(" ,")}>`;
      return i + o + s;
    }
  }
};
Object.freeze(Is);
const Zf = {
  buildRuleNotFoundError(t, e) {
    return "Invalid grammar, reference to a rule which is not defined: ->" + e.nonTerminalName + `<-
inside top level rule: ->` + t.name + "<-";
  }
}, Xe = {
  buildDuplicateFoundError(t, e) {
    function n(l) {
      return l instanceof F ? l.terminalType.name : l instanceof re ? l.nonTerminalName : "";
    }
    const r = t.name, i = me(e), s = i.idx, o = ve(i), a = n(i), c = s > 0;
    let u = `->${o}${c ? s : ""}<- ${a ? `with argument: ->${a}<-` : ""}
                  appears more than once (${e.length} times) in the top level rule: ->${r}<-.                  
                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES 
                  `;
    return u = u.replace(/[ \t]+/g, " "), u = u.replace(/\s\s+/g, `
`), u;
  },
  buildNamespaceConflictError(t) {
    return `Namespace conflict found in grammar.
The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${t.name}>.
To resolve this make sure each Terminal and Non-Terminal names are unique
This is easy to accomplish by using the convention that Terminal names start with an uppercase letter
and Non-Terminal names start with a lower case letter.`;
  },
  buildAlternationPrefixAmbiguityError(t) {
    const e = v(t.prefixPath, (r) => _t(r)).join(", "), n = t.alternation.idx === 0 ? "" : t.alternation.idx;
    return `Ambiguous alternatives: <${t.ambiguityIndices.join(" ,")}> due to common lookahead prefix
in <OR${n}> inside <${t.topLevelRule.name}> Rule,
<${e}> may appears as a prefix path in all these alternatives.
See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX
For Further details.`;
  },
  buildAlternationAmbiguityError(t) {
    const e = v(t.prefixPath, (i) => _t(i)).join(", "), n = t.alternation.idx === 0 ? "" : t.alternation.idx;
    let r = `Ambiguous Alternatives Detected: <${t.ambiguityIndices.join(" ,")}> in <OR${n}> inside <${t.topLevelRule.name}> Rule,
<${e}> may appears as a prefix path in all these alternatives.
`;
    return r = r + `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES
For Further details.`, r;
  },
  buildEmptyRepetitionError(t) {
    let e = ve(t.repetition);
    return t.repetition.idx !== 0 && (e += t.repetition.idx), `The repetition <${e}> within Rule <${t.topLevelRule.name}> can never consume any tokens.
This could lead to an infinite loop.`;
  },
  // TODO: remove - `errors_public` from nyc.config.js exclude
  //       once this method is fully removed from this file
  buildTokenNameError(t) {
    return "deprecated";
  },
  buildEmptyAlternationError(t) {
    return `Ambiguous empty alternative: <${t.emptyChoiceIdx + 1}> in <OR${t.alternation.idx}> inside <${t.topLevelRule.name}> Rule.
Only the last alternative may be an empty alternative.`;
  },
  buildTooManyAlternativesError(t) {
    return `An Alternation cannot have more than 256 alternatives:
<OR${t.alternation.idx}> inside <${t.topLevelRule.name}> Rule.
 has ${t.alternation.definition.length + 1} alternatives.`;
  },
  buildLeftRecursionError(t) {
    const e = t.topLevelRule.name, n = v(t.leftRecursionPath, (i) => i.name), r = `${e} --> ${n.concat([e]).join(" --> ")}`;
    return `Left Recursion found in grammar.
rule: <${e}> can be invoked from itself (directly or indirectly)
without consuming any Tokens. The grammar path that causes this is: 
 ${r}
 To fix this refactor your grammar to remove the left recursion.
see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;
  },
  // TODO: remove - `errors_public` from nyc.config.js exclude
  //       once this method is fully removed from this file
  buildInvalidRuleNameError(t) {
    return "deprecated";
  },
  buildDuplicateRuleNameError(t) {
    let e;
    return t.topLevelRule instanceof ht ? e = t.topLevelRule.name : e = t.topLevelRule, `Duplicate definition, rule: ->${e}<- is already defined in the grammar: ->${t.grammarName}<-`;
  }
};
function Jf(t, e) {
  const n = new ed(t, e);
  return n.resolveRefs(), n.errors;
}
class ed extends ft {
  constructor(e, n) {
    super(), this.nameToTopRule = e, this.errMsgProvider = n, this.errors = [];
  }
  resolveRefs() {
    I(V(this.nameToTopRule), (e) => {
      this.currTopLevel = e, e.accept(this);
    });
  }
  visitNonTerminal(e) {
    const n = this.nameToTopRule[e.nonTerminalName];
    if (n)
      e.referencedRule = n;
    else {
      const r = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, e);
      this.errors.push({
        message: r,
        type: X.UNRESOLVED_SUBRULE_REF,
        ruleName: this.currTopLevel.name,
        unresolvedRefName: e.nonTerminalName
      });
    }
  }
}
class td extends Tn {
  constructor(e, n) {
    super(), this.topProd = e, this.path = n, this.possibleTokTypes = [], this.nextProductionName = "", this.nextProductionOccurrence = 0, this.found = !1, this.isAtEndOfPath = !1;
  }
  startWalking() {
    if (this.found = !1, this.path.ruleStack[0] !== this.topProd.name)
      throw Error("The path does not start with the walker's top Rule!");
    return this.ruleStack = W(this.path.ruleStack).reverse(), this.occurrenceStack = W(this.path.occurrenceStack).reverse(), this.ruleStack.pop(), this.occurrenceStack.pop(), this.updateExpectedNext(), this.walk(this.topProd), this.possibleTokTypes;
  }
  walk(e, n = []) {
    this.found || super.walk(e, n);
  }
  walkProdRef(e, n, r) {
    if (e.referencedRule.name === this.nextProductionName && e.idx === this.nextProductionOccurrence) {
      const i = n.concat(r);
      this.updateExpectedNext(), this.walk(e.referencedRule, i);
    }
  }
  updateExpectedNext() {
    w(this.ruleStack) ? (this.nextProductionName = "", this.nextProductionOccurrence = 0, this.isAtEndOfPath = !0) : (this.nextProductionName = this.ruleStack.pop(), this.nextProductionOccurrence = this.occurrenceStack.pop());
  }
}
class nd extends td {
  constructor(e, n) {
    super(e, n), this.path = n, this.nextTerminalName = "", this.nextTerminalOccurrence = 0, this.nextTerminalName = this.path.lastTok.name, this.nextTerminalOccurrence = this.path.lastTokOccurrence;
  }
  walkTerminal(e, n, r) {
    if (this.isAtEndOfPath && e.terminalType.name === this.nextTerminalName && e.idx === this.nextTerminalOccurrence && !this.found) {
      const i = n.concat(r), s = new ee({ definition: i });
      this.possibleTokTypes = Ct(s), this.found = !0;
    }
  }
}
class An extends Tn {
  constructor(e, n) {
    super(), this.topRule = e, this.occurrence = n, this.result = {
      token: void 0,
      occurrence: void 0,
      isEndOfRule: void 0
    };
  }
  startWalking() {
    return this.walk(this.topRule), this.result;
  }
}
class rd extends An {
  walkMany(e, n, r) {
    if (e.idx === this.occurrence) {
      const i = me(n.concat(r));
      this.result.isEndOfRule = i === void 0, i instanceof F && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkMany(e, n, r);
  }
}
class Si extends An {
  walkManySep(e, n, r) {
    if (e.idx === this.occurrence) {
      const i = me(n.concat(r));
      this.result.isEndOfRule = i === void 0, i instanceof F && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkManySep(e, n, r);
  }
}
class id extends An {
  walkAtLeastOne(e, n, r) {
    if (e.idx === this.occurrence) {
      const i = me(n.concat(r));
      this.result.isEndOfRule = i === void 0, i instanceof F && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkAtLeastOne(e, n, r);
  }
}
class Ni extends An {
  walkAtLeastOneSep(e, n, r) {
    if (e.idx === this.occurrence) {
      const i = me(n.concat(r));
      this.result.isEndOfRule = i === void 0, i instanceof F && (this.result.token = i.terminalType, this.result.occurrence = i.idx);
    } else
      super.walkAtLeastOneSep(e, n, r);
  }
}
function Kn(t, e, n = []) {
  n = W(n);
  let r = [], i = 0;
  function s(a) {
    return a.concat(H(t, i + 1));
  }
  function o(a) {
    const c = Kn(s(a), e, n);
    return r.concat(c);
  }
  for (; n.length < e && i < t.length; ) {
    const a = t[i];
    if (a instanceof ee || a instanceof re)
      return o(a.definition);
    if (a instanceof Z)
      r = o(a.definition);
    else if (a instanceof Le) {
      const c = a.definition.concat([
        new K({
          definition: a.definition
        })
      ]);
      return o(c);
    } else if (a instanceof ke) {
      const c = [
        new ee({ definition: a.definition }),
        new K({
          definition: [new F({ terminalType: a.separator })].concat(a.definition)
        })
      ];
      return o(c);
    } else if (a instanceof Ee) {
      const c = a.definition.concat([
        new K({
          definition: [new F({ terminalType: a.separator })].concat(a.definition)
        })
      ]);
      r = o(c);
    } else if (a instanceof K) {
      const c = a.definition.concat([
        new K({
          definition: a.definition
        })
      ]);
      r = o(c);
    } else {
      if (a instanceof Te)
        return I(a.definition, (c) => {
          w(c.definition) === !1 && (r = o(c.definition));
        }), r;
      if (a instanceof F)
        n.push(a.terminalType);
      else
        throw Error("non exhaustive match");
    }
    i++;
  }
  return r.push({
    partialPath: n,
    suffixDef: H(t, i)
  }), r;
}
function Ss(t, e, n, r) {
  const i = "EXIT_NONE_TERMINAL", s = [i], o = "EXIT_ALTERNATIVE";
  let a = !1;
  const c = e.length, u = c - r - 1, l = [], h = [];
  for (h.push({
    idx: -1,
    def: t,
    ruleStack: [],
    occurrenceStack: []
  }); !w(h); ) {
    const f = h.pop();
    if (f === o) {
      a && ut(h).idx <= u && h.pop();
      continue;
    }
    const T = f.def, p = f.idx, _ = f.ruleStack, O = f.occurrenceStack;
    if (w(T))
      continue;
    const A = T[0];
    if (A === i) {
      const y = {
        idx: p,
        def: H(T),
        ruleStack: It(_),
        occurrenceStack: It(O)
      };
      h.push(y);
    } else if (A instanceof F)
      if (p < c - 1) {
        const y = p + 1, d = e[y];
        if (n(d, A.terminalType)) {
          const m = {
            idx: y,
            def: H(T),
            ruleStack: _,
            occurrenceStack: O
          };
          h.push(m);
        }
      } else if (p === c - 1)
        l.push({
          nextTokenType: A.terminalType,
          nextTokenOccurrence: A.idx,
          ruleStack: _,
          occurrenceStack: O
        }), a = !0;
      else
        throw Error("non exhaustive match");
    else if (A instanceof re) {
      const y = W(_);
      y.push(A.nonTerminalName);
      const d = W(O);
      d.push(A.idx);
      const m = {
        idx: p,
        def: A.definition.concat(s, H(T)),
        ruleStack: y,
        occurrenceStack: d
      };
      h.push(m);
    } else if (A instanceof Z) {
      const y = {
        idx: p,
        def: H(T),
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(y), h.push(o);
      const d = {
        idx: p,
        def: A.definition.concat(H(T)),
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(d);
    } else if (A instanceof Le) {
      const y = new K({
        definition: A.definition,
        idx: A.idx
      }), d = A.definition.concat([y], H(T)), m = {
        idx: p,
        def: d,
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(m);
    } else if (A instanceof ke) {
      const y = new F({
        terminalType: A.separator
      }), d = new K({
        definition: [y].concat(A.definition),
        idx: A.idx
      }), m = A.definition.concat([d], H(T)), N = {
        idx: p,
        def: m,
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(N);
    } else if (A instanceof Ee) {
      const y = {
        idx: p,
        def: H(T),
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(y), h.push(o);
      const d = new F({
        terminalType: A.separator
      }), m = new K({
        definition: [d].concat(A.definition),
        idx: A.idx
      }), N = A.definition.concat([m], H(T)), z = {
        idx: p,
        def: N,
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(z);
    } else if (A instanceof K) {
      const y = {
        idx: p,
        def: H(T),
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(y), h.push(o);
      const d = new K({
        definition: A.definition,
        idx: A.idx
      }), m = A.definition.concat([d], H(T)), N = {
        idx: p,
        def: m,
        ruleStack: _,
        occurrenceStack: O
      };
      h.push(N);
    } else if (A instanceof Te)
      for (let y = A.definition.length - 1; y >= 0; y--) {
        const d = A.definition[y], m = {
          idx: p,
          def: d.definition.concat(H(T)),
          ruleStack: _,
          occurrenceStack: O
        };
        h.push(m), h.push(o);
      }
    else if (A instanceof ee)
      h.push({
        idx: p,
        def: A.definition.concat(H(T)),
        ruleStack: _,
        occurrenceStack: O
      });
    else if (A instanceof ht)
      h.push(sd(A, p, _, O));
    else
      throw Error("non exhaustive match");
  }
  return l;
}
function sd(t, e, n, r) {
  const i = W(n);
  i.push(t.name);
  const s = W(r);
  return s.push(1), {
    idx: e,
    def: t.definition,
    ruleStack: i,
    occurrenceStack: s
  };
}
var $;
(function(t) {
  t[t.OPTION = 0] = "OPTION", t[t.REPETITION = 1] = "REPETITION", t[t.REPETITION_MANDATORY = 2] = "REPETITION_MANDATORY", t[t.REPETITION_MANDATORY_WITH_SEPARATOR = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR", t[t.REPETITION_WITH_SEPARATOR = 4] = "REPETITION_WITH_SEPARATOR", t[t.ALTERNATION = 5] = "ALTERNATION";
})($ || ($ = {}));
function Ns(t) {
  if (t instanceof Z || t === "Option")
    return $.OPTION;
  if (t instanceof K || t === "Repetition")
    return $.REPETITION;
  if (t instanceof Le || t === "RepetitionMandatory")
    return $.REPETITION_MANDATORY;
  if (t instanceof ke || t === "RepetitionMandatoryWithSeparator")
    return $.REPETITION_MANDATORY_WITH_SEPARATOR;
  if (t instanceof Ee || t === "RepetitionWithSeparator")
    return $.REPETITION_WITH_SEPARATOR;
  if (t instanceof Te || t === "Alternation")
    return $.ALTERNATION;
  throw Error("non exhaustive match");
}
function od(t, e, n, r, i, s) {
  const o = Or(t, e, n), a = Cs(o) ? en : bt;
  return s(o, r, a, i);
}
function ad(t, e, n, r, i, s) {
  const o = Ir(t, e, i, n), a = Cs(o) ? en : bt;
  return s(o[0], a, r);
}
function cd(t, e, n, r) {
  const i = t.length, s = de(t, (o) => de(o, (a) => a.length === 1));
  if (e)
    return function(o) {
      const a = v(o, (c) => c.GATE);
      for (let c = 0; c < i; c++) {
        const u = t[c], l = u.length, h = a[c];
        if (!(h !== void 0 && h.call(this) === !1))
          e: for (let f = 0; f < l; f++) {
            const T = u[f], p = T.length;
            for (let _ = 0; _ < p; _++) {
              const O = this.LA(_ + 1);
              if (n(O, T[_]) === !1)
                continue e;
            }
            return c;
          }
      }
    };
  if (s && !r) {
    const o = v(t, (c) => fe(c)), a = ne(o, (c, u, l) => (I(u, (h) => {
      R(c, h.tokenTypeIdx) || (c[h.tokenTypeIdx] = l), I(h.categoryMatches, (f) => {
        R(c, f) || (c[f] = l);
      });
    }), c), {});
    return function() {
      const c = this.LA(1);
      return a[c.tokenTypeIdx];
    };
  } else
    return function() {
      for (let o = 0; o < i; o++) {
        const a = t[o], c = a.length;
        e: for (let u = 0; u < c; u++) {
          const l = a[u], h = l.length;
          for (let f = 0; f < h; f++) {
            const T = this.LA(f + 1);
            if (n(T, l[f]) === !1)
              continue e;
          }
          return o;
        }
      }
    };
}
function ud(t, e, n) {
  const r = de(t, (s) => s.length === 1), i = t.length;
  if (r && !n) {
    const s = fe(t);
    if (s.length === 1 && w(s[0].categoryMatches)) {
      const o = s[0].tokenTypeIdx;
      return function() {
        return this.LA(1).tokenTypeIdx === o;
      };
    } else {
      const o = ne(s, (a, c, u) => (a[c.tokenTypeIdx] = !0, I(c.categoryMatches, (l) => {
        a[l] = !0;
      }), a), []);
      return function() {
        const a = this.LA(1);
        return o[a.tokenTypeIdx] === !0;
      };
    }
  } else
    return function() {
      e: for (let s = 0; s < i; s++) {
        const o = t[s], a = o.length;
        for (let c = 0; c < a; c++) {
          const u = this.LA(c + 1);
          if (e(u, o[c]) === !1)
            continue e;
        }
        return !0;
      }
      return !1;
    };
}
class ld extends Tn {
  constructor(e, n, r) {
    super(), this.topProd = e, this.targetOccurrence = n, this.targetProdType = r;
  }
  startWalking() {
    return this.walk(this.topProd), this.restDef;
  }
  checkIsTarget(e, n, r, i) {
    return e.idx === this.targetOccurrence && this.targetProdType === n ? (this.restDef = r.concat(i), !0) : !1;
  }
  walkOption(e, n, r) {
    this.checkIsTarget(e, $.OPTION, n, r) || super.walkOption(e, n, r);
  }
  walkAtLeastOne(e, n, r) {
    this.checkIsTarget(e, $.REPETITION_MANDATORY, n, r) || super.walkOption(e, n, r);
  }
  walkAtLeastOneSep(e, n, r) {
    this.checkIsTarget(e, $.REPETITION_MANDATORY_WITH_SEPARATOR, n, r) || super.walkOption(e, n, r);
  }
  walkMany(e, n, r) {
    this.checkIsTarget(e, $.REPETITION, n, r) || super.walkOption(e, n, r);
  }
  walkManySep(e, n, r) {
    this.checkIsTarget(e, $.REPETITION_WITH_SEPARATOR, n, r) || super.walkOption(e, n, r);
  }
}
class Ls extends ft {
  constructor(e, n, r) {
    super(), this.targetOccurrence = e, this.targetProdType = n, this.targetRef = r, this.result = [];
  }
  checkIsTarget(e, n) {
    e.idx === this.targetOccurrence && this.targetProdType === n && (this.targetRef === void 0 || e === this.targetRef) && (this.result = e.definition);
  }
  visitOption(e) {
    this.checkIsTarget(e, $.OPTION);
  }
  visitRepetition(e) {
    this.checkIsTarget(e, $.REPETITION);
  }
  visitRepetitionMandatory(e) {
    this.checkIsTarget(e, $.REPETITION_MANDATORY);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.checkIsTarget(e, $.REPETITION_MANDATORY_WITH_SEPARATOR);
  }
  visitRepetitionWithSeparator(e) {
    this.checkIsTarget(e, $.REPETITION_WITH_SEPARATOR);
  }
  visitAlternation(e) {
    this.checkIsTarget(e, $.ALTERNATION);
  }
}
function Li(t) {
  const e = new Array(t);
  for (let n = 0; n < t; n++)
    e[n] = [];
  return e;
}
function Cn(t) {
  let e = [""];
  for (let n = 0; n < t.length; n++) {
    const r = t[n], i = [];
    for (let s = 0; s < e.length; s++) {
      const o = e[s];
      i.push(o + "_" + r.tokenTypeIdx);
      for (let a = 0; a < r.categoryMatches.length; a++) {
        const c = "_" + r.categoryMatches[a];
        i.push(o + c);
      }
    }
    e = i;
  }
  return e;
}
function hd(t, e, n) {
  for (let r = 0; r < t.length; r++) {
    if (r === n)
      continue;
    const i = t[r];
    for (let s = 0; s < e.length; s++) {
      const o = e[s];
      if (i[o] === !0)
        return !1;
    }
  }
  return !0;
}
function ks(t, e) {
  const n = v(t, (o) => Kn([o], 1)), r = Li(n.length), i = v(n, (o) => {
    const a = {};
    return I(o, (c) => {
      const u = Cn(c.partialPath);
      I(u, (l) => {
        a[l] = !0;
      });
    }), a;
  });
  let s = n;
  for (let o = 1; o <= e; o++) {
    const a = s;
    s = Li(a.length);
    for (let c = 0; c < a.length; c++) {
      const u = a[c];
      for (let l = 0; l < u.length; l++) {
        const h = u[l].partialPath, f = u[l].suffixDef, T = Cn(h);
        if (hd(i, T, c) || w(f) || h.length === e) {
          const p = r[c];
          if (Hn(p, h) === !1) {
            p.push(h);
            for (let _ = 0; _ < T.length; _++) {
              const O = T[_];
              i[c][O] = !0;
            }
          }
        } else {
          const p = Kn(f, o + 1, h);
          s[c] = s[c].concat(p), I(p, (_) => {
            const O = Cn(_.partialPath);
            I(O, (A) => {
              i[c][A] = !0;
            });
          });
        }
      }
    }
  }
  return r;
}
function Or(t, e, n, r) {
  const i = new Ls(t, $.ALTERNATION, r);
  return e.accept(i), ks(i.result, n);
}
function Ir(t, e, n, r) {
  const i = new Ls(t, n);
  e.accept(i);
  const s = i.result, o = new ld(e, t, n).startWalking(), a = new ee({ definition: s }), c = new ee({ definition: o });
  return ks([a, c], r);
}
function Hn(t, e) {
  e: for (let n = 0; n < t.length; n++) {
    const r = t[n];
    if (r.length === e.length) {
      for (let i = 0; i < r.length; i++) {
        const s = e[i], o = r[i];
        if (!(s === o || o.categoryMatchesMap[s.tokenTypeIdx] !== void 0))
          continue e;
      }
      return !0;
    }
  }
  return !1;
}
function fd(t, e) {
  return t.length < e.length && de(t, (n, r) => {
    const i = e[r];
    return n === i || i.categoryMatchesMap[n.tokenTypeIdx];
  });
}
function Cs(t) {
  return de(t, (e) => de(e, (n) => de(n, (r) => w(r.categoryMatches))));
}
function dd(t) {
  const e = t.lookaheadStrategy.validate({
    rules: t.rules,
    tokenTypes: t.tokenTypes,
    grammarName: t.grammarName
  });
  return v(e, (n) => Object.assign({ type: X.CUSTOM_LOOKAHEAD_VALIDATION }, n));
}
function pd(t, e, n, r) {
  const i = ae(t, (c) => md(c, n)), s = Nd(t, e, n), o = ae(t, (c) => Rd(c, n)), a = ae(t, (c) => Td(c, t, r, n));
  return i.concat(s, o, a);
}
function md(t, e) {
  const n = new Ed();
  t.accept(n);
  const r = n.allProductions, i = Nh(r, gd), s = ge(i, (o) => o.length > 1);
  return v(V(s), (o) => {
    const a = me(o), c = e.buildDuplicateFoundError(t, o), u = ve(a), l = {
      message: c,
      type: X.DUPLICATE_PRODUCTIONS,
      ruleName: t.name,
      dslName: u,
      occurrence: a.idx
    }, h = bs(a);
    return h && (l.parameter = h), l;
  });
}
function gd(t) {
  return `${ve(t)}_#_${t.idx}_#_${bs(t)}`;
}
function bs(t) {
  return t instanceof F ? t.terminalType.name : t instanceof re ? t.nonTerminalName : "";
}
class Ed extends ft {
  constructor() {
    super(...arguments), this.allProductions = [];
  }
  visitNonTerminal(e) {
    this.allProductions.push(e);
  }
  visitOption(e) {
    this.allProductions.push(e);
  }
  visitRepetitionWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatory(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetition(e) {
    this.allProductions.push(e);
  }
  visitAlternation(e) {
    this.allProductions.push(e);
  }
  visitTerminal(e) {
    this.allProductions.push(e);
  }
}
function Td(t, e, n, r) {
  const i = [];
  if (ne(e, (s, o) => o.name === t.name ? s + 1 : s, 0) > 1) {
    const s = r.buildDuplicateRuleNameError({
      topLevelRule: t,
      grammarName: n
    });
    i.push({
      message: s,
      type: X.DUPLICATE_RULE_NAME,
      ruleName: t.name
    });
  }
  return i;
}
function yd(t, e, n) {
  const r = [];
  let i;
  return q(e, t) || (i = `Invalid rule override, rule: ->${t}<- cannot be overridden in the grammar: ->${n}<-as it is not defined in any of the super grammars `, r.push({
    message: i,
    type: X.INVALID_RULE_OVERRIDE,
    ruleName: t
  })), r;
}
function xs(t, e, n, r = []) {
  const i = [], s = Ht(e.definition);
  if (w(s))
    return [];
  {
    const o = t.name;
    q(s, t) && i.push({
      message: n.buildLeftRecursionError({
        topLevelRule: t,
        leftRecursionPath: r
      }),
      type: X.LEFT_RECURSION,
      ruleName: o
    });
    const a = gn(s, r.concat([t])), c = ae(a, (u) => {
      const l = W(r);
      return l.push(u), xs(t, u, n, l);
    });
    return i.concat(c);
  }
}
function Ht(t) {
  let e = [];
  if (w(t))
    return e;
  const n = me(t);
  if (n instanceof re)
    e.push(n.referencedRule);
  else if (n instanceof ee || n instanceof Z || n instanceof Le || n instanceof ke || n instanceof Ee || n instanceof K)
    e = e.concat(Ht(n.definition));
  else if (n instanceof Te)
    e = fe(v(n.definition, (s) => Ht(s.definition)));
  else if (!(n instanceof F)) throw Error("non exhaustive match");
  const r = qt(n), i = t.length > 1;
  if (r && i) {
    const s = H(t);
    return e.concat(Ht(s));
  } else
    return e;
}
class Sr extends ft {
  constructor() {
    super(...arguments), this.alternations = [];
  }
  visitAlternation(e) {
    this.alternations.push(e);
  }
}
function Ad(t, e) {
  const n = new Sr();
  t.accept(n);
  const r = n.alternations;
  return ae(r, (i) => {
    const s = It(i.definition);
    return ae(s, (o, a) => {
      const c = Ss([o], [], bt, 1);
      return w(c) ? [
        {
          message: e.buildEmptyAlternationError({
            topLevelRule: t,
            alternation: i,
            emptyChoiceIdx: a
          }),
          type: X.NONE_LAST_EMPTY_ALT,
          ruleName: t.name,
          occurrence: i.idx,
          alternative: a + 1
        }
      ] : [];
    });
  });
}
function _d(t, e, n) {
  const r = new Sr();
  t.accept(r);
  let i = r.alternations;
  return i = En(i, (s) => s.ignoreAmbiguities === !0), ae(i, (s) => {
    const o = s.idx, a = s.maxLookahead || e, c = Or(o, t, a, s), u = Id(c, s, t, n), l = Sd(c, s, t, n);
    return u.concat(l);
  });
}
class vd extends ft {
  constructor() {
    super(...arguments), this.allProductions = [];
  }
  visitRepetitionWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatory(e) {
    this.allProductions.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.allProductions.push(e);
  }
  visitRepetition(e) {
    this.allProductions.push(e);
  }
}
function Rd(t, e) {
  const n = new Sr();
  t.accept(n);
  const r = n.alternations;
  return ae(r, (i) => i.definition.length > 255 ? [
    {
      message: e.buildTooManyAlternativesError({
        topLevelRule: t,
        alternation: i
      }),
      type: X.TOO_MANY_ALTS,
      ruleName: t.name,
      occurrence: i.idx
    }
  ] : []);
}
function Od(t, e, n) {
  const r = [];
  return I(t, (i) => {
    const s = new vd();
    i.accept(s);
    const o = s.allProductions;
    I(o, (a) => {
      const c = Ns(a), u = a.maxLookahead || e, l = a.idx, h = Ir(l, i, c, u)[0];
      if (w(fe(h))) {
        const f = n.buildEmptyRepetitionError({
          topLevelRule: i,
          repetition: a
        });
        r.push({
          message: f,
          type: X.NO_NON_EMPTY_LOOKAHEAD,
          ruleName: i.name
        });
      }
    });
  }), r;
}
function Id(t, e, n, r) {
  const i = [], s = ne(t, (o, a, c) => (e.definition[c].ignoreAmbiguities === !0 || I(a, (u) => {
    const l = [c];
    I(t, (h, f) => {
      c !== f && Hn(h, u) && // ignore (skip) ambiguities with this "other" alternative
      e.definition[f].ignoreAmbiguities !== !0 && l.push(f);
    }), l.length > 1 && !Hn(i, u) && (i.push(u), o.push({
      alts: l,
      path: u
    }));
  }), o), []);
  return v(s, (o) => {
    const a = v(o.alts, (c) => c + 1);
    return {
      message: r.buildAlternationAmbiguityError({
        topLevelRule: n,
        alternation: e,
        ambiguityIndices: a,
        prefixPath: o.path
      }),
      type: X.AMBIGUOUS_ALTS,
      ruleName: n.name,
      occurrence: e.idx,
      alternatives: o.alts
    };
  });
}
function Sd(t, e, n, r) {
  const i = ne(t, (s, o, a) => {
    const c = v(o, (u) => ({ idx: a, path: u }));
    return s.concat(c);
  }, []);
  return kt(ae(i, (s) => {
    if (e.definition[s.idx].ignoreAmbiguities === !0)
      return [];
    const o = s.idx, a = s.path, c = he(i, (u) => (
      // ignore (skip) ambiguities with this "other" alternative
      e.definition[u.idx].ignoreAmbiguities !== !0 && u.idx < o && // checking for strict prefix because identical lookaheads
      // will be be detected using a different validation.
      fd(u.path, a)
    ));
    return v(c, (u) => {
      const l = [u.idx + 1, o + 1], h = e.idx === 0 ? "" : e.idx;
      return {
        message: r.buildAlternationPrefixAmbiguityError({
          topLevelRule: n,
          alternation: e,
          ambiguityIndices: l,
          prefixPath: u.path
        }),
        type: X.AMBIGUOUS_PREFIX_ALTS,
        ruleName: n.name,
        occurrence: h,
        alternatives: l
      };
    });
  }));
}
function Nd(t, e, n) {
  const r = [], i = v(e, (s) => s.name);
  return I(t, (s) => {
    const o = s.name;
    if (q(i, o)) {
      const a = n.buildNamespaceConflictError(s);
      r.push({
        message: a,
        type: X.CONFLICT_TOKENS_RULES_NAMESPACE,
        ruleName: o
      });
    }
  }), r;
}
function Ld(t) {
  const e = yr(t, {
    errMsgProvider: Zf
  }), n = {};
  return I(t.rules, (r) => {
    n[r.name] = r;
  }), Jf(n, e.errMsgProvider);
}
function kd(t) {
  return t = yr(t, {
    errMsgProvider: Xe
  }), pd(t.rules, t.tokenTypes, t.errMsgProvider, t.grammarName);
}
const Ms = "MismatchedTokenException", Ps = "NoViableAltException", ws = "EarlyExitException", Us = "NotAllInputParsedException", Ds = [
  Ms,
  Ps,
  ws,
  Us
];
Object.freeze(Ds);
function tn(t) {
  return q(Ds, t.name);
}
class _n extends Error {
  constructor(e, n) {
    super(e), this.token = n, this.resyncedTokens = [], Object.setPrototypeOf(this, new.target.prototype), Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
  }
}
class Fs extends _n {
  constructor(e, n, r) {
    super(e, n), this.previousToken = r, this.name = Ms;
  }
}
class Cd extends _n {
  constructor(e, n, r) {
    super(e, n), this.previousToken = r, this.name = Ps;
  }
}
class bd extends _n {
  constructor(e, n) {
    super(e, n), this.name = Us;
  }
}
class xd extends _n {
  constructor(e, n, r) {
    super(e, n), this.previousToken = r, this.name = ws;
  }
}
const bn = {}, $s = "InRuleRecoveryException";
class Md extends Error {
  constructor(e) {
    super(e), this.name = $s;
  }
}
class Pd {
  initRecoverable(e) {
    this.firstAfterRepMap = {}, this.resyncFollows = {}, this.recoveryEnabled = R(e, "recoveryEnabled") ? e.recoveryEnabled : we.recoveryEnabled, this.recoveryEnabled && (this.attemptInRepetitionRecovery = wd);
  }
  getTokenToInsert(e) {
    const n = Rr(e, "", NaN, NaN, NaN, NaN, NaN, NaN);
    return n.isInsertedInRecovery = !0, n;
  }
  canTokenTypeBeInsertedInRecovery(e) {
    return !0;
  }
  canTokenTypeBeDeletedInRecovery(e) {
    return !0;
  }
  tryInRepetitionRecovery(e, n, r, i) {
    const s = this.findReSyncTokenType(), o = this.exportLexerState(), a = [];
    let c = !1;
    const u = this.LA(1);
    let l = this.LA(1);
    const h = () => {
      const f = this.LA(0), T = this.errorMessageProvider.buildMismatchTokenMessage({
        expected: i,
        actual: u,
        previous: f,
        ruleName: this.getCurrRuleFullName()
      }), p = new Fs(T, u, this.LA(0));
      p.resyncedTokens = It(a), this.SAVE_ERROR(p);
    };
    for (; !c; )
      if (this.tokenMatcher(l, i)) {
        h();
        return;
      } else if (r.call(this)) {
        h(), e.apply(this, n);
        return;
      } else this.tokenMatcher(l, s) ? c = !0 : (l = this.SKIP_TOKEN(), this.addToResyncTokens(l, a));
    this.importLexerState(o);
  }
  shouldInRepetitionRecoveryBeTried(e, n, r) {
    return !(r === !1 || this.tokenMatcher(this.LA(1), e) || this.isBackTracking() || this.canPerformInRuleRecovery(e, this.getFollowsForInRuleRecovery(e, n)));
  }
  // Error Recovery functionality
  getFollowsForInRuleRecovery(e, n) {
    const r = this.getCurrentGrammarPath(e, n);
    return this.getNextPossibleTokenTypes(r);
  }
  tryInRuleRecovery(e, n) {
    if (this.canRecoverWithSingleTokenInsertion(e, n))
      return this.getTokenToInsert(e);
    if (this.canRecoverWithSingleTokenDeletion(e)) {
      const r = this.SKIP_TOKEN();
      return this.consumeToken(), r;
    }
    throw new Md("sad sad panda");
  }
  canPerformInRuleRecovery(e, n) {
    return this.canRecoverWithSingleTokenInsertion(e, n) || this.canRecoverWithSingleTokenDeletion(e);
  }
  canRecoverWithSingleTokenInsertion(e, n) {
    if (!this.canTokenTypeBeInsertedInRecovery(e) || w(n))
      return !1;
    const r = this.LA(1);
    return lt(n, (i) => this.tokenMatcher(r, i)) !== void 0;
  }
  canRecoverWithSingleTokenDeletion(e) {
    return this.canTokenTypeBeDeletedInRecovery(e) ? this.tokenMatcher(this.LA(2), e) : !1;
  }
  isInCurrentRuleReSyncSet(e) {
    const n = this.getCurrFollowKey(), r = this.getFollowSetFromFollowKey(n);
    return q(r, e);
  }
  findReSyncTokenType() {
    const e = this.flattenFollowSet();
    let n = this.LA(1), r = 2;
    for (; ; ) {
      const i = lt(e, (s) => Qf(n, s));
      if (i !== void 0)
        return i;
      n = this.LA(r), r++;
    }
  }
  getCurrFollowKey() {
    if (this.RULE_STACK.length === 1)
      return bn;
    const e = this.getLastExplicitRuleShortName(), n = this.getLastExplicitRuleOccurrenceIndex(), r = this.getPreviousExplicitRuleShortName();
    return {
      ruleName: this.shortRuleNameToFullName(e),
      idxInCallingRule: n,
      inRule: this.shortRuleNameToFullName(r)
    };
  }
  buildFullFollowKeyStack() {
    const e = this.RULE_STACK, n = this.RULE_OCCURRENCE_STACK;
    return v(e, (r, i) => i === 0 ? bn : {
      ruleName: this.shortRuleNameToFullName(r),
      idxInCallingRule: n[i],
      inRule: this.shortRuleNameToFullName(e[i - 1])
    });
  }
  flattenFollowSet() {
    const e = v(this.buildFullFollowKeyStack(), (n) => this.getFollowSetFromFollowKey(n));
    return fe(e);
  }
  getFollowSetFromFollowKey(e) {
    if (e === bn)
      return [Ze];
    const n = e.ruleName + e.idxInCallingRule + ms + e.inRule;
    return this.resyncFollows[n];
  }
  // It does not make any sense to include a virtual EOF token in the list of resynced tokens
  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)
  addToResyncTokens(e, n) {
    return this.tokenMatcher(e, Ze) || n.push(e), n;
  }
  reSyncTo(e) {
    const n = [];
    let r = this.LA(1);
    for (; this.tokenMatcher(r, e) === !1; )
      r = this.SKIP_TOKEN(), this.addToResyncTokens(r, n);
    return It(n);
  }
  attemptInRepetitionRecovery(e, n, r, i, s, o, a) {
  }
  getCurrentGrammarPath(e, n) {
    const r = this.getHumanReadableRuleStack(), i = W(this.RULE_OCCURRENCE_STACK);
    return {
      ruleStack: r,
      occurrenceStack: i,
      lastTok: e,
      lastTokOccurrence: n
    };
  }
  getHumanReadableRuleStack() {
    return v(this.RULE_STACK, (e) => this.shortRuleNameToFullName(e));
  }
}
function wd(t, e, n, r, i, s, o) {
  const a = this.getKeyForAutomaticLookahead(r, i);
  let c = this.firstAfterRepMap[a];
  if (c === void 0) {
    const f = this.getCurrRuleFullName(), T = this.getGAstProductions()[f];
    c = new s(T, i).startWalking(), this.firstAfterRepMap[a] = c;
  }
  let u = c.token, l = c.occurrence;
  const h = c.isEndOfRule;
  this.RULE_STACK.length === 1 && h && u === void 0 && (u = Ze, l = 1), !(u === void 0 || l === void 0) && this.shouldInRepetitionRecoveryBeTried(u, l, o) && this.tryInRepetitionRecovery(t, e, n, u);
}
const Ud = 4, Ve = 8, js = 1 << Ve, Gs = 2 << Ve, Wn = 3 << Ve, zn = 4 << Ve, Yn = 5 << Ve, Wt = 6 << Ve;
function xn(t, e, n) {
  return n | e | t;
}
class Dd {
  constructor(e) {
    var n;
    this.maxLookahead = (n = e?.maxLookahead) !== null && n !== void 0 ? n : we.maxLookahead;
  }
  validate(e) {
    const n = this.validateNoLeftRecursion(e.rules);
    if (w(n)) {
      const r = this.validateEmptyOrAlternatives(e.rules), i = this.validateAmbiguousAlternationAlternatives(e.rules, this.maxLookahead), s = this.validateSomeNonEmptyLookaheadPath(e.rules, this.maxLookahead);
      return [
        ...n,
        ...r,
        ...i,
        ...s
      ];
    }
    return n;
  }
  validateNoLeftRecursion(e) {
    return ae(e, (n) => xs(n, n, Xe));
  }
  validateEmptyOrAlternatives(e) {
    return ae(e, (n) => Ad(n, Xe));
  }
  validateAmbiguousAlternationAlternatives(e, n) {
    return ae(e, (r) => _d(r, n, Xe));
  }
  validateSomeNonEmptyLookaheadPath(e, n) {
    return Od(e, n, Xe);
  }
  buildLookaheadForAlternation(e) {
    return od(e.prodOccurrence, e.rule, e.maxLookahead, e.hasPredicates, e.dynamicTokensEnabled, cd);
  }
  buildLookaheadForOptional(e) {
    return ad(e.prodOccurrence, e.rule, e.maxLookahead, e.dynamicTokensEnabled, Ns(e.prodType), ud);
  }
}
class Fd {
  initLooksAhead(e) {
    this.dynamicTokensEnabled = R(e, "dynamicTokensEnabled") ? e.dynamicTokensEnabled : we.dynamicTokensEnabled, this.maxLookahead = R(e, "maxLookahead") ? e.maxLookahead : we.maxLookahead, this.lookaheadStrategy = R(e, "lookaheadStrategy") ? e.lookaheadStrategy : new Dd({ maxLookahead: this.maxLookahead }), this.lookAheadFuncsCache = /* @__PURE__ */ new Map();
  }
  preComputeLookaheadFunctions(e) {
    I(e, (n) => {
      this.TRACE_INIT(`${n.name} Rule Lookahead`, () => {
        const { alternation: r, repetition: i, option: s, repetitionMandatory: o, repetitionMandatoryWithSeparator: a, repetitionWithSeparator: c } = jd(n);
        I(r, (u) => {
          const l = u.idx === 0 ? "" : u.idx;
          this.TRACE_INIT(`${ve(u)}${l}`, () => {
            const h = this.lookaheadStrategy.buildLookaheadForAlternation({
              prodOccurrence: u.idx,
              rule: n,
              maxLookahead: u.maxLookahead || this.maxLookahead,
              hasPredicates: u.hasPredicates,
              dynamicTokensEnabled: this.dynamicTokensEnabled
            }), f = xn(this.fullRuleNameToShort[n.name], js, u.idx);
            this.setLaFuncCache(f, h);
          });
        }), I(i, (u) => {
          this.computeLookaheadFunc(n, u.idx, Wn, "Repetition", u.maxLookahead, ve(u));
        }), I(s, (u) => {
          this.computeLookaheadFunc(n, u.idx, Gs, "Option", u.maxLookahead, ve(u));
        }), I(o, (u) => {
          this.computeLookaheadFunc(n, u.idx, zn, "RepetitionMandatory", u.maxLookahead, ve(u));
        }), I(a, (u) => {
          this.computeLookaheadFunc(n, u.idx, Wt, "RepetitionMandatoryWithSeparator", u.maxLookahead, ve(u));
        }), I(c, (u) => {
          this.computeLookaheadFunc(n, u.idx, Yn, "RepetitionWithSeparator", u.maxLookahead, ve(u));
        });
      });
    });
  }
  computeLookaheadFunc(e, n, r, i, s, o) {
    this.TRACE_INIT(`${o}${n === 0 ? "" : n}`, () => {
      const a = this.lookaheadStrategy.buildLookaheadForOptional({
        prodOccurrence: n,
        rule: e,
        maxLookahead: s || this.maxLookahead,
        dynamicTokensEnabled: this.dynamicTokensEnabled,
        prodType: i
      }), c = xn(this.fullRuleNameToShort[e.name], r, n);
      this.setLaFuncCache(c, a);
    });
  }
  // this actually returns a number, but it is always used as a string (object prop key)
  getKeyForAutomaticLookahead(e, n) {
    const r = this.getLastExplicitRuleShortName();
    return xn(r, e, n);
  }
  getLaFuncFromCache(e) {
    return this.lookAheadFuncsCache.get(e);
  }
  /* istanbul ignore next */
  setLaFuncCache(e, n) {
    this.lookAheadFuncsCache.set(e, n);
  }
}
class $d extends ft {
  constructor() {
    super(...arguments), this.dslMethods = {
      option: [],
      alternation: [],
      repetition: [],
      repetitionWithSeparator: [],
      repetitionMandatory: [],
      repetitionMandatoryWithSeparator: []
    };
  }
  reset() {
    this.dslMethods = {
      option: [],
      alternation: [],
      repetition: [],
      repetitionWithSeparator: [],
      repetitionMandatory: [],
      repetitionMandatoryWithSeparator: []
    };
  }
  visitOption(e) {
    this.dslMethods.option.push(e);
  }
  visitRepetitionWithSeparator(e) {
    this.dslMethods.repetitionWithSeparator.push(e);
  }
  visitRepetitionMandatory(e) {
    this.dslMethods.repetitionMandatory.push(e);
  }
  visitRepetitionMandatoryWithSeparator(e) {
    this.dslMethods.repetitionMandatoryWithSeparator.push(e);
  }
  visitRepetition(e) {
    this.dslMethods.repetition.push(e);
  }
  visitAlternation(e) {
    this.dslMethods.alternation.push(e);
  }
}
const $t = new $d();
function jd(t) {
  $t.reset(), t.accept($t);
  const e = $t.dslMethods;
  return $t.reset(), e;
}
function ki(t, e) {
  isNaN(t.startOffset) === !0 ? (t.startOffset = e.startOffset, t.endOffset = e.endOffset) : t.endOffset < e.endOffset && (t.endOffset = e.endOffset);
}
function Ci(t, e) {
  isNaN(t.startOffset) === !0 ? (t.startOffset = e.startOffset, t.startColumn = e.startColumn, t.startLine = e.startLine, t.endOffset = e.endOffset, t.endColumn = e.endColumn, t.endLine = e.endLine) : t.endOffset < e.endOffset && (t.endOffset = e.endOffset, t.endColumn = e.endColumn, t.endLine = e.endLine);
}
function Gd(t, e, n) {
  t.children[n] === void 0 ? t.children[n] = [e] : t.children[n].push(e);
}
function Bd(t, e, n) {
  t.children[e] === void 0 ? t.children[e] = [n] : t.children[e].push(n);
}
const Vd = "name";
function Bs(t, e) {
  Object.defineProperty(t, Vd, {
    enumerable: !1,
    configurable: !0,
    writable: !1,
    value: e
  });
}
function Kd(t, e) {
  const n = le(t), r = n.length;
  for (let i = 0; i < r; i++) {
    const s = n[i], o = t[s], a = o.length;
    for (let c = 0; c < a; c++) {
      const u = o[c];
      u.tokenTypeIdx === void 0 && this[u.name](u.children, e);
    }
  }
}
function Hd(t, e) {
  const n = function() {
  };
  Bs(n, t + "BaseSemantics");
  const r = {
    visit: function(i, s) {
      if (b(i) && (i = i[0]), !Pe(i))
        return this[i.name](i.children, s);
    },
    validateVisitor: function() {
      const i = zd(this, e);
      if (!w(i)) {
        const s = v(i, (o) => o.msg);
        throw Error(`Errors Detected in CST Visitor <${this.constructor.name}>:
	${s.join(`

`).replace(/\n/g, `
	`)}`);
      }
    }
  };
  return n.prototype = r, n.prototype.constructor = n, n._RULE_NAMES = e, n;
}
function Wd(t, e, n) {
  const r = function() {
  };
  Bs(r, t + "BaseSemanticsWithDefaults");
  const i = Object.create(n.prototype);
  return I(e, (s) => {
    i[s] = Kd;
  }), r.prototype = i, r.prototype.constructor = r, r;
}
var Xn;
(function(t) {
  t[t.REDUNDANT_METHOD = 0] = "REDUNDANT_METHOD", t[t.MISSING_METHOD = 1] = "MISSING_METHOD";
})(Xn || (Xn = {}));
function zd(t, e) {
  return Yd(t, e);
}
function Yd(t, e) {
  const n = he(e, (i) => Ue(t[i]) === !1), r = v(n, (i) => ({
    msg: `Missing visitor method: <${i}> on ${t.constructor.name} CST Visitor.`,
    type: Xn.MISSING_METHOD,
    methodName: i
  }));
  return kt(r);
}
class Xd {
  initTreeBuilder(e) {
    if (this.CST_STACK = [], this.outputCst = e.outputCst, this.nodeLocationTracking = R(e, "nodeLocationTracking") ? e.nodeLocationTracking : we.nodeLocationTracking, !this.outputCst)
      this.cstInvocationStateUpdate = B, this.cstFinallyStateUpdate = B, this.cstPostTerminal = B, this.cstPostNonTerminal = B, this.cstPostRule = B;
    else if (/full/i.test(this.nodeLocationTracking))
      this.recoveryEnabled ? (this.setNodeLocationFromToken = Ci, this.setNodeLocationFromNode = Ci, this.cstPostRule = B, this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery) : (this.setNodeLocationFromToken = B, this.setNodeLocationFromNode = B, this.cstPostRule = this.cstPostRuleFull, this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular);
    else if (/onlyOffset/i.test(this.nodeLocationTracking))
      this.recoveryEnabled ? (this.setNodeLocationFromToken = ki, this.setNodeLocationFromNode = ki, this.cstPostRule = B, this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery) : (this.setNodeLocationFromToken = B, this.setNodeLocationFromNode = B, this.cstPostRule = this.cstPostRuleOnlyOffset, this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular);
    else if (/none/i.test(this.nodeLocationTracking))
      this.setNodeLocationFromToken = B, this.setNodeLocationFromNode = B, this.cstPostRule = B, this.setInitialNodeLocation = B;
    else
      throw Error(`Invalid <nodeLocationTracking> config option: "${e.nodeLocationTracking}"`);
  }
  setInitialNodeLocationOnlyOffsetRecovery(e) {
    e.location = {
      startOffset: NaN,
      endOffset: NaN
    };
  }
  setInitialNodeLocationOnlyOffsetRegular(e) {
    e.location = {
      // without error recovery the starting Location of a new CstNode is guaranteed
      // To be the next Token's startOffset (for valid inputs).
      // For invalid inputs there won't be any CSTOutput so this potential
      // inaccuracy does not matter
      startOffset: this.LA(1).startOffset,
      endOffset: NaN
    };
  }
  setInitialNodeLocationFullRecovery(e) {
    e.location = {
      startOffset: NaN,
      startLine: NaN,
      startColumn: NaN,
      endOffset: NaN,
      endLine: NaN,
      endColumn: NaN
    };
  }
  /**
       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work
  
       * @param cstNode
       */
  setInitialNodeLocationFullRegular(e) {
    const n = this.LA(1);
    e.location = {
      startOffset: n.startOffset,
      startLine: n.startLine,
      startColumn: n.startColumn,
      endOffset: NaN,
      endLine: NaN,
      endColumn: NaN
    };
  }
  cstInvocationStateUpdate(e) {
    const n = {
      name: e,
      children: /* @__PURE__ */ Object.create(null)
    };
    this.setInitialNodeLocation(n), this.CST_STACK.push(n);
  }
  cstFinallyStateUpdate() {
    this.CST_STACK.pop();
  }
  cstPostRuleFull(e) {
    const n = this.LA(0), r = e.location;
    r.startOffset <= n.startOffset ? (r.endOffset = n.endOffset, r.endLine = n.endLine, r.endColumn = n.endColumn) : (r.startOffset = NaN, r.startLine = NaN, r.startColumn = NaN);
  }
  cstPostRuleOnlyOffset(e) {
    const n = this.LA(0), r = e.location;
    r.startOffset <= n.startOffset ? r.endOffset = n.endOffset : r.startOffset = NaN;
  }
  cstPostTerminal(e, n) {
    const r = this.CST_STACK[this.CST_STACK.length - 1];
    Gd(r, n, e), this.setNodeLocationFromToken(r.location, n);
  }
  cstPostNonTerminal(e, n) {
    const r = this.CST_STACK[this.CST_STACK.length - 1];
    Bd(r, n, e), this.setNodeLocationFromNode(r.location, e.location);
  }
  getBaseCstVisitorConstructor() {
    if (Pe(this.baseCstVisitorConstructor)) {
      const e = Hd(this.className, le(this.gastProductionsCache));
      return this.baseCstVisitorConstructor = e, e;
    }
    return this.baseCstVisitorConstructor;
  }
  getBaseCstVisitorConstructorWithDefaults() {
    if (Pe(this.baseCstVisitorWithDefaultsConstructor)) {
      const e = Wd(this.className, le(this.gastProductionsCache), this.getBaseCstVisitorConstructor());
      return this.baseCstVisitorWithDefaultsConstructor = e, e;
    }
    return this.baseCstVisitorWithDefaultsConstructor;
  }
  getLastExplicitRuleShortName() {
    const e = this.RULE_STACK;
    return e[e.length - 1];
  }
  getPreviousExplicitRuleShortName() {
    const e = this.RULE_STACK;
    return e[e.length - 2];
  }
  getLastExplicitRuleOccurrenceIndex() {
    const e = this.RULE_OCCURRENCE_STACK;
    return e[e.length - 1];
  }
}
class qd {
  initLexerAdapter() {
    this.tokVector = [], this.tokVectorLength = 0, this.currIdx = -1;
  }
  set input(e) {
    if (this.selfAnalysisDone !== !0)
      throw Error("Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.");
    this.reset(), this.tokVector = e, this.tokVectorLength = e.length;
  }
  get input() {
    return this.tokVector;
  }
  // skips a token and returns the next token
  SKIP_TOKEN() {
    return this.currIdx <= this.tokVector.length - 2 ? (this.consumeToken(), this.LA(1)) : rn;
  }
  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers
  // or lexers dependent on parser context.
  LA(e) {
    const n = this.currIdx + e;
    return n < 0 || this.tokVectorLength <= n ? rn : this.tokVector[n];
  }
  consumeToken() {
    this.currIdx++;
  }
  exportLexerState() {
    return this.currIdx;
  }
  importLexerState(e) {
    this.currIdx = e;
  }
  resetLexerState() {
    this.currIdx = -1;
  }
  moveToTerminatedState() {
    this.currIdx = this.tokVector.length - 1;
  }
  getLexerPosition() {
    return this.exportLexerState();
  }
}
class Qd {
  ACTION(e) {
    return e.call(this);
  }
  consume(e, n, r) {
    return this.consumeInternal(n, e, r);
  }
  subrule(e, n, r) {
    return this.subruleInternal(n, e, r);
  }
  option(e, n) {
    return this.optionInternal(n, e);
  }
  or(e, n) {
    return this.orInternal(n, e);
  }
  many(e, n) {
    return this.manyInternal(e, n);
  }
  atLeastOne(e, n) {
    return this.atLeastOneInternal(e, n);
  }
  CONSUME(e, n) {
    return this.consumeInternal(e, 0, n);
  }
  CONSUME1(e, n) {
    return this.consumeInternal(e, 1, n);
  }
  CONSUME2(e, n) {
    return this.consumeInternal(e, 2, n);
  }
  CONSUME3(e, n) {
    return this.consumeInternal(e, 3, n);
  }
  CONSUME4(e, n) {
    return this.consumeInternal(e, 4, n);
  }
  CONSUME5(e, n) {
    return this.consumeInternal(e, 5, n);
  }
  CONSUME6(e, n) {
    return this.consumeInternal(e, 6, n);
  }
  CONSUME7(e, n) {
    return this.consumeInternal(e, 7, n);
  }
  CONSUME8(e, n) {
    return this.consumeInternal(e, 8, n);
  }
  CONSUME9(e, n) {
    return this.consumeInternal(e, 9, n);
  }
  SUBRULE(e, n) {
    return this.subruleInternal(e, 0, n);
  }
  SUBRULE1(e, n) {
    return this.subruleInternal(e, 1, n);
  }
  SUBRULE2(e, n) {
    return this.subruleInternal(e, 2, n);
  }
  SUBRULE3(e, n) {
    return this.subruleInternal(e, 3, n);
  }
  SUBRULE4(e, n) {
    return this.subruleInternal(e, 4, n);
  }
  SUBRULE5(e, n) {
    return this.subruleInternal(e, 5, n);
  }
  SUBRULE6(e, n) {
    return this.subruleInternal(e, 6, n);
  }
  SUBRULE7(e, n) {
    return this.subruleInternal(e, 7, n);
  }
  SUBRULE8(e, n) {
    return this.subruleInternal(e, 8, n);
  }
  SUBRULE9(e, n) {
    return this.subruleInternal(e, 9, n);
  }
  OPTION(e) {
    return this.optionInternal(e, 0);
  }
  OPTION1(e) {
    return this.optionInternal(e, 1);
  }
  OPTION2(e) {
    return this.optionInternal(e, 2);
  }
  OPTION3(e) {
    return this.optionInternal(e, 3);
  }
  OPTION4(e) {
    return this.optionInternal(e, 4);
  }
  OPTION5(e) {
    return this.optionInternal(e, 5);
  }
  OPTION6(e) {
    return this.optionInternal(e, 6);
  }
  OPTION7(e) {
    return this.optionInternal(e, 7);
  }
  OPTION8(e) {
    return this.optionInternal(e, 8);
  }
  OPTION9(e) {
    return this.optionInternal(e, 9);
  }
  OR(e) {
    return this.orInternal(e, 0);
  }
  OR1(e) {
    return this.orInternal(e, 1);
  }
  OR2(e) {
    return this.orInternal(e, 2);
  }
  OR3(e) {
    return this.orInternal(e, 3);
  }
  OR4(e) {
    return this.orInternal(e, 4);
  }
  OR5(e) {
    return this.orInternal(e, 5);
  }
  OR6(e) {
    return this.orInternal(e, 6);
  }
  OR7(e) {
    return this.orInternal(e, 7);
  }
  OR8(e) {
    return this.orInternal(e, 8);
  }
  OR9(e) {
    return this.orInternal(e, 9);
  }
  MANY(e) {
    this.manyInternal(0, e);
  }
  MANY1(e) {
    this.manyInternal(1, e);
  }
  MANY2(e) {
    this.manyInternal(2, e);
  }
  MANY3(e) {
    this.manyInternal(3, e);
  }
  MANY4(e) {
    this.manyInternal(4, e);
  }
  MANY5(e) {
    this.manyInternal(5, e);
  }
  MANY6(e) {
    this.manyInternal(6, e);
  }
  MANY7(e) {
    this.manyInternal(7, e);
  }
  MANY8(e) {
    this.manyInternal(8, e);
  }
  MANY9(e) {
    this.manyInternal(9, e);
  }
  MANY_SEP(e) {
    this.manySepFirstInternal(0, e);
  }
  MANY_SEP1(e) {
    this.manySepFirstInternal(1, e);
  }
  MANY_SEP2(e) {
    this.manySepFirstInternal(2, e);
  }
  MANY_SEP3(e) {
    this.manySepFirstInternal(3, e);
  }
  MANY_SEP4(e) {
    this.manySepFirstInternal(4, e);
  }
  MANY_SEP5(e) {
    this.manySepFirstInternal(5, e);
  }
  MANY_SEP6(e) {
    this.manySepFirstInternal(6, e);
  }
  MANY_SEP7(e) {
    this.manySepFirstInternal(7, e);
  }
  MANY_SEP8(e) {
    this.manySepFirstInternal(8, e);
  }
  MANY_SEP9(e) {
    this.manySepFirstInternal(9, e);
  }
  AT_LEAST_ONE(e) {
    this.atLeastOneInternal(0, e);
  }
  AT_LEAST_ONE1(e) {
    return this.atLeastOneInternal(1, e);
  }
  AT_LEAST_ONE2(e) {
    this.atLeastOneInternal(2, e);
  }
  AT_LEAST_ONE3(e) {
    this.atLeastOneInternal(3, e);
  }
  AT_LEAST_ONE4(e) {
    this.atLeastOneInternal(4, e);
  }
  AT_LEAST_ONE5(e) {
    this.atLeastOneInternal(5, e);
  }
  AT_LEAST_ONE6(e) {
    this.atLeastOneInternal(6, e);
  }
  AT_LEAST_ONE7(e) {
    this.atLeastOneInternal(7, e);
  }
  AT_LEAST_ONE8(e) {
    this.atLeastOneInternal(8, e);
  }
  AT_LEAST_ONE9(e) {
    this.atLeastOneInternal(9, e);
  }
  AT_LEAST_ONE_SEP(e) {
    this.atLeastOneSepFirstInternal(0, e);
  }
  AT_LEAST_ONE_SEP1(e) {
    this.atLeastOneSepFirstInternal(1, e);
  }
  AT_LEAST_ONE_SEP2(e) {
    this.atLeastOneSepFirstInternal(2, e);
  }
  AT_LEAST_ONE_SEP3(e) {
    this.atLeastOneSepFirstInternal(3, e);
  }
  AT_LEAST_ONE_SEP4(e) {
    this.atLeastOneSepFirstInternal(4, e);
  }
  AT_LEAST_ONE_SEP5(e) {
    this.atLeastOneSepFirstInternal(5, e);
  }
  AT_LEAST_ONE_SEP6(e) {
    this.atLeastOneSepFirstInternal(6, e);
  }
  AT_LEAST_ONE_SEP7(e) {
    this.atLeastOneSepFirstInternal(7, e);
  }
  AT_LEAST_ONE_SEP8(e) {
    this.atLeastOneSepFirstInternal(8, e);
  }
  AT_LEAST_ONE_SEP9(e) {
    this.atLeastOneSepFirstInternal(9, e);
  }
  RULE(e, n, r = sn) {
    if (q(this.definedRulesNames, e)) {
      const s = {
        message: Xe.buildDuplicateRuleNameError({
          topLevelRule: e,
          grammarName: this.className
        }),
        type: X.DUPLICATE_RULE_NAME,
        ruleName: e
      };
      this.definitionErrors.push(s);
    }
    this.definedRulesNames.push(e);
    const i = this.defineRule(e, n, r);
    return this[e] = i, i;
  }
  OVERRIDE_RULE(e, n, r = sn) {
    const i = yd(e, this.definedRulesNames, this.className);
    this.definitionErrors = this.definitionErrors.concat(i);
    const s = this.defineRule(e, n, r);
    return this[e] = s, s;
  }
  BACKTRACK(e, n) {
    return function() {
      this.isBackTrackingStack.push(1);
      const r = this.saveRecogState();
      try {
        return e.apply(this, n), !0;
      } catch (i) {
        if (tn(i))
          return !1;
        throw i;
      } finally {
        this.reloadRecogState(r), this.isBackTrackingStack.pop();
      }
    };
  }
  // GAST export APIs
  getGAstProductions() {
    return this.gastProductionsCache;
  }
  getSerializedGastProductions() {
    return Zh(V(this.gastProductionsCache));
  }
}
class Zd {
  initRecognizerEngine(e, n) {
    if (this.className = this.constructor.name, this.shortRuleNameToFull = {}, this.fullRuleNameToShort = {}, this.ruleShortNameIdx = 256, this.tokenMatcher = en, this.subruleIdx = 0, this.definedRulesNames = [], this.tokensMap = {}, this.isBackTrackingStack = [], this.RULE_STACK = [], this.RULE_OCCURRENCE_STACK = [], this.gastProductionsCache = {}, R(n, "serializedGrammar"))
      throw Error(`The Parser's configuration can no longer contain a <serializedGrammar> property.
	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0
	For Further details.`);
    if (b(e)) {
      if (w(e))
        throw Error(`A Token Vocabulary cannot be empty.
	Note that the first argument for the parser constructor
	is no longer a Token vector (since v4.0).`);
      if (typeof e[0].startOffset == "number")
        throw Error(`The Parser constructor no longer accepts a token vector as the first argument.
	See: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0
	For Further details.`);
    }
    if (b(e))
      this.tokensMap = ne(e, (s, o) => (s[o.name] = o, s), {});
    else if (R(e, "modes") && de(fe(V(e.modes)), zf)) {
      const s = fe(V(e.modes)), o = Ar(s);
      this.tokensMap = ne(o, (a, c) => (a[c.name] = c, a), {});
    } else if (ue(e))
      this.tokensMap = W(e);
    else
      throw new Error("<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition");
    this.tokensMap.EOF = Ze;
    const r = R(e, "modes") ? fe(V(e.modes)) : V(e), i = de(r, (s) => w(s.categoryMatches));
    this.tokenMatcher = i ? en : bt, xt(V(this.tokensMap));
  }
  defineRule(e, n, r) {
    if (this.selfAnalysisDone)
      throw Error(`Grammar rule <${e}> may not be defined after the 'performSelfAnalysis' method has been called'
Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`);
    const i = R(r, "resyncEnabled") ? r.resyncEnabled : sn.resyncEnabled, s = R(r, "recoveryValueFunc") ? r.recoveryValueFunc : sn.recoveryValueFunc, o = this.ruleShortNameIdx << Ud + Ve;
    this.ruleShortNameIdx++, this.shortRuleNameToFull[o] = e, this.fullRuleNameToShort[e] = o;
    let a;
    return this.outputCst === !0 ? a = function(...c) {
      try {
        this.ruleInvocationStateUpdate(o, e, this.subruleIdx), n.apply(this, c);
        const u = this.CST_STACK[this.CST_STACK.length - 1];
        return this.cstPostRule(u), u;
      } catch (u) {
        return this.invokeRuleCatch(u, i, s);
      } finally {
        this.ruleFinallyStateUpdate();
      }
    } : a = function(...c) {
      try {
        return this.ruleInvocationStateUpdate(o, e, this.subruleIdx), n.apply(this, c);
      } catch (u) {
        return this.invokeRuleCatch(u, i, s);
      } finally {
        this.ruleFinallyStateUpdate();
      }
    }, Object.assign(a, { ruleName: e, originalGrammarAction: n });
  }
  invokeRuleCatch(e, n, r) {
    const i = this.RULE_STACK.length === 1, s = n && !this.isBackTracking() && this.recoveryEnabled;
    if (tn(e)) {
      const o = e;
      if (s) {
        const a = this.findReSyncTokenType();
        if (this.isInCurrentRuleReSyncSet(a))
          if (o.resyncedTokens = this.reSyncTo(a), this.outputCst) {
            const c = this.CST_STACK[this.CST_STACK.length - 1];
            return c.recoveredNode = !0, c;
          } else
            return r(e);
        else {
          if (this.outputCst) {
            const c = this.CST_STACK[this.CST_STACK.length - 1];
            c.recoveredNode = !0, o.partialCstResult = c;
          }
          throw o;
        }
      } else {
        if (i)
          return this.moveToTerminatedState(), r(e);
        throw o;
      }
    } else
      throw e;
  }
  // Implementation of parsing DSL
  optionInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(Gs, n);
    return this.optionInternalLogic(e, n, r);
  }
  optionInternalLogic(e, n, r) {
    let i = this.getLaFuncFromCache(r), s;
    if (typeof e != "function") {
      s = e.DEF;
      const o = e.GATE;
      if (o !== void 0) {
        const a = i;
        i = () => o.call(this) && a.call(this);
      }
    } else
      s = e;
    if (i.call(this) === !0)
      return s.call(this);
  }
  atLeastOneInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(zn, e);
    return this.atLeastOneInternalLogic(e, n, r);
  }
  atLeastOneInternalLogic(e, n, r) {
    let i = this.getLaFuncFromCache(r), s;
    if (typeof n != "function") {
      s = n.DEF;
      const o = n.GATE;
      if (o !== void 0) {
        const a = i;
        i = () => o.call(this) && a.call(this);
      }
    } else
      s = n;
    if (i.call(this) === !0) {
      let o = this.doSingleRepetition(s);
      for (; i.call(this) === !0 && o === !0; )
        o = this.doSingleRepetition(s);
    } else
      throw this.raiseEarlyExitException(e, $.REPETITION_MANDATORY, n.ERR_MSG);
    this.attemptInRepetitionRecovery(this.atLeastOneInternal, [e, n], i, zn, e, id);
  }
  atLeastOneSepFirstInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(Wt, e);
    this.atLeastOneSepFirstInternalLogic(e, n, r);
  }
  atLeastOneSepFirstInternalLogic(e, n, r) {
    const i = n.DEF, s = n.SEP;
    if (this.getLaFuncFromCache(r).call(this) === !0) {
      i.call(this);
      const o = () => this.tokenMatcher(this.LA(1), s);
      for (; this.tokenMatcher(this.LA(1), s) === !0; )
        this.CONSUME(s), i.call(this);
      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
        e,
        s,
        o,
        i,
        Ni
      ], o, Wt, e, Ni);
    } else
      throw this.raiseEarlyExitException(e, $.REPETITION_MANDATORY_WITH_SEPARATOR, n.ERR_MSG);
  }
  manyInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(Wn, e);
    return this.manyInternalLogic(e, n, r);
  }
  manyInternalLogic(e, n, r) {
    let i = this.getLaFuncFromCache(r), s;
    if (typeof n != "function") {
      s = n.DEF;
      const a = n.GATE;
      if (a !== void 0) {
        const c = i;
        i = () => a.call(this) && c.call(this);
      }
    } else
      s = n;
    let o = !0;
    for (; i.call(this) === !0 && o === !0; )
      o = this.doSingleRepetition(s);
    this.attemptInRepetitionRecovery(
      this.manyInternal,
      [e, n],
      i,
      Wn,
      e,
      rd,
      // The notStuck parameter is only relevant when "attemptInRepetitionRecovery"
      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]
      // An infinite loop cannot occur as:
      // - Either the lookahead is guaranteed to consume something (Single Token Separator)
      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).
      o
    );
  }
  manySepFirstInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(Yn, e);
    this.manySepFirstInternalLogic(e, n, r);
  }
  manySepFirstInternalLogic(e, n, r) {
    const i = n.DEF, s = n.SEP;
    if (this.getLaFuncFromCache(r).call(this) === !0) {
      i.call(this);
      const o = () => this.tokenMatcher(this.LA(1), s);
      for (; this.tokenMatcher(this.LA(1), s) === !0; )
        this.CONSUME(s), i.call(this);
      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
        e,
        s,
        o,
        i,
        Si
      ], o, Yn, e, Si);
    }
  }
  repetitionSepSecondInternal(e, n, r, i, s) {
    for (; r(); )
      this.CONSUME(n), i.call(this);
    this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
      e,
      n,
      r,
      i,
      s
    ], r, Wt, e, s);
  }
  doSingleRepetition(e) {
    const n = this.getLexerPosition();
    return e.call(this), this.getLexerPosition() > n;
  }
  orInternal(e, n) {
    const r = this.getKeyForAutomaticLookahead(js, n), i = b(e) ? e : e.DEF, s = this.getLaFuncFromCache(r).call(this, i);
    if (s !== void 0)
      return i[s].ALT.call(this);
    this.raiseNoAltException(n, e.ERR_MSG);
  }
  ruleFinallyStateUpdate() {
    if (this.RULE_STACK.pop(), this.RULE_OCCURRENCE_STACK.pop(), this.cstFinallyStateUpdate(), this.RULE_STACK.length === 0 && this.isAtEndOfInput() === !1) {
      const e = this.LA(1), n = this.errorMessageProvider.buildNotAllInputParsedMessage({
        firstRedundant: e,
        ruleName: this.getCurrRuleFullName()
      });
      this.SAVE_ERROR(new bd(n, e));
    }
  }
  subruleInternal(e, n, r) {
    let i;
    try {
      const s = r !== void 0 ? r.ARGS : void 0;
      return this.subruleIdx = n, i = e.apply(this, s), this.cstPostNonTerminal(i, r !== void 0 && r.LABEL !== void 0 ? r.LABEL : e.ruleName), i;
    } catch (s) {
      throw this.subruleInternalError(s, r, e.ruleName);
    }
  }
  subruleInternalError(e, n, r) {
    throw tn(e) && e.partialCstResult !== void 0 && (this.cstPostNonTerminal(e.partialCstResult, n !== void 0 && n.LABEL !== void 0 ? n.LABEL : r), delete e.partialCstResult), e;
  }
  consumeInternal(e, n, r) {
    let i;
    try {
      const s = this.LA(1);
      this.tokenMatcher(s, e) === !0 ? (this.consumeToken(), i = s) : this.consumeInternalError(e, s, r);
    } catch (s) {
      i = this.consumeInternalRecovery(e, n, s);
    }
    return this.cstPostTerminal(r !== void 0 && r.LABEL !== void 0 ? r.LABEL : e.name, i), i;
  }
  consumeInternalError(e, n, r) {
    let i;
    const s = this.LA(0);
    throw r !== void 0 && r.ERR_MSG ? i = r.ERR_MSG : i = this.errorMessageProvider.buildMismatchTokenMessage({
      expected: e,
      actual: n,
      previous: s,
      ruleName: this.getCurrRuleFullName()
    }), this.SAVE_ERROR(new Fs(i, n, s));
  }
  consumeInternalRecovery(e, n, r) {
    if (this.recoveryEnabled && // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?
    r.name === "MismatchedTokenException" && !this.isBackTracking()) {
      const i = this.getFollowsForInRuleRecovery(e, n);
      try {
        return this.tryInRuleRecovery(e, i);
      } catch (s) {
        throw s.name === $s ? r : s;
      }
    } else
      throw r;
  }
  saveRecogState() {
    const e = this.errors, n = W(this.RULE_STACK);
    return {
      errors: e,
      lexerState: this.exportLexerState(),
      RULE_STACK: n,
      CST_STACK: this.CST_STACK
    };
  }
  reloadRecogState(e) {
    this.errors = e.errors, this.importLexerState(e.lexerState), this.RULE_STACK = e.RULE_STACK;
  }
  ruleInvocationStateUpdate(e, n, r) {
    this.RULE_OCCURRENCE_STACK.push(r), this.RULE_STACK.push(e), this.cstInvocationStateUpdate(n);
  }
  isBackTracking() {
    return this.isBackTrackingStack.length !== 0;
  }
  getCurrRuleFullName() {
    const e = this.getLastExplicitRuleShortName();
    return this.shortRuleNameToFull[e];
  }
  shortRuleNameToFullName(e) {
    return this.shortRuleNameToFull[e];
  }
  isAtEndOfInput() {
    return this.tokenMatcher(this.LA(1), Ze);
  }
  reset() {
    this.resetLexerState(), this.subruleIdx = 0, this.isBackTrackingStack = [], this.errors = [], this.RULE_STACK = [], this.CST_STACK = [], this.RULE_OCCURRENCE_STACK = [];
  }
}
class Jd {
  initErrorHandler(e) {
    this._errors = [], this.errorMessageProvider = R(e, "errorMessageProvider") ? e.errorMessageProvider : we.errorMessageProvider;
  }
  SAVE_ERROR(e) {
    if (tn(e))
      return e.context = {
        ruleStack: this.getHumanReadableRuleStack(),
        ruleOccurrenceStack: W(this.RULE_OCCURRENCE_STACK)
      }, this._errors.push(e), e;
    throw Error("Trying to save an Error which is not a RecognitionException");
  }
  get errors() {
    return W(this._errors);
  }
  set errors(e) {
    this._errors = e;
  }
  // TODO: consider caching the error message computed information
  raiseEarlyExitException(e, n, r) {
    const i = this.getCurrRuleFullName(), s = this.getGAstProductions()[i], o = Ir(e, s, n, this.maxLookahead)[0], a = [];
    for (let u = 1; u <= this.maxLookahead; u++)
      a.push(this.LA(u));
    const c = this.errorMessageProvider.buildEarlyExitMessage({
      expectedIterationPaths: o,
      actual: a,
      previous: this.LA(0),
      customUserDescription: r,
      ruleName: i
    });
    throw this.SAVE_ERROR(new xd(c, this.LA(1), this.LA(0)));
  }
  // TODO: consider caching the error message computed information
  raiseNoAltException(e, n) {
    const r = this.getCurrRuleFullName(), i = this.getGAstProductions()[r], s = Or(e, i, this.maxLookahead), o = [];
    for (let u = 1; u <= this.maxLookahead; u++)
      o.push(this.LA(u));
    const a = this.LA(0), c = this.errorMessageProvider.buildNoViableAltMessage({
      expectedPathsPerAlt: s,
      actual: o,
      previous: a,
      customUserDescription: n,
      ruleName: this.getCurrRuleFullName()
    });
    throw this.SAVE_ERROR(new Cd(c, this.LA(1), a));
  }
}
class ep {
  initContentAssist() {
  }
  computeContentAssist(e, n) {
    const r = this.gastProductionsCache[e];
    if (Pe(r))
      throw Error(`Rule ->${e}<- does not exist in this grammar.`);
    return Ss([r], n, this.tokenMatcher, this.maxLookahead);
  }
  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...
  // TODO: should this be more explicitly part of the public API?
  getNextPossibleTokenTypes(e) {
    const n = me(e.ruleStack), r = this.getGAstProductions()[n];
    return new nd(r, e).startWalking();
  }
}
const vn = {
  description: "This Object indicates the Parser is during Recording Phase"
};
Object.freeze(vn);
const bi = !0, xi = Math.pow(2, Ve) - 1, Vs = x({ name: "RECORDING_PHASE_TOKEN", pattern: Y.NA });
xt([Vs]);
const Ks = Rr(
  Vs,
  `This IToken indicates the Parser is in Recording Phase
	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details`,
  // Using "-1" instead of NaN (as in EOF) because an actual number is less likely to
  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.
  -1,
  -1,
  -1,
  -1,
  -1,
  -1
);
Object.freeze(Ks);
const tp = {
  name: `This CSTNode indicates the Parser is in Recording Phase
	See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details`,
  children: {}
};
class np {
  initGastRecorder(e) {
    this.recordingProdStack = [], this.RECORDING_PHASE = !1;
  }
  enableRecording() {
    this.RECORDING_PHASE = !0, this.TRACE_INIT("Enable Recording", () => {
      for (let e = 0; e < 10; e++) {
        const n = e > 0 ? e : "";
        this[`CONSUME${n}`] = function(r, i) {
          return this.consumeInternalRecord(r, e, i);
        }, this[`SUBRULE${n}`] = function(r, i) {
          return this.subruleInternalRecord(r, e, i);
        }, this[`OPTION${n}`] = function(r) {
          return this.optionInternalRecord(r, e);
        }, this[`OR${n}`] = function(r) {
          return this.orInternalRecord(r, e);
        }, this[`MANY${n}`] = function(r) {
          this.manyInternalRecord(e, r);
        }, this[`MANY_SEP${n}`] = function(r) {
          this.manySepFirstInternalRecord(e, r);
        }, this[`AT_LEAST_ONE${n}`] = function(r) {
          this.atLeastOneInternalRecord(e, r);
        }, this[`AT_LEAST_ONE_SEP${n}`] = function(r) {
          this.atLeastOneSepFirstInternalRecord(e, r);
        };
      }
      this.consume = function(e, n, r) {
        return this.consumeInternalRecord(n, e, r);
      }, this.subrule = function(e, n, r) {
        return this.subruleInternalRecord(n, e, r);
      }, this.option = function(e, n) {
        return this.optionInternalRecord(n, e);
      }, this.or = function(e, n) {
        return this.orInternalRecord(n, e);
      }, this.many = function(e, n) {
        this.manyInternalRecord(e, n);
      }, this.atLeastOne = function(e, n) {
        this.atLeastOneInternalRecord(e, n);
      }, this.ACTION = this.ACTION_RECORD, this.BACKTRACK = this.BACKTRACK_RECORD, this.LA = this.LA_RECORD;
    });
  }
  disableRecording() {
    this.RECORDING_PHASE = !1, this.TRACE_INIT("Deleting Recording methods", () => {
      const e = this;
      for (let n = 0; n < 10; n++) {
        const r = n > 0 ? n : "";
        delete e[`CONSUME${r}`], delete e[`SUBRULE${r}`], delete e[`OPTION${r}`], delete e[`OR${r}`], delete e[`MANY${r}`], delete e[`MANY_SEP${r}`], delete e[`AT_LEAST_ONE${r}`], delete e[`AT_LEAST_ONE_SEP${r}`];
      }
      delete e.consume, delete e.subrule, delete e.option, delete e.or, delete e.many, delete e.atLeastOne, delete e.ACTION, delete e.BACKTRACK, delete e.LA;
    });
  }
  //   Parser methods are called inside an ACTION?
  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?
  // @ts-expect-error -- noop place holder
  ACTION_RECORD(e) {
  }
  // Executing backtracking logic will break our recording logic assumptions
  BACKTRACK_RECORD(e, n) {
    return () => !0;
  }
  // LA is part of the official API and may be used for custom lookahead logic
  // by end users who may forget to wrap it in ACTION or inside a GATE
  LA_RECORD(e) {
    return rn;
  }
  topLevelRuleRecord(e, n) {
    try {
      const r = new ht({ definition: [], name: e });
      return r.name = e, this.recordingProdStack.push(r), n.call(this), this.recordingProdStack.pop(), r;
    } catch (r) {
      if (r.KNOWN_RECORDER_ERROR !== !0)
        try {
          r.message = r.message + `
	 This error was thrown during the "grammar recording phase" For more info see:
	https://chevrotain.io/docs/guide/internals.html#grammar-recording`;
        } catch {
          throw r;
        }
      throw r;
    }
  }
  // Implementation of parsing DSL
  optionInternalRecord(e, n) {
    return gt.call(this, Z, e, n);
  }
  atLeastOneInternalRecord(e, n) {
    gt.call(this, Le, n, e);
  }
  atLeastOneSepFirstInternalRecord(e, n) {
    gt.call(this, ke, n, e, bi);
  }
  manyInternalRecord(e, n) {
    gt.call(this, K, n, e);
  }
  manySepFirstInternalRecord(e, n) {
    gt.call(this, Ee, n, e, bi);
  }
  orInternalRecord(e, n) {
    return rp.call(this, e, n);
  }
  subruleInternalRecord(e, n, r) {
    if (nn(n), !e || R(e, "ruleName") === !1) {
      const a = new Error(`<SUBRULE${Mi(n)}> argument is invalid expecting a Parser method reference but got: <${JSON.stringify(e)}>
 inside top level rule: <${this.recordingProdStack[0].name}>`);
      throw a.KNOWN_RECORDER_ERROR = !0, a;
    }
    const i = ut(this.recordingProdStack), s = e.ruleName, o = new re({
      idx: n,
      nonTerminalName: s,
      label: r?.LABEL,
      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created
      referencedRule: void 0
    });
    return i.definition.push(o), this.outputCst ? tp : vn;
  }
  consumeInternalRecord(e, n, r) {
    if (nn(n), !Rs(e)) {
      const o = new Error(`<CONSUME${Mi(n)}> argument is invalid expecting a TokenType reference but got: <${JSON.stringify(e)}>
 inside top level rule: <${this.recordingProdStack[0].name}>`);
      throw o.KNOWN_RECORDER_ERROR = !0, o;
    }
    const i = ut(this.recordingProdStack), s = new F({
      idx: n,
      terminalType: e,
      label: r?.LABEL
    });
    return i.definition.push(s), Ks;
  }
}
function gt(t, e, n, r = !1) {
  nn(n);
  const i = ut(this.recordingProdStack), s = Ue(e) ? e : e.DEF, o = new t({ definition: [], idx: n });
  return r && (o.separator = e.SEP), R(e, "MAX_LOOKAHEAD") && (o.maxLookahead = e.MAX_LOOKAHEAD), this.recordingProdStack.push(o), s.call(this), i.definition.push(o), this.recordingProdStack.pop(), vn;
}
function rp(t, e) {
  nn(e);
  const n = ut(this.recordingProdStack), r = b(t) === !1, i = r === !1 ? t : t.DEF, s = new Te({
    definition: [],
    idx: e,
    ignoreAmbiguities: r && t.IGNORE_AMBIGUITIES === !0
  });
  R(t, "MAX_LOOKAHEAD") && (s.maxLookahead = t.MAX_LOOKAHEAD);
  const o = hs(i, (a) => Ue(a.GATE));
  return s.hasPredicates = o, n.definition.push(s), I(i, (a) => {
    const c = new ee({ definition: [] });
    s.definition.push(c), R(a, "IGNORE_AMBIGUITIES") ? c.ignoreAmbiguities = a.IGNORE_AMBIGUITIES : R(a, "GATE") && (c.ignoreAmbiguities = !0), this.recordingProdStack.push(c), a.ALT.call(this), this.recordingProdStack.pop();
  }), vn;
}
function Mi(t) {
  return t === 0 ? "" : `${t}`;
}
function nn(t) {
  if (t < 0 || t > xi) {
    const e = new Error(
      // The stack trace will contain all the needed details
      `Invalid DSL Method idx value: <${t}>
	Idx value must be a none negative value smaller than ${xi + 1}`
    );
    throw e.KNOWN_RECORDER_ERROR = !0, e;
  }
}
class ip {
  initPerformanceTracer(e) {
    if (R(e, "traceInitPerf")) {
      const n = e.traceInitPerf, r = typeof n == "number";
      this.traceInitMaxIdent = r ? n : 1 / 0, this.traceInitPerf = r ? n > 0 : n;
    } else
      this.traceInitMaxIdent = 0, this.traceInitPerf = we.traceInitPerf;
    this.traceInitIndent = -1;
  }
  TRACE_INIT(e, n) {
    if (this.traceInitPerf === !0) {
      this.traceInitIndent++;
      const r = new Array(this.traceInitIndent + 1).join("	");
      this.traceInitIndent < this.traceInitMaxIdent && console.log(`${r}--> <${e}>`);
      const { time: i, value: s } = ds(n), o = i > 10 ? console.warn : console.log;
      return this.traceInitIndent < this.traceInitMaxIdent && o(`${r}<-- <${e}> time: ${i}ms`), this.traceInitIndent--, s;
    } else
      return n();
  }
}
function sp(t, e) {
  e.forEach((n) => {
    const r = n.prototype;
    Object.getOwnPropertyNames(r).forEach((i) => {
      if (i === "constructor")
        return;
      const s = Object.getOwnPropertyDescriptor(r, i);
      s && (s.get || s.set) ? Object.defineProperty(t.prototype, i, s) : t.prototype[i] = n.prototype[i];
    });
  });
}
const rn = Rr(Ze, "", NaN, NaN, NaN, NaN, NaN, NaN);
Object.freeze(rn);
const we = Object.freeze({
  recoveryEnabled: !1,
  maxLookahead: 3,
  dynamicTokensEnabled: !1,
  outputCst: !0,
  errorMessageProvider: Is,
  nodeLocationTracking: "none",
  traceInitPerf: !1,
  skipValidations: !1
}), sn = Object.freeze({
  recoveryValueFunc: () => {
  },
  resyncEnabled: !0
});
var X;
(function(t) {
  t[t.INVALID_RULE_NAME = 0] = "INVALID_RULE_NAME", t[t.DUPLICATE_RULE_NAME = 1] = "DUPLICATE_RULE_NAME", t[t.INVALID_RULE_OVERRIDE = 2] = "INVALID_RULE_OVERRIDE", t[t.DUPLICATE_PRODUCTIONS = 3] = "DUPLICATE_PRODUCTIONS", t[t.UNRESOLVED_SUBRULE_REF = 4] = "UNRESOLVED_SUBRULE_REF", t[t.LEFT_RECURSION = 5] = "LEFT_RECURSION", t[t.NONE_LAST_EMPTY_ALT = 6] = "NONE_LAST_EMPTY_ALT", t[t.AMBIGUOUS_ALTS = 7] = "AMBIGUOUS_ALTS", t[t.CONFLICT_TOKENS_RULES_NAMESPACE = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE", t[t.INVALID_TOKEN_NAME = 9] = "INVALID_TOKEN_NAME", t[t.NO_NON_EMPTY_LOOKAHEAD = 10] = "NO_NON_EMPTY_LOOKAHEAD", t[t.AMBIGUOUS_PREFIX_ALTS = 11] = "AMBIGUOUS_PREFIX_ALTS", t[t.TOO_MANY_ALTS = 12] = "TOO_MANY_ALTS", t[t.CUSTOM_LOOKAHEAD_VALIDATION = 13] = "CUSTOM_LOOKAHEAD_VALIDATION";
})(X || (X = {}));
class Mt {
  /**
   *  @deprecated use the **instance** method with the same name instead
   */
  static performSelfAnalysis(e) {
    throw Error("The **static** `performSelfAnalysis` method has been deprecated.	\nUse the **instance** method with the same name instead.");
  }
  performSelfAnalysis() {
    this.TRACE_INIT("performSelfAnalysis", () => {
      let e;
      this.selfAnalysisDone = !0;
      const n = this.className;
      this.TRACE_INIT("toFastProps", () => {
        ps(this);
      }), this.TRACE_INIT("Grammar Recording", () => {
        try {
          this.enableRecording(), I(this.definedRulesNames, (i) => {
            const s = this[i].originalGrammarAction;
            let o;
            this.TRACE_INIT(`${i} Rule`, () => {
              o = this.topLevelRuleRecord(i, s);
            }), this.gastProductionsCache[i] = o;
          });
        } finally {
          this.disableRecording();
        }
      });
      let r = [];
      if (this.TRACE_INIT("Grammar Resolving", () => {
        r = Ld({
          rules: V(this.gastProductionsCache)
        }), this.definitionErrors = this.definitionErrors.concat(r);
      }), this.TRACE_INIT("Grammar Validations", () => {
        if (w(r) && this.skipValidations === !1) {
          const i = kd({
            rules: V(this.gastProductionsCache),
            tokenTypes: V(this.tokensMap),
            errMsgProvider: Xe,
            grammarName: n
          }), s = dd({
            lookaheadStrategy: this.lookaheadStrategy,
            rules: V(this.gastProductionsCache),
            tokenTypes: V(this.tokensMap),
            grammarName: n
          });
          this.definitionErrors = this.definitionErrors.concat(i, s);
        }
      }), w(this.definitionErrors) && (this.recoveryEnabled && this.TRACE_INIT("computeAllProdsFollows", () => {
        const i = of(V(this.gastProductionsCache));
        this.resyncFollows = i;
      }), this.TRACE_INIT("ComputeLookaheadFunctions", () => {
        var i, s;
        (s = (i = this.lookaheadStrategy).initialize) === null || s === void 0 || s.call(i, {
          rules: V(this.gastProductionsCache)
        }), this.preComputeLookaheadFunctions(V(this.gastProductionsCache));
      })), !Mt.DEFER_DEFINITION_ERRORS_HANDLING && !w(this.definitionErrors))
        throw e = v(this.definitionErrors, (i) => i.message), new Error(`Parser Definition Errors detected:
 ${e.join(`
-------------------------------
`)}`);
    });
  }
  constructor(e, n) {
    this.definitionErrors = [], this.selfAnalysisDone = !1;
    const r = this;
    if (r.initErrorHandler(n), r.initLexerAdapter(), r.initLooksAhead(n), r.initRecognizerEngine(e, n), r.initRecoverable(n), r.initTreeBuilder(n), r.initContentAssist(), r.initGastRecorder(n), r.initPerformanceTracer(n), R(n, "ignoredIssues"))
      throw new Error(`The <ignoredIssues> IParserConfig property has been deprecated.
	Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.
	See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES
	For further details.`);
    this.skipValidations = R(n, "skipValidations") ? n.skipValidations : we.skipValidations;
  }
}
Mt.DEFER_DEFINITION_ERRORS_HANDLING = !1;
sp(Mt, [
  Pd,
  Fd,
  Xd,
  qd,
  Zd,
  Qd,
  Jd,
  ep,
  np,
  ip
]);
class op extends Mt {
  constructor(e, n = we) {
    const r = W(n);
    r.outputCst = !0, super(e, r);
  }
}
const Hs = x({
  name: "HTML_COMMENT",
  pattern: /<!--[\s\S]*?-->/,
  line_breaks: !0
}), Ws = x({
  name: "HTML_CONDITIONAL_COMMENT",
  pattern: /<!\[[\s\S]*?\]>/,
  line_breaks: !0
}), ap = x({
  name: "XML",
  pattern: /<\?xml(?:.|\s)*?\?>/
}), zs = x({
  name: "CDATA",
  pattern: /<!\[CDATA\[[\s\S]*?]]>/
}), Ys = x({
  name: "DTD",
  pattern: /<!.*?>/
}), Xs = x({
  name: "SCRIPTLET",
  pattern: /<%(.*?)%>|<\?(.*?)\?>/
}), cp = x({
  name: "SEA_WS",
  pattern: /[ \t]+/,
  group: Y.SKIPPED
}), qs = x({
  name: "LINE_BREAK",
  pattern: /\r?\n/
}), Qs = x({
  name: "SCRIPT_OPEN",
  pattern: /<script\b[^>]*>/,
  push_mode: "SCRIPT"
}), Zs = x({
  name: "STYLE_OPEN",
  pattern: /<style\b[^>]*>/,
  push_mode: "STYLE"
}), qn = x({
  name: "TAG_OPEN",
  pattern: /</,
  push_mode: "TAG"
}), Js = x({
  name: "HTML_TEXT",
  pattern: /[^<@]+/,
  line_breaks: !0
}), Qn = x({
  name: "TAG_CLOSE",
  pattern: />/,
  pop_mode: !0
}), eo = x({
  name: "TAG_SLASH_CLOSE",
  pattern: /\/>/,
  pop_mode: !0
}), to = x({
  name: "TAG_SLASH",
  pattern: /\//
}), no = x({
  name: "TAG_EQUALS",
  pattern: /=/,
  push_mode: "ATTVALUE"
}), zt = x({
  name: "TAG_NAME",
  pattern: /[:@a-zA-Z\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:\.\-@\u00B7\u0300-\u036F\u203F-\u2040.0-9a-zA-Z]*/
}), up = x({
  name: "TAG_WHITESPACE",
  pattern: /[ \t\r\n]+/,
  group: Y.SKIPPED
}), ro = x({
  name: "SCRIPT_BODY",
  pattern: /[\s\S]*?<\/script>/,
  pop_mode: !0
}), io = x({
  name: "STYLE_BODY",
  pattern: /[\s\S]*?<\/style>/,
  pop_mode: !0
}), so = x({
  name: "ATTVALUE_VALUE",
  pattern: / *("[^<"]*"|'[^<']*'|[-_./+,?=:#;0-9a-zA-Z]+ ?|#[0-9a-fA-F]+|[0-9]+%?)/,
  pop_mode: !0
}), Zn = x({
  name: "EDGE_COMMENT",
  pattern: /{{--[\s\S]*?--}}/,
  line_breaks: !0
}), Jn = x({
  name: "EDGE_MUSTACHE",
  pattern: /{{[\s\S]*?}}\s*/
}), er = x({
  name: "EDGE_SAFE_MUSTACHE",
  pattern: /{{{[\s\S]*?}}}\s*/
}), oo = x({
  name: "EDGE_ESCAPED_MUSTACHE",
  pattern: /@{{[\s\S]*?}}\s*/
}), ao = x({
  name: "EDGE_TAG",
  pattern: /@(?:!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/
}), co = x({
  name: "EDGE_TAG_PROP",
  pattern: /@(if|elseif|else|each|flashMessage)\([^)]*\)\s*([\s\S]*?)@end/
}), tr = {
  defaultMode: "default",
  modes: {
    default: [
      Hs,
      Ws,
      ap,
      zs,
      Ys,
      Xs,
      qs,
      cp,
      Qs,
      Zs,
      qn,
      Zn,
      oo,
      er,
      Jn,
      ao,
      Js
    ],
    TAG: [
      Qn,
      eo,
      to,
      no,
      Zn,
      er,
      Jn,
      co,
      zt,
      up
    ],
    SCRIPT: [ro],
    STYLE: [io],
    ATTVALUE: [so]
  }
}, lp = () => {
  const t = [];
  for (const e in tr.modes)
    t.push(...tr.modes[e]);
  return t;
}, hp = new Y(tr);
class uo extends op {
  constructor() {
    super(lp());
    const e = this;
    e.RULE("document", () => {
      e.MANY(() => {
        e.SUBRULE(e.content);
      });
    }), e.RULE("content", () => {
      e.OR([
        { ALT: () => e.CONSUME(Js) },
        { ALT: () => e.CONSUME(qs) },
        { ALT: () => e.SUBRULE(e.element) },
        { ALT: () => e.SUBRULE(e.scriptlet) },
        { ALT: () => e.SUBRULE(e.htmlComment) },
        { ALT: () => e.SUBRULE(e.htmlConditionalComment) },
        { ALT: () => e.SUBRULE(e.cdata) },
        { ALT: () => e.SUBRULE(e.dtd) },
        { ALT: () => e.SUBRULE(e.scriptElement) },
        { ALT: () => e.SUBRULE(e.styleElement) },
        { ALT: () => e.SUBRULE(e.edgeComment) },
        { ALT: () => e.SUBRULE(e.edgeSafeMustache) },
        { ALT: () => e.SUBRULE(e.edgeMustache) },
        { ALT: () => e.SUBRULE(e.edgeEscapedMustache) },
        { ALT: () => e.SUBRULE(e.edgeTag) }
      ]);
    }), e.RULE("element", () => {
      e.OR([
        {
          ALT: () => e.SUBRULE(e.openingTag)
        },
        {
          ALT: () => e.SUBRULE(e.closingTag)
        }
      ]);
    }), e.RULE("openingTag", () => {
      e.CONSUME(qn), e.CONSUME(zt), e.MANY(() => {
        e.OR([
          { ALT: () => e.SUBRULE(e.edgeTagProp) },
          { ALT: () => e.SUBRULE(e.attribute) },
          { ALT: () => e.SUBRULE(e.edgeSafeMustache) },
          { ALT: () => e.SUBRULE(e.edgeMustache) },
          { ALT: () => e.SUBRULE(e.edgeComment) }
        ]);
      }), e.OR1([
        { ALT: () => e.CONSUME1(eo) },
        { ALT: () => e.CONSUME1(Qn) }
      ]);
    }), e.RULE("attribute", () => {
      e.CONSUME(zt), e.OPTION(() => {
        e.CONSUME(no), e.CONSUME(so);
      });
    }), e.RULE("closingTag", () => {
      e.CONSUME(qn), e.CONSUME(to), e.CONSUME(zt), e.CONSUME(Qn);
    }), e.RULE("scriptlet", () => {
      e.CONSUME(Xs);
    }), e.RULE("htmlComment", () => {
      e.CONSUME(Hs);
    }), e.RULE("htmlConditionalComment", () => {
      e.CONSUME(Ws);
    }), e.RULE("cdata", () => {
      e.CONSUME(zs);
    }), e.RULE("dtd", () => {
      e.CONSUME(Ys);
    }), e.RULE("scriptElement", () => {
      e.CONSUME(Qs), e.CONSUME(ro);
    }), e.RULE("styleElement", () => {
      e.CONSUME(Zs), e.CONSUME(io);
    }), e.RULE("edgeComment", () => {
      e.CONSUME(Zn);
    }), e.RULE("edgeMustache", () => {
      e.CONSUME(Jn);
    }), e.RULE("edgeSafeMustache", () => {
      e.CONSUME(er);
    }), e.RULE("edgeEscapedMustache", () => {
      e.CONSUME(oo);
    }), e.RULE("edgeTag", () => {
      e.CONSUME(ao);
    }), e.RULE("edgeTagProp", () => {
      e.CONSUME(co);
    }), this.performSelfAnalysis();
  }
}
const fp = new uo(), dp = fp.getBaseCstVisitorConstructor();
class pp extends dp {
  #t = /* @__PURE__ */ new Set([
    "area",
    "base",
    "br",
    "col",
    "embed",
    "hr",
    "img",
    "input",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr",
    // Below are for SVGs
    "animateMotion",
    "animateTransform",
    "animate",
    "circle",
    "ellipse",
    "feGaussianBlur",
    "feDropShadow",
    "feOffset",
    "feBlend",
    "feColorMatrix",
    "feComposite",
    "feDisplacementMap",
    "feFlood",
    "feImage",
    "feMergeNode",
    "feMorphology",
    "fePointLight",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "image",
    "line",
    "mpath",
    "path",
    "polygon",
    "polyline",
    "rect",
    "set",
    "stop",
    "use",
    "view"
  ]);
  constructor() {
    super(), this.validateVisitor();
  }
  #e(e) {
    return this.#t.has(e);
  }
  document(e) {
    const n = e.content[0].startOffset, r = e.content[e.content.length - 1].endOffset;
    return {
      type: "document",
      children: e.content.map((i) => this.visit(i)),
      start: n,
      end: r
    };
  }
  content(e) {
    if (e.HTML_TEXT)
      return {
        type: "htmlText",
        value: e.HTML_TEXT[0].image,
        start: e.HTML_TEXT[0].startOffset,
        end: e.HTML_TEXT[0].endOffset
      };
    if (e.LINE_BREAK)
      return {
        type: "linebreak",
        value: e.LINE_BREAK[0].image,
        start: e.LINE_BREAK[0].startOffset,
        end: e.LINE_BREAK[0].endOffset
      };
    const n = e.element || e.scriptlet || e.htmlComment || e.htmlConditionalComment || e.cdata || e.dtd || e.scriptElement || e.styleElement || e.edgeComment || e.edgeMustache || e.edgeSafeMustache || e.edgeEscapedMustache || e.edgeTag || e.htmlText;
    return this.visit(n);
  }
  element(e) {
    return e.openingTag ? this.visit(e.openingTag) : e.selfClosingTag ? this.visit(e.selfClosingTag) : this.visit(e.closingTag);
  }
  openingTag(e) {
    const n = e.TAG_NAME[0].image, r = e.edgeSafeMustache ? e.edgeSafeMustache.map((l) => this.visit(l)) : [], i = e.edgeMustache ? e.edgeMustache.map((l) => this.visit(l)) : [], s = e.edgeTagProp ? e.edgeTagProp.map((l) => this.visit(l)) : [], o = e.attribute ? e.attribute.map((l) => this.visit(l)) : [], a = e.edgeComment ? e.edgeComment.map((l) => this.visit(l)) : [], c = e.TAG_NAME[0].startOffset, u = e.TAG_NAME[0].endOffset;
    return this.#e(n) || e.TAG_SLASH_CLOSE ? {
      type: "voidTag",
      tagName: n,
      edgeSafeMustaches: r,
      edgeMustaches: i,
      edgeTagProps: s,
      attributes: o,
      comments: a,
      start: c,
      end: u
    } : {
      type: "openingTag",
      tagName: n,
      edgeSafeMustaches: r,
      edgeMustaches: i,
      edgeTagProps: s,
      attributes: o,
      comments: a,
      start: c,
      end: u
    };
  }
  attribute(e) {
    const n = e.TAG_NAME[0].image, r = e.ATTVALUE_VALUE?.[0]?.image?.trim(), i = e.TAG_NAME[0].startOffset, s = e.ATTVALUE_VALUE ? e.ATTVALUE_VALUE[0].endOffset : e.TAG_NAME[0].endOffset;
    return { type: "attribute", attributeName: n, attributeValue: r, start: i, end: s };
  }
  closingTag(e) {
    const n = e.TAG_NAME[0].image, r = e.TAG_OPEN[0].startOffset, i = e.TAG_CLOSE[0].endOffset;
    return this.#e(n) ? {
      type: "doNotPrint"
    } : { type: "closingTag", tagName: n, start: r, end: i };
  }
  scriptlet(e) {
    const n = e.SCRIPTLET[0].image, r = e.SCRIPTLET[0].startOffset, i = e.SCRIPTLET[0].endOffset;
    return { type: "scriptlet", value: n, start: r, end: i };
  }
  htmlComment(e) {
    const n = e.HTML_COMMENT[0].image, r = e.HTML_COMMENT[0].startOffset, i = e.HTML_COMMENT[0].endOffset;
    return { type: "htmlComment", value: n, start: r, end: i };
  }
  htmlConditionalComment(e) {
    const n = e.HTML_CONDITIONAL_COMMENT[0].image, r = e.HTML_CONDITIONAL_COMMENT[0].startOffset, i = e.HTML_CONDITIONAL_COMMENT[0].endOffset;
    return { type: "htmlConditionalComment", value: n, start: r, end: i };
  }
  cdata(e) {
    const n = e.CDATA[0].image, r = e.CDATA[0].startOffset, i = e.CDATA[0].endOffset;
    return { type: "cdata", value: n, start: r, end: i };
  }
  dtd(e) {
    const n = e.DTD[0].image, r = e.DTD[0].startOffset, i = e.DTD[0].endOffset;
    return { type: "dtd", value: n, start: r, end: i };
  }
  scriptElement(e) {
    const n = e.SCRIPT_OPEN[0].image + e.SCRIPT_BODY[0].image, r = e.SCRIPT_OPEN[0].startOffset, i = e.SCRIPT_BODY[0].endOffset;
    return { type: "scriptElement", value: n, start: r, end: i };
  }
  styleElement(e) {
    const n = e.STYLE_OPEN[0].image + e.STYLE_BODY[0].image, r = e.STYLE_OPEN[0].startOffset, i = e.STYLE_BODY[0].endOffset;
    return { type: "styleElement", value: n, start: r, end: i };
  }
  edgeComment(e) {
    const n = e.EDGE_COMMENT[0].image, r = e.EDGE_COMMENT[0].startOffset, i = e.EDGE_COMMENT[0].endOffset;
    return { type: "edgeComment", value: n, start: r, end: i };
  }
  edgeMustache(e) {
    const n = e.EDGE_MUSTACHE[0].image, r = e.EDGE_MUSTACHE[0].startOffset, i = e.EDGE_MUSTACHE[0].endOffset;
    return { type: "edgeMustache", value: n, start: r, end: i };
  }
  edgeSafeMustache(e) {
    const n = e.EDGE_SAFE_MUSTACHE[0].image, r = e.EDGE_SAFE_MUSTACHE[0].startOffset, i = e.EDGE_SAFE_MUSTACHE[0].endOffset;
    return { type: "edgeSafeMustache", value: n, start: r, end: i };
  }
  edgeEscapedMustache(e) {
    const n = e.EDGE_ESCAPED_MUSTACHE[0].image, r = e.EDGE_ESCAPED_MUSTACHE[0].startOffset, i = e.EDGE_ESCAPED_MUSTACHE[0].endOffset;
    return { type: "edgeEscapedMustache", value: n, start: r, end: i };
  }
  edgeTag(e) {
    const n = e.EDGE_TAG[0].image, r = e.EDGE_TAG[0].startOffset, i = e.EDGE_TAG[0].endOffset;
    return { type: "edgeTag", value: n, start: r, end: i };
  }
  edgeTagProp(e) {
    const n = e.EDGE_TAG_PROP[0].image, r = e.EDGE_TAG_PROP[0].startOffset, i = e.EDGE_TAG_PROP[0].endOffset;
    return { type: "edgeTagProp", value: n, start: r, end: i };
  }
}
const jt = new uo(), mp = new pp();
function Nr(t) {
  const e = hp.tokenize(t);
  jt.input = e.tokens;
  const n = jt.document();
  if (jt.errors.length > 0)
    throw new Error(
      `Parsing Errors Detected: ${JSON.stringify(jt.errors)}`
    );
  return mp.visit(n);
}
function lo(t) {
  Object.defineProperty(t, "__esModule", { value: !0, configurable: !0 });
}
function Lr(t, e, n, r) {
  Object.defineProperty(t, e, { get: n, set: r, enumerable: !0, configurable: !0 });
}
var ho = {};
lo(ho);
Lr(ho, "default", () => fo);
class fo extends Error {
  constructor(e, n, r, i, s) {
    super(e + ":" + r + ":" + i + ": " + n), this.reason = n, this.filename = e, this.line = r, this.column = i, this.source = s;
  }
}
var po = {};
lo(po);
Lr(po, "default", () => mo);
class mo {
  constructor(e, n, r) {
    this.start = e, this.end = n, this.source = r;
  }
}
var gp = {};
Lr(gp, "CssTypes", () => C);
var C = /* @__PURE__ */ function(t) {
  return t.stylesheet = "stylesheet", t.rule = "rule", t.declaration = "declaration", t.comment = "comment", t.container = "container", t.charset = "charset", t.document = "document", t.customMedia = "custom-media", t.fontFace = "font-face", t.host = "host", t.import = "import", t.keyframes = "keyframes", t.keyframe = "keyframe", t.layer = "layer", t.media = "media", t.namespace = "namespace", t.page = "page", t.startingStyle = "starting-style", t.supports = "supports", t;
}({});
const go = 1e4, Pi = (t, e, n) => {
  let r = n, i = go;
  do {
    const s = e.map((c) => t.indexOf(c, r));
    s.push(t.indexOf("\\", r));
    const o = s.filter((c) => c !== -1);
    if (o.length === 0) return -1;
    const a = Math.min(...o);
    if (t[a] === "\\")
      r = a + 2, i--;
    else return a;
  } while (i > 0);
  throw new Error("Too many escaping");
}, kr = (t, e, n) => {
  let r = n, i = go;
  do {
    const s = e.map((u) => t.indexOf(u, r));
    s.push(t.indexOf("(", r)), s.push(t.indexOf('"', r)), s.push(t.indexOf("'", r)), s.push(t.indexOf("\\", r));
    const o = s.filter((u) => u !== -1);
    if (o.length === 0) return -1;
    const a = Math.min(...o);
    switch (t[a]) {
      case "\\":
        r = a + 2;
        break;
      case "(":
        {
          const u = kr(t, [
            ")"
          ], a + 1);
          if (u === -1) return -1;
          r = u + 1;
        }
        break;
      case '"':
        {
          const u = Pi(t, [
            '"'
          ], a + 1);
          if (u === -1) return -1;
          r = u + 1;
        }
        break;
      case "'":
        {
          const u = Pi(t, [
            "'"
          ], a + 1);
          if (u === -1) return -1;
          r = u + 1;
        }
        break;
      default:
        return a;
    }
    i--;
  } while (i > 0);
  throw new Error("Too many escaping");
}, Ep = (t, e) => {
  const n = [];
  let r = 0;
  for (; r < t.length; ) {
    const i = kr(t, e, r);
    if (i === -1)
      return n.push(t.substring(r)), n;
    n.push(t.substring(r, i)), r = i + 1;
  }
  return n;
}, Mn = /\/\*[^]*?(?:\*\/|$)/g, Tp = (t, e) => {
  e = e || {};
  let n = 1, r = 1;
  function i(g) {
    const E = g.match(/\n/g);
    E && (n += E.length);
    const L = g.lastIndexOf(`
`);
    r = ~L ? g.length - L : r + g.length;
  }
  function s() {
    const g = {
      line: n,
      column: r
    };
    return function(E) {
      return E.position = new mo(g, {
        line: n,
        column: r
      }, e?.source || ""), T(), E;
    };
  }
  const o = [];
  function a(g) {
    const E = new fo(e?.source || "", g, n, r, t);
    if (e?.silent) o.push(E);
    else throw E;
  }
  function c() {
    const g = h();
    return {
      type: C.stylesheet,
      stylesheet: {
        source: e?.source,
        rules: g,
        parsingErrors: o
      }
    };
  }
  function u() {
    const g = /^{\s*/.exec(t);
    return g ? (f(g), !0) : !1;
  }
  function l() {
    const g = /^}/.exec(t);
    return g ? (f(g), !0) : !1;
  }
  function h() {
    let g;
    const E = [];
    for (T(), p(E); t.length && t.charAt(0) !== "}" && (g = ze() || Pt()); ) g && (E.push(g), p(E));
    return E;
  }
  function f(g) {
    const E = g[0];
    return i(E), t = t.slice(E.length), g;
  }
  function T() {
    const g = /^\s*/.exec(t);
    g && f(g);
  }
  function p(g) {
    let E;
    for (g = g || []; E = _(); ) E && g.push(E);
    return g;
  }
  function _() {
    const g = s();
    if (t.charAt(0) !== "/" || t.charAt(1) !== "*") return;
    const E = /^\/\*[^]*?\*\//.exec(t);
    return E ? (f(E), g({
      type: C.comment,
      comment: E[0].slice(2, -2)
    })) : a("End of comment missing");
  }
  function O() {
    const g = /^([^{]+)/.exec(t);
    if (!g) return;
    f(g);
    const E = se(g[0]).replace(Mn, "");
    return Ep(E, [
      ","
    ]).map((L) => se(L));
  }
  function A() {
    const g = s(), E = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/.exec(t);
    if (!E) return;
    f(E);
    const L = se(E[0]), k = /^:\s*/.exec(t);
    if (!k) return a("property missing ':'");
    f(k);
    let D = "";
    const M = kr(t, [
      ";",
      "}"
    ]);
    M !== -1 && (D = t.substring(0, M), f([
      D
    ]), D = se(D).replace(Mn, ""));
    const G = g({
      type: C.declaration,
      property: L.replace(Mn, ""),
      value: D
    }), Ce = /^[;\s]*/.exec(t);
    return Ce && f(Ce), G;
  }
  function y() {
    const g = [];
    if (!u()) return a("missing '{'");
    p(g);
    let E;
    for (; E = A(); ) E && (g.push(E), p(g));
    return l() ? g : a("missing '}'");
  }
  function d() {
    let g;
    const E = [], L = s();
    for (; g = /^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/.exec(t); ) {
      const k = f(g);
      E.push(k[1]);
      const D = /^,\s*/.exec(t);
      D && f(D);
    }
    if (E.length)
      return L({
        type: C.keyframe,
        values: E,
        declarations: y() || []
      });
  }
  function m() {
    const g = s(), E = /^@([-\w]+)?keyframes\s*/.exec(t);
    if (!E) return;
    const L = f(E)[1], k = /^([-\w]+)\s*/.exec(t);
    if (!k) return a("@keyframes missing name");
    const D = f(k)[1];
    if (!u()) return a("@keyframes missing '{'");
    let M, G = p();
    for (; M = d(); )
      G.push(M), G = G.concat(p());
    return l() ? g({
      type: C.keyframes,
      name: D,
      vendor: L,
      keyframes: G
    }) : a("@keyframes missing '}'");
  }
  function N() {
    const g = s(), E = /^@supports *([^{]+)/.exec(t);
    if (!E) return;
    const L = se(f(E)[1]);
    if (!u()) return a("@supports missing '{'");
    const k = p().concat(h());
    return l() ? g({
      type: C.supports,
      supports: L,
      rules: k
    }) : a("@supports missing '}'");
  }
  function z() {
    const g = s(), E = /^@host\s*/.exec(t);
    if (!E) return;
    if (f(E), !u()) return a("@host missing '{'");
    const L = p().concat(h());
    return l() ? g({
      type: C.host,
      rules: L
    }) : a("@host missing '}'");
  }
  function ie() {
    const g = s(), E = /^@container *([^{]+)/.exec(t);
    if (!E) return;
    const L = se(f(E)[1]);
    if (!u()) return a("@container missing '{'");
    const k = p().concat(h());
    return l() ? g({
      type: C.container,
      container: L,
      rules: k
    }) : a("@container missing '}'");
  }
  function ye() {
    const g = s(), E = /^@layer *([^{;@]+)/.exec(t);
    if (!E) return;
    const L = se(f(E)[1]);
    if (!u()) {
      const D = /^[;\s]*/.exec(t);
      return D && f(D), g({
        type: C.layer,
        layer: L
      });
    }
    const k = p().concat(h());
    return l() ? g({
      type: C.layer,
      layer: L,
      rules: k
    }) : a("@layer missing '}'");
  }
  function Ke() {
    const g = s(), E = /^@media *([^{]+)/.exec(t);
    if (!E) return;
    const L = se(f(E)[1]);
    if (!u()) return a("@media missing '{'");
    const k = p().concat(h());
    return l() ? g({
      type: C.media,
      media: L,
      rules: k
    }) : a("@media missing '}'");
  }
  function Ae() {
    const g = s(), E = /^@custom-media\s+(--\S+)\s+([^{;\s][^{;]*);/.exec(t);
    if (!E) return;
    const L = f(E);
    return g({
      type: C.customMedia,
      name: se(L[1]),
      media: se(L[2])
    });
  }
  function He() {
    const g = s(), E = /^@page */.exec(t);
    if (!E) return;
    f(E);
    const L = O() || [];
    if (!u()) return a("@page missing '{'");
    let k = p(), D;
    for (; D = A(); )
      k.push(D), k = k.concat(p());
    return l() ? g({
      type: C.page,
      selectors: L,
      declarations: k
    }) : a("@page missing '}'");
  }
  function Rn() {
    const g = s(), E = /^@([-\w]+)?document *([^{]+)/.exec(t);
    if (!E) return;
    const L = f(E), k = se(L[1]), D = se(L[2]);
    if (!u()) return a("@document missing '{'");
    const M = p().concat(h());
    return l() ? g({
      type: C.document,
      document: D,
      vendor: k,
      rules: M
    }) : a("@document missing '}'");
  }
  function dt() {
    const g = s(), E = /^@font-face\s*/.exec(t);
    if (!E) return;
    if (f(E), !u()) return a("@font-face missing '{'");
    let L = p(), k;
    for (; k = A(); )
      L.push(k), L = L.concat(p());
    return l() ? g({
      type: C.fontFace,
      declarations: L
    }) : a("@font-face missing '}'");
  }
  function nt() {
    const g = s(), E = /^@starting-style\s*/.exec(t);
    if (!E) return;
    if (f(E), !u()) return a("@starting-style missing '{'");
    const L = p().concat(h());
    return l() ? g({
      type: C.startingStyle,
      rules: L
    }) : a("@starting-style missing '}'");
  }
  const _e = it("import"), We = it("charset"), rt = it("namespace");
  function it(g) {
    const E = new RegExp("^@" + g + `\\s*((?::?[^;'"]|"(?:\\\\"|[^"])*?"|'(?:\\\\'|[^'])*?')+)(?:;|$)`);
    return function() {
      const L = s(), k = E.exec(t);
      if (!k) return;
      const D = f(k), M = {
        type: g
      };
      return M[g] = D[1].trim(), L(M);
    };
  }
  function ze() {
    if (t[0] === "@")
      return m() || Ke() || Ae() || N() || _e() || We() || rt() || Rn() || He() || z() || dt() || ie() || nt() || ye();
  }
  function Pt() {
    const g = s(), E = O();
    return E ? (p(), g({
      type: C.rule,
      selectors: E,
      declarations: y() || []
    })) : a("selector missing");
  }
  return nr(c());
};
function se(t) {
  return t ? t.trim() : "";
}
function nr(t, e) {
  const n = t && typeof t.type == "string", r = n ? t : e;
  for (const i in t) {
    const s = t[i];
    Array.isArray(s) ? s.forEach((o) => {
      nr(o, r);
    }) : s && typeof s == "object" && nr(s, r);
  }
  return n && Object.defineProperty(t, "parent", {
    configurable: !0,
    writable: !0,
    enumerable: !1,
    value: e || null
  }), t;
}
var yp = Tp;
class Ap {
  constructor(e) {
    this.level = 0, this.indentation = "  ", this.compress = !1, typeof e?.indent == "string" && (this.indentation = e?.indent), e?.compress && (this.compress = !0);
  }
  // We disable no-unused-vars for _position. We keep position for potential reintroduction of source-map
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  emit(e, n) {
    return e;
  }
  /**
  * Increase, decrease or return current indentation.
  */
  indent(e) {
    return this.level = this.level || 1, e ? (this.level += e, "") : Array(this.level).join(this.indentation);
  }
  visit(e) {
    switch (e.type) {
      case C.stylesheet:
        return this.stylesheet(e);
      case C.rule:
        return this.rule(e);
      case C.declaration:
        return this.declaration(e);
      case C.comment:
        return this.comment(e);
      case C.container:
        return this.container(e);
      case C.charset:
        return this.charset(e);
      case C.document:
        return this.document(e);
      case C.customMedia:
        return this.customMedia(e);
      case C.fontFace:
        return this.fontFace(e);
      case C.host:
        return this.host(e);
      case C.import:
        return this.import(e);
      case C.keyframes:
        return this.keyframes(e);
      case C.keyframe:
        return this.keyframe(e);
      case C.layer:
        return this.layer(e);
      case C.media:
        return this.media(e);
      case C.namespace:
        return this.namespace(e);
      case C.page:
        return this.page(e);
      case C.startingStyle:
        return this.startingStyle(e);
      case C.supports:
        return this.supports(e);
    }
  }
  mapVisit(e, n) {
    let r = "";
    n = n || "";
    for (let i = 0, s = e.length; i < s; i++)
      r += this.visit(e[i]), n && i < s - 1 && (r += this.emit(n));
    return r;
  }
  compile(e) {
    return this.compress ? e.stylesheet.rules.map(this.visit, this).join("") : this.stylesheet(e);
  }
  /**
  * Visit stylesheet node.
  */
  stylesheet(e) {
    return this.mapVisit(e.stylesheet.rules, `

`);
  }
  /**
  * Visit comment node.
  */
  comment(e) {
    return this.compress ? this.emit("", e.position) : this.emit(this.indent() + "/*" + e.comment + "*/", e.position);
  }
  /**
  * Visit container node.
  */
  container(e) {
    return this.compress ? this.emit("@container " + e.container, e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(this.indent() + "@container " + e.container, e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}");
  }
  /**
  * Visit container node.
  */
  layer(e) {
    return this.compress ? this.emit("@layer " + e.layer, e.position) + (e.rules ? this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : ";") : this.emit(this.indent() + "@layer " + e.layer, e.position) + (e.rules ? this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}") : ";");
  }
  /**
  * Visit import node.
  */
  import(e) {
    return this.emit("@import " + e.import + ";", e.position);
  }
  /**
  * Visit media node.
  */
  media(e) {
    return this.compress ? this.emit("@media " + e.media, e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(this.indent() + "@media " + e.media, e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}");
  }
  /**
  * Visit document node.
  */
  document(e) {
    const n = "@" + (e.vendor || "") + "document " + e.document;
    return this.compress ? this.emit(n, e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(n, e.position) + this.emit(`  {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(this.indent(-1) + `
}`);
  }
  /**
  * Visit charset node.
  */
  charset(e) {
    return this.emit("@charset " + e.charset + ";", e.position);
  }
  /**
  * Visit namespace node.
  */
  namespace(e) {
    return this.emit("@namespace " + e.namespace + ";", e.position);
  }
  /**
  * Visit container node.
  */
  startingStyle(e) {
    return this.compress ? this.emit("@starting-style", e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(this.indent() + "@starting-style", e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}");
  }
  /**
  * Visit supports node.
  */
  supports(e) {
    return this.compress ? this.emit("@supports " + e.supports, e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit(this.indent() + "@supports " + e.supports, e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(`
` + this.indent(-1) + this.indent() + "}");
  }
  /**
  * Visit keyframes node.
  */
  keyframes(e) {
    return this.compress ? this.emit("@" + (e.vendor || "") + "keyframes " + e.name, e.position) + this.emit("{") + this.mapVisit(e.keyframes) + this.emit("}") : this.emit("@" + (e.vendor || "") + "keyframes " + e.name, e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.keyframes, `
`) + this.emit(this.indent(-1) + "}");
  }
  /**
  * Visit keyframe node.
  */
  keyframe(e) {
    const n = e.declarations;
    return this.compress ? this.emit(e.values.join(","), e.position) + this.emit("{") + this.mapVisit(n) + this.emit("}") : this.emit(this.indent()) + this.emit(e.values.join(", "), e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(n, `
`) + this.emit(this.indent(-1) + `
` + this.indent() + `}
`);
  }
  /**
  * Visit page node.
  */
  page(e) {
    if (this.compress) {
      const r = e.selectors.length ? e.selectors.join(", ") : "";
      return this.emit("@page " + r, e.position) + this.emit("{") + this.mapVisit(e.declarations) + this.emit("}");
    }
    const n = e.selectors.length ? e.selectors.join(", ") + " " : "";
    return this.emit("@page " + n, e.position) + this.emit(`{
`) + this.emit(this.indent(1)) + this.mapVisit(e.declarations, `
`) + this.emit(this.indent(-1)) + this.emit(`
}`);
  }
  /**
  * Visit font-face node.
  */
  fontFace(e) {
    return this.compress ? this.emit("@font-face", e.position) + this.emit("{") + this.mapVisit(e.declarations) + this.emit("}") : this.emit("@font-face ", e.position) + this.emit(`{
`) + this.emit(this.indent(1)) + this.mapVisit(e.declarations, `
`) + this.emit(this.indent(-1)) + this.emit(`
}`);
  }
  /**
  * Visit host node.
  */
  host(e) {
    return this.compress ? this.emit("@host", e.position) + this.emit("{") + this.mapVisit(e.rules) + this.emit("}") : this.emit("@host", e.position) + this.emit(` {
` + this.indent(1)) + this.mapVisit(e.rules, `

`) + this.emit(this.indent(-1) + `
}`);
  }
  /**
  * Visit custom-media node.
  */
  customMedia(e) {
    return this.emit("@custom-media " + e.name + " " + e.media + ";", e.position);
  }
  /**
  * Visit rule node.
  */
  rule(e) {
    const n = e.declarations;
    if (!n.length) return "";
    if (this.compress) return this.emit(e.selectors.join(","), e.position) + this.emit("{") + this.mapVisit(n) + this.emit("}");
    const r = this.indent();
    return this.emit(e.selectors.map((i) => r + i).join(`,
`), e.position) + this.emit(` {
`) + this.emit(this.indent(1)) + this.mapVisit(n, `
`) + this.emit(this.indent(-1)) + this.emit(`
` + this.indent() + "}");
  }
  /**
  * Visit declaration node.
  */
  declaration(e) {
    return this.compress ? this.emit(e.property + ":" + e.value, e.position) + this.emit(";") : e.property === "grid-template-areas" ? this.emit(this.indent()) + this.emit(e.property + ": " + e.value.split(`
`).join(`
`.padEnd(22) + this.indent()), e.position) + this.emit(";") : this.emit(this.indent()) + this.emit(e.property + ": " + e.value, e.position) + this.emit(";");
  }
}
var _p = Ap, vp = (t, e) => new _p(e || {}).compile(t);
const Rp = yp, Op = vp;
var wi = {
  parse: Rp,
  stringify: Op
};
const Ip = 2;
let Pn = 0;
function Sp(t) {
  return t.type !== "linebreak" ? (Pn = 0, !0) : (Pn++, Pn <= Ip);
}
function Np(t) {
  return t.replace(/{{--(?![\s\n\r\t])/g, "{{-- ").replace(new RegExp("(?<![\\s\\n\\r\\t])--}}", "g"), " --}}");
}
function wn(t) {
  const e = /{{{[^{}]*}}}/g, n = "__TRIPLE_CURLY__", r = [];
  return t = t.replace(e, (i) => {
    const s = `${n}${r.length}`;
    return r.push(i), s;
  }), t = t.replace(/{{\s*/g, "{{ ").replace(/\s*}}/g, " }}"), r.forEach((i, s) => {
    t = t.replace(`${n}${s}`, i);
  }), t;
}
function Un(t) {
  return t.replace(/{{{\s*/g, "{{{ ").replace(/\s*}}}/g, " }}}");
}
function Lp(t, e, n, r, i, s) {
  const o = /<style\b[^>]*>([\s\S]*?)<\/style>/gi, a = /{{.*?}}/g, c = /{{{.*?}}}/g, u = /@(?!media|keyframes|supports|font-face|viewport|counter-style|page|document|font-feature-values)(?:!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?[\s\S]*?@end/g, l = /@(assign|!component|debugger|eval|include|includeIf|inject|stack|svg|let|newError|vite|inertia|dd|dump)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/g;
  return t.value.replace(o, (f, T) => {
    let p = [], _ = 0;
    T = T.replace(
      c,
      (d) => {
        const m = `__SAFE_MUSTACHE_TAG_${_++}__;`;
        return p.push(d), m;
      }
    ), T = T.replace(
      a,
      (d) => {
        const m = `__MUSTACHE_TAG_${_++}__;`;
        return p.push(d), m;
      }
    ), T = T.replace(
      u,
      (d) => {
        const m = `/*__EDGE_TAG_BLOCK_${_++}__*/`;
        return p.push(d), m;
      }
    ), T = T.replace(
      l,
      (d) => {
        const m = `/*__SINGLE_EDGE_TAG_${_++}__*/`;
        return p.push(d), m;
      }
    );
    const O = wi.parse(T), A = wi.stringify(O, { indent: r });
    return `${e}<style>
${A.split(`
`).map((d) => `${n}${d}`).join(`
`)}
${e}</style>`.replace(/\/\*__EDGE_TAG_BLOCK_\d+__\*\//g, (d) => {
      const m = p[parseInt(d.match(/\d+/)[0], 10)], N = new Nr(m);
      return new Cr(
        {
          ...i
        },
        s + 2
      ).handlePrint(N).trim();
    }).replace(/__MUSTACHE_TAG_\d+__;/g, (d) => p[parseInt(d.match(/\d+/)[0], 10)]).replace(/__SAFE_MUSTACHE_TAG_\d+__;/g, (d) => p[parseInt(d.match(/\d+/)[0], 10)]).replace(/\/\*__SINGLE_EDGE_TAG_\d+__\*\//g, (d) => p[parseInt(d.match(/\d+/)[0], 10)]);
  });
}
function kp(t, e, n, r, i, s) {
  const o = /<script\b([^>]*)>([\s\S]*?)<\/script>/i, a = /{{.*?}}/g, c = /{{{.*?}}}/g, u = /@(!?\w+(?:\.\w+)*)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?[\s\S]*?@end/g, l = /@(assign|!component|debugger|eval|include|includeIf|inject|stack|svg|let|newError|vite|inertia|dd|dump)\s*(?:\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\))?/g, h = t.value.match(o);
  if (!h)
    throw new Error("Invalid <script> tag format");
  const [f, T, p] = h;
  let _ = [], O = 0, A = p.replace(c, (m) => {
    const N = `__SAFE_MUSTACHE_TAG_${O++}__`;
    return _.push(m), N;
  }).replace(a, (m) => {
    const N = `__MUSTACHE_TAG_${O++}__`;
    return _.push(m), N;
  }).replace(u, (m) => {
    const N = `/*__EDGE_TAG_BLOCK_${O++}__*/`;
    return _.push(m), N;
  }).replace(l, (m) => {
    const N = `/*__SINGLE_EDGE_TAG_${O++}__*/`;
    return _.push(m), N;
  });
  const y = To.minify(
    {
      "file1.js": A
    },
    {
      compress: !1,
      keep_fnames: !0,
      mangle: !1,
      output: {
        beautify: !0,
        comments: "all",
        indent_level: e
      }
    }
  );
  if (y.error)
    throw new Error(JSON.stringify(y.error));
  const d = y.code.replace(/\/\*__EDGE_TAG_BLOCK_\d+__\*\//g, (m) => {
    const N = parseInt(m.match(/\d+/)[0], 10), z = _[N], ie = new Nr(z);
    return new Cr(
      {
        ...i
      },
      0
    ).handlePrint(ie);
  }).replace(/\/\*__SINGLE_EDGE_TAG_\d+__\*\//g, (m) => {
    const N = parseInt(m.match(/\d+/)[0], 10);
    return _[N];
  }).replace(/__SAFE_MUSTACHE_TAG_\d+__/g, (m) => {
    const N = parseInt(m.match(/\d+/)[0], 10);
    return _[N];
  }).replace(/__MUSTACHE_TAG_\d+__/g, (m) => {
    const N = parseInt(m.match(/\d+/)[0], 10);
    return _[N];
  });
  return `${n}<script${T}>
${d.split(`
`).map((m) => `${r}${m}`).join(`
`)}
${n}<\/script>`;
}
function Eo(t) {
  const e = t.match(/^\s*/);
  return e ? e[0].length : 0;
}
function Cp(t, e, n) {
  return `${e}${t.value.split(`
`).map((r, i) => {
    if (i === 0)
      return `${r.trim()}`;
    if (i === t.value.split(`
`).length - 1)
      return `${e}${r.trim()}`;
    const s = Eo(r);
    return `${" ".repeat(Math.max(e.length, s))}${r.trim()}`;
  }).join(`
`).replace(/[^\S\r\n]+$/g, "")}${n ? `
` : ""}`;
}
class Cr {
  options;
  level;
  skipLevelOverride;
  useTabs;
  printWidth;
  tabWidth;
  singleAttributePerLine;
  inlineTags = /* @__PURE__ */ new Set([
    "a",
    "abbr",
    "acronym",
    "b",
    "bdi",
    "bdo",
    "big",
    "br",
    "button",
    "cite",
    "code",
    "data",
    "dfn",
    "em",
    "i",
    "img",
    "input",
    "kbd",
    "label",
    "mark",
    "meter",
    "q",
    "ruby",
    "rp",
    "rt",
    "s",
    "samp",
    "select",
    "small",
    "span",
    "strong",
    "sub",
    "sup",
    "textarea",
    "time",
    "u",
    "var",
    "wbr",
    "feFuncR",
    "feFuncG",
    "feFuncB",
    "feFuncA"
  ]);
  constructor(e, n = void 0) {
    this.options = e, this.level = n ?? 0, this.skipLevelOverride = !!n, this.useTabs = e.useTabs ?? !1, this.printWidth = e.printWidth ?? 80, this.tabWidth = e.tabWidth ?? 4, this.singleAttributePerLine = e.singleAttributePerLine ?? !1;
  }
  isInlineTag(e) {
    return this.inlineTags.has(e);
  }
  getIndent(e, n = "none") {
    const r = e !== void 0 ? Math.max(e, 0) : this.level;
    return this.adjustIndentLevel(n), `${this.useTabs ? "	" : " ".repeat(this.tabWidth * r)}`;
  }
  adjustIndentLevel(e) {
    e === "increase" ? this.level++ : e === "decrease" && this.level--;
  }
  formatMultilineValue(e, n, r = !0) {
    return e.split(`
`).map((i, s, o) => {
      if (s === 0)
        return `${r ? n : ""}${i.trim()}`;
      if (s === o.length - 1) return `${n}${i.trim()}`;
      const a = Eo(i);
      return `${" ".repeat(Math.max(n.length, a))}${i.trim()}`;
    }).join(`
`);
  }
  formatAttributes(e, n = "") {
    return e.map(
      (r) => r.attributeValue ? `${n}${r.attributeName}=${Un(wn(r.attributeValue)).trim()}` : `${n}${r.attributeName.trim()}`
    ).join(n ? `
` : " ");
  }
  formatEdgeSafeMustacheProps(e, n = "") {
    return e.map(
      (r) => `${n}${Un(r.value).trim()}`
    ).join(n ? `
` : " ");
  }
  formatEdgeMustacheProps(e, n = "") {
    return e.map((r) => `${n}${wn(r.value).trim()}`).join(n ? `
` : " ");
  }
  formatEdgeTagProps(e, n = "") {
    return e.map((r) => `${n}${r.value.trim()}`).join(n ? `
` : " ");
  }
  formatComments(e, n = "") {
    return e.map((r) => `${n}${r.value}`).join(n ? `
` : " ");
  }
  printDocumentNode(e) {
    return this.skipLevelOverride || (this.level = 0), e.children.filter(Sp).map(
      (n, r, i) => this.handlePrint(n, i[r - 1], i[r + 1])
    ).join("");
  }
  printDTDNode(e) {
    return `${this.getIndent()}${e.value}`;
  }
  printStandardNode(e) {
    const n = e.type === "scriptlet";
    return this.formatMultilineValue(
      e.value,
      n ? "" : this.getIndent()
    );
  }
  printScriptElementNode(e) {
    return kp(
      e,
      this.tabWidth,
      this.getIndent(),
      this.getIndent(this.level + 1),
      this.options,
      this.level
    );
  }
  printStyleElementNode(e) {
    return Lp(
      e,
      this.getIndent(),
      this.getIndent(this.level + 1),
      this.getIndent(1),
      this.options,
      this.level
    );
  }
  printEdgeComment(e) {
    return this.formatMultilineValue(
      Np(e.value.trim()),
      this.getIndent()
    );
  }
  printEdgeMustacheNode(e, n, r) {
    const i = !(n?.type === "htmlText" || n?.type === "edgeMustache" || n?.type === "edgeEscapedMustache" || n?.type === "edgeSafeMustache" || (n?.type === "openingTag" || n?.type === "voidTag" || n?.type === "closingTag") && this.isInlineTag(n.tagName)), s = !(r?.type === "htmlText" || r?.type === "edgeMustache" || r?.type === "edgeEscapedMustache" || r?.type === "edgeSafeMustache" || (r?.type === "openingTag" || r?.type === "voidTag" || r?.type === "closingTag") && this.isInlineTag(r.tagName));
    let o = `${i ? this.getIndent() : ""}`;
    const a = e.type === "edgeSafeMustache" ? Un(e.value) : wn(e.value);
    return o += s ? a.replace(/[\r\n]+/g, "").trimEnd() + `
` : a, o;
  }
  printOpeningNode(e, n, r) {
    let i = this.formatAttributes(e.attributes), s = this.formatEdgeTagProps(e.edgeTagProps), o = this.formatEdgeSafeMustacheProps(
      e.edgeSafeMustaches
    ), a = this.formatEdgeMustacheProps(e.edgeMustaches), c = this.formatComments(e.comments);
    const u = `${i} ${o} ${a} ${s} ${c}`.length, l = this.getIndent(this.level + 1), h = this.getIndent(
      void 0,
      e.type === "openingTag" ? "increase" : "none"
    ), f = this.getIndent(
      e.type === "openingTag" ? this.level - 1 : this.level
    ), T = !this.isInlineTag(e.tagName) && r?.type !== "linebreak", p = !((n?.type === "htmlText" || n?.type === "edgeMustache" || n?.type === "edgeEscapedMustache" || n?.type === "edgeSafeMustache") && this.isInlineTag(e.tagName));
    if (u > this.printWidth || this.singleAttributePerLine) {
      const O = e.type == "voidTag" ? "/>" : ">";
      i = this.formatAttributes(e.attributes, l), s = this.formatEdgeTagProps(e.edgeTagProps, l), o = this.formatEdgeSafeMustacheProps(
        e.edgeSafeMustaches,
        l
      ), a = this.formatEdgeMustacheProps(
        e.edgeMustaches,
        l
      ), c = this.formatComments(e.comments, l);
      const A = u - 2 > 0 ? `
${f}` : "";
      return `${p ? h : ""}<${e.tagName}${i ? `
${i}` : ""}${a ? `
${a}` : ""}${o ? `
${o}` : ""}${s ? `
${this.formatMultilineValue(s, l)}` : ""}${c ? `
${this.formatMultilineValue(c, l)}` : ""}${A}${O}${T ? `
` : ""}`;
    }
    const _ = e.type == "voidTag" ? " />" : ">";
    return `${p ? h : ""}<${e.tagName}${i ? ` ${i}` : ""}${a ? ` ${a}` : ""}${o ? ` ${o}` : ""}${s ? ` ${this.formatMultilineValue(s, "")}` : ""}${c ? ` ${this.formatMultilineValue(c, "")}` : ""}${_}${T ? `
` : ""}`;
  }
  printClosingNode(e, n, r) {
    const i = !this.isInlineTag(e.tagName) || n?.type === "linebreak" || n?.type === "edgeTag", s = n?.type !== "linebreak" && n?.type === "closingTag" && this.isInlineTag(n.tagName) && !this.isInlineTag(e.tagName), o = !this.isInlineTag(e.tagName) && r?.type !== "linebreak" && !((r?.type === "openingTag" || r?.type === "voidTag" || r?.type === "closingTag") && this.isInlineTag(r.tagName));
    return `${s ? `
` : ""}${i ? this.getIndent(this.level - 1, "decrease") : this.getIndent(0, "decrease")}</${e.tagName}>${o ? `
` : ""}`;
  }
  printEdgeTagNode(e, n) {
    let r = "none", i = this.level;
    e.value.includes("@end") ? (r = "decrease", i--) : e.value.includes("@else") ? i-- : e.value.includes("@!") || e.value.includes("@let") || e.value.includes("@svg") || e.value.includes("@assign") || e.value.includes("@inject") || e.value.includes("@eval") || e.value.includes("@debugger") || e.value.includes("@newError") || e.value.includes("@vite") || e.value.includes("@inertia") || e.value.includes("@stack") || e.value.includes("@dd") || e.value.includes("@dump") || e.value.match(/^@include\(.*/)?.length || e.value.match(/^@includeIf\(.*/)?.length || !e.value.includes("(") ? r = "none" : r = "increase";
    const s = n?.type !== "linebreak" && !e.value.includes(`
`);
    return Cp(
      e,
      this.getIndent(i, r),
      s
    );
  }
  printHtmlTextNode(e, n, r) {
    const i = !(n?.type === "scriptlet" || n?.type === "edgeMustache" || n?.type === "edgeSafeMustache" || n?.type === "edgeEscapedMustache" || (n?.type === "openingTag" || n?.type === "voidTag" || n?.type === "closingTag") && this.isInlineTag(n.tagName)), s = !(r?.type === "edgeMustache" || r?.type === "edgeSafeMustache" || r?.type === "edgeEscapedMustache" || r?.type === "htmlText" || (r?.type === "openingTag" || r?.type === "voidTag" || r?.type === "closingTag") && this.isInlineTag(r.tagName) || r?.type === "scriptlet"), o = i ? this.getIndent() + e.value : e.value;
    return s ? `${o.trimEnd()}
` : o;
  }
  printLineBreak(e) {
    return e.value;
  }
  handlePrint(e, n = void 0, r = void 0) {
    switch (e.type) {
      case "document":
        return this.printDocumentNode(e);
      case "dtd":
        return this.printDTDNode(e);
      case "htmlComment":
      case "htmlConditionalComment":
      case "cdata":
      case "scriptlet":
        return this.printStandardNode(e);
      case "scriptElement":
        return this.printScriptElementNode(e);
      case "styleElement":
        return this.printStyleElementNode(e);
      case "edgeComment":
        return this.printEdgeComment(e);
      case "edgeMustache":
      case "edgeEscapedMustache":
      case "edgeSafeMustache":
        return this.printEdgeMustacheNode(e, n, r);
      case "openingTag":
      case "voidTag":
        return this.printOpeningNode(e, n, r);
      case "closingTag":
        return this.printClosingNode(e, n, r);
      case "edgeTag":
        return this.printEdgeTagNode(e, r);
      case "htmlText":
        return this.printHtmlTextNode(e, n, r);
      case "linebreak":
        return this.printLineBreak(e);
      default:
        return "";
    }
  }
}
function bp(t, e) {
  const n = t.getNode();
  return new Cr(e).handlePrint(n);
}
const Mp = [
  {
    name: "EdgeJS",
    parsers: ["edgejs"],
    extensions: [".edge"],
    tmScope: "text.html.edge",
    aceMode: "html",
    linguistLanguageId: 460509620,
    vscodeLanguageIds: ["edge"]
  }
], Pp = {
  edgejs: {
    parse(t) {
      return Nr(t);
    },
    astFormat: "edgejs",
    locStart(t) {
      return t.start;
    },
    locEnd(t) {
      return t.end;
    }
  }
}, wp = {
  edgejs: {
    print: bp
  }
}, Up = {
  useTabs: !1,
  tabWidth: 4,
  printWidth: 80,
  singleAttributePerLine: !1
}, Dp = {};
export {
  Up as defaultOptions,
  Mp as languages,
  Dp as options,
  Pp as parsers,
  wp as printers
};
