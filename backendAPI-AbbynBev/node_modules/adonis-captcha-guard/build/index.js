import {
  CaptchaManager
} from "./chunk-L4HLAOFB.js";
import {
  Captcha
} from "./chunk-RSIWGLWZ.js";

// stubs/main.ts
import { joinToURL } from "@poppinss/utils";
var stubsRoot = joinToURL(import.meta.url, "stubs");

// package.json
var package_default = {
  name: "adonis-captcha-guard",
  version: "1.0.1",
  description: "AdonisJS v6 captcha addon",
  main: "build/index.js",
  engines: {
    node: ">=20.6.0"
  },
  type: "module",
  files: [
    "build"
  ],
  exports: {
    ".": "./build/index.js",
    "./types": "./build/src/types.js",
    "./providers/captcha_provider": "./build/providers/captcha_provider.js"
  },
  scripts: {
    build: "npm run compile",
    compile: "tsup-node && tsc --emitDeclarationOnly --declaration",
    postcompile: "npm run copy:templates",
    dev: "tsup-node --watch --onSuccess 'tsc -d && npm run postcompile'",
    test: "node --loader ts-node/esm --enable-source-maps bin/test.ts",
    "copy:templates": 'copyfiles "stubs/**/**/*.stub" build'
  },
  keywords: [
    "adonisjs",
    "adonis6",
    "captcha",
    "cloudflare",
    "turnstile",
    "recaptcha"
  ],
  author: "monojson",
  license: "MIT",
  homepage: "https://github.com/monojson/adonis-captcha-guard",
  repository: {
    type: "git",
    url: "git+https://github.com/monojson/adonis-captcha-guard.git"
  },
  devDependencies: {
    "@adonisjs/assembler": "^7.2.3",
    "@adonisjs/core": "^6.3.1",
    "@adonisjs/eslint-config": "^1.3.0",
    "@adonisjs/prettier-config": "^1.3.0",
    "@adonisjs/tsconfig": "^1.3.0",
    "@japa/assert": "^2.1.0",
    "@japa/expect-type": "^2.0.1",
    "@japa/file-system": "^2.1.1",
    "@japa/runner": "^3.1.1",
    "@swc/core": "^1.4.6",
    "@types/node": "^20.11.25",
    copyfiles: "^2.4.1",
    eslint: "^8.57.0",
    prettier: "^3.2.5",
    "ts-node": "^10.9.2",
    tsup: "^8.0.2",
    typescript: "^5.4.2"
  },
  peerDependencies: {
    "@adonisjs/core": "^6.2.0"
  },
  tsup: {
    entry: [
      "./index.ts",
      "./src/types.ts",
      "./providers/captcha_provider.ts"
    ],
    outDir: "./build",
    clean: true,
    format: "esm",
    dts: false,
    sourcemap: true,
    target: "esnext"
  },
  dependencies: {
    got: "^14.2.1",
    "@poppinss/utils": "^6.7.3"
  }
};

// configure.ts
var packageName = package_default.name;
async function configure(command) {
  const codemods = await command.createCodemods();
  const providers = ["turnstile", "recaptcha"];
  await codemods.makeUsingStub(stubsRoot, "config/captcha.stub", {
    providers: providers.map((provider) => {
      return { provider, envPrefix: provider.toUpperCase() };
    })
  });
  await codemods.updateRcFile((rcFile) => {
    rcFile.addProvider(`${packageName}/providers/captcha_provider`);
  });
  await codemods.defineEnvVariables(
    providers.reduce((result, provider) => {
      result[`${provider.toUpperCase()}_SITE_KEY`] = "";
      result[`${provider.toUpperCase()}_SECRET`] = "";
      return result;
    }, {})
  );
  await codemods.defineEnvValidations({
    variables: providers.reduce((result, provider) => {
      result[`${provider.toUpperCase()}_SITE_KEY`] = "Env.schema.string.optional()";
      result[`${provider.toUpperCase()}_SECRET`] = "Env.schema.string.optional()";
      return result;
    }, {})
  });
}

// src/define_config.ts
import { configProvider } from "@adonisjs/core";
function defineConfig(config) {
  return configProvider.create(async (app) => {
    const serviceNames = Object.keys(config);
    const services2 = {};
    for (let serviceName of serviceNames) {
      const service = config[serviceName];
      if (typeof service === "function") {
        services2[serviceName] = service;
      } else {
        services2[serviceName] = await service.resolver(app);
      }
    }
    return services2;
  });
}
var services = {
  turnstile(config) {
    return configProvider.create(async () => {
      const { TurnstileService } = await import("./turnstile-CWSETBVR.js");
      return (ctx) => new TurnstileService(ctx, config);
    });
  },
  recaptcha(config) {
    return configProvider.create(async () => {
      const { RecaptchaService } = await import("./recaptcha-XJ375K4E.js");
      return (ctx) => new RecaptchaService(ctx, config);
    });
  }
};
export {
  Captcha,
  CaptchaManager,
  configure,
  defineConfig,
  services,
  stubsRoot
};
//# sourceMappingURL=index.js.map