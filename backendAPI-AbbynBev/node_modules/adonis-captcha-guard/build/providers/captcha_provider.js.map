{"version":3,"sources":["../../providers/captcha_provider.ts"],"sourcesContent":["import { configProvider } from '@adonisjs/core'\nimport { HttpContext } from '@adonisjs/core/http'\nimport { RuntimeException } from '@poppinss/utils'\nimport type { ApplicationService } from '@adonisjs/core/types'\n\nimport type { CaptchaService } from '../src/types.js'\nimport { CaptchaManager } from '../src/captcha_manager.js'\n\ndeclare module '@adonisjs/core/http' {\n  export interface HttpContext {\n    captcha: CaptchaService\n  }\n}\n\n/**\n * CaptchaProvider extends the HTTP context with the \"captcha\" property\n */\nexport default class CaptchaProvider {\n  constructor(protected app: ApplicationService) {}\n\n  async boot() {\n    const captchaConfigProvider = this.app.config.get<any>('captcha')\n\n    const config = await configProvider.resolve<any>(this.app, captchaConfigProvider)\n    if (!config) {\n      throw new RuntimeException(\n        'Invalid \"config/captcha.ts\" file. Make sure you are using the \"defineConfig\" method'\n      )\n    }\n\n    /**\n     * Setup HTTPContext getter\n     */\n    HttpContext.getter(\n      'captcha',\n      function (this: HttpContext) {\n        return new CaptchaManager(config, this) as unknown as CaptchaService\n      },\n      true\n    )\n  }\n}\n"],"mappings":";;;;;AAAA,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB;AAC5B,SAAS,wBAAwB;AAejC,IAAqB,kBAArB,MAAqC;AAAA,EACnC,YAAsB,KAAyB;AAAzB;AAAA,EAA0B;AAAA,EAEhD,MAAM,OAAO;AACX,UAAM,wBAAwB,KAAK,IAAI,OAAO,IAAS,SAAS;AAEhE,UAAM,SAAS,MAAM,eAAe,QAAa,KAAK,KAAK,qBAAqB;AAChF,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAKA,gBAAY;AAAA,MACV;AAAA,MACA,WAA6B;AAC3B,eAAO,IAAI,eAAe,QAAQ,IAAI;AAAA,MACxC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;","names":[]}