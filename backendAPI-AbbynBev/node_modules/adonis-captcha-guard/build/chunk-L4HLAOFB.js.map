{"version":3,"sources":["../src/captcha_manager.ts"],"sourcesContent":["import { RuntimeException } from '@poppinss/utils'\nimport type { HttpContext } from '@adonisjs/core/http'\nimport { CaptchaContract, CaptchaManagerFactory } from './types.js'\n\nexport class CaptchaManager<CaptchaProviders extends Record<string, CaptchaManagerFactory>> {\n  /**\n   * Config with the list of captcha providers\n   */\n  #config: CaptchaProviders\n  #ctx: HttpContext\n  #driversCache: Map<keyof CaptchaProviders, CaptchaContract> = new Map()\n\n  constructor(config: CaptchaProviders, ctx: HttpContext) {\n    this.#ctx = ctx\n    this.#config = config\n  }\n\n  /**\n   * Returns the instance of a captcha provider\n   */\n  use<CaptchaProvider extends keyof CaptchaProviders>(\n    provider: CaptchaProvider\n  ): ReturnType<CaptchaProviders[CaptchaProvider]> {\n    if (this.#driversCache.has(provider)) {\n      return this.#driversCache.get(provider) as ReturnType<CaptchaProviders[CaptchaProvider]>\n    }\n\n    const driver = this.#config[provider]\n    if (!driver) {\n      throw new RuntimeException(\n        `Unknown captcha provider \"${String(\n          provider\n        )}\". Make sure it is registered inside the config/captcha.ts file`\n      )\n    }\n\n    const driverInstance = driver(this.#ctx) as ReturnType<CaptchaProviders[CaptchaProvider]>\n    this.#driversCache.set(provider, driverInstance)\n\n    return driverInstance\n  }\n}\n"],"mappings":";AAAA,SAAS,wBAAwB;AAI1B,IAAM,iBAAN,MAAqF;AAAA;AAAA;AAAA;AAAA,EAI1F;AAAA,EACA;AAAA,EACA,gBAA8D,oBAAI,IAAI;AAAA,EAEtE,YAAY,QAA0B,KAAkB;AACtD,SAAK,OAAO;AACZ,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,IACE,UAC+C;AAC/C,QAAI,KAAK,cAAc,IAAI,QAAQ,GAAG;AACpC,aAAO,KAAK,cAAc,IAAI,QAAQ;AAAA,IACxC;AAEA,UAAM,SAAS,KAAK,QAAQ,QAAQ;AACpC,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,6BAA6B;AAAA,UAC3B;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,iBAAiB,OAAO,KAAK,IAAI;AACvC,SAAK,cAAc,IAAI,UAAU,cAAc;AAE/C,WAAO;AAAA,EACT;AACF;","names":[]}