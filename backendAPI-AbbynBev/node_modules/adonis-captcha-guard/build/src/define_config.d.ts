import type { HttpContext } from '@adonisjs/core/http';
import type { ConfigProvider } from '@adonisjs/core/types';
import { CaptchaManagerFactory, RecaptchaConfig, TurnstileConfig } from './types.js';
import { TurnstileService } from './captchas/turnstile.js';
import { RecaptchaService } from './captchas/recaptcha.js';
/**
 * Shape of config after it has been resolved from
 * the config provider
 */
type ResolvedConfig<CaptchaProviders extends Record<string, CaptchaManagerFactory | ConfigProvider<CaptchaManagerFactory>>> = {
    [K in keyof CaptchaProviders]: CaptchaProviders[K] extends ConfigProvider<infer A> ? A : CaptchaProviders[K];
};
/**
 * Define config for the captcha
 */
export declare function defineConfig<CaptchaProviders extends Record<string, CaptchaManagerFactory | ConfigProvider<CaptchaManagerFactory>>>(config: CaptchaProviders): ConfigProvider<ResolvedConfig<CaptchaProviders>>;
/**
 * Helpers to configure captcha services
 */
export declare const services: {
    turnstile: (config: TurnstileConfig) => ConfigProvider<(ctx: HttpContext) => TurnstileService>;
    recaptcha: (config: RecaptchaConfig) => ConfigProvider<(ctx: HttpContext) => RecaptchaService>;
};
export {};
