{"version":3,"sources":["../src/ally_manager.ts"],"sourcesContent":["/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { RuntimeException } from '@poppinss/utils'\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { AllyDriverContract, AllyManagerDriverFactory } from './types.js'\n\n/**\n * AllyManager is used to create instances of a social drivers during an\n * HTTP request. The drivers are cached during the lifecycle of a request.\n */\nexport class AllyManager<KnownSocialProviders extends Record<string, AllyManagerDriverFactory>> {\n  #ctx: HttpContext\n  #driversCache: Map<keyof KnownSocialProviders, AllyDriverContract<any, any>> = new Map()\n\n  constructor(\n    public config: KnownSocialProviders,\n    ctx: HttpContext\n  ) {\n    this.#ctx = ctx\n  }\n\n  /**\n   * Returns the driver instance of a social provider\n   */\n  use<SocialProvider extends keyof KnownSocialProviders>(\n    provider: SocialProvider\n  ): ReturnType<KnownSocialProviders[SocialProvider]> {\n    if (this.#driversCache.has(provider)) {\n      return this.#driversCache.get(provider) as ReturnType<KnownSocialProviders[SocialProvider]>\n    }\n\n    const driver = this.config[provider]\n    if (!driver) {\n      throw new RuntimeException(\n        `Unknown ally provider \"${String(\n          provider\n        )}\". Make sure it is registered inside the config/ally.ts file`\n      )\n    }\n\n    const driverInstance = driver(this.#ctx) as ReturnType<KnownSocialProviders[SocialProvider]>\n    this.#driversCache.set(provider, driverInstance)\n\n    return driverInstance\n  }\n}\n"],"mappings":";AASA,SAAS,wBAAwB;AAQ1B,IAAM,cAAN,MAAyF;AAAA,EAI9F,YACS,QACP,KACA;AAFO;AAGP,SAAK,OAAO;AAAA,EACd;AAAA,EARA;AAAA,EACA,gBAA+E,oBAAI,IAAI;AAAA;AAAA;AAAA;AAAA,EAYvF,IACE,UACkD;AAClD,QAAI,KAAK,cAAc,IAAI,QAAQ,GAAG;AACpC,aAAO,KAAK,cAAc,IAAI,QAAQ;AAAA,IACxC;AAEA,UAAM,SAAS,KAAK,OAAO,QAAQ;AACnC,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,0BAA0B;AAAA,UACxB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,iBAAiB,OAAO,KAAK,IAAI;AACvC,SAAK,cAAc,IAAI,UAAU,cAAc;AAE/C,WAAO;AAAA,EACT;AACF;","names":[]}