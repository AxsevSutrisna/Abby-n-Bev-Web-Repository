{"version":3,"sources":["../index.ts","../stubs/main.ts","../configure.ts","../src/define_config.ts"],"sourcesContent":["/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nexport { HttpClient as ApiRequest } from '@poppinss/oauth-client'\n\nexport * as errors from './src/errors.js'\nexport { configure } from './configure.js'\nexport { stubsRoot } from './stubs/main.js'\nexport { AllyManager } from './src/ally_manager.js'\nexport { defineConfig, services } from './src/define_config.js'\n\nexport { RedirectRequest } from './src/redirect_request.js'\nexport { Oauth1Driver } from './src/abstract_drivers/oauth1.js'\nexport { Oauth2Driver } from './src/abstract_drivers/oauth2.js'\n","/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { getDirname } from '@poppinss/utils'\n\nexport const stubsRoot = getDirname(import.meta.url)\n","/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type Configure from '@adonisjs/core/commands/configure'\nimport { stubsRoot } from './stubs/main.js'\n\n/**\n * List of available providers\n */\nconst AVAILABLE_PROVIDERS = [\n  'discord',\n  'facebook',\n  'github',\n  'google',\n  'linkedin',\n  'linkedinOpenidConnect',\n  'spotify',\n  'twitter',\n]\n\n/**\n * Configures the package\n */\nexport async function configure(command: Configure) {\n  /**\n   * Read providers from the CLI flags\n   */\n  let selectedProviders: string[] | string | undefined = command.parsedFlags.providers\n\n  /**\n   * Otherwise force prompt for selection\n   */\n  if (!selectedProviders) {\n    selectedProviders = await command.prompt.multiple(\n      'Select the social auth providers you plan to use',\n      AVAILABLE_PROVIDERS,\n      {\n        validate(value) {\n          return !value || !value.length\n            ? 'Select a social provider to configure the package'\n            : true\n        },\n      }\n    )\n  }\n\n  /**\n   * Cast CLI string value to an array\n   */\n  let providers = (\n    typeof selectedProviders === 'string' ? [selectedProviders] : selectedProviders\n  ) as string[]\n\n  /**\n   * Validate CLI selection to contain known providers\n   */\n  const unknownProvider = providers.find((provider) => !AVAILABLE_PROVIDERS.includes(provider))\n  if (unknownProvider) {\n    command.exitCode = 1\n    command.logger.error(`Invalid social provider \"${unknownProvider}\"`)\n    return\n  }\n\n  const codemods = await command.createCodemods()\n\n  /**\n   * Publish config file\n   */\n  await codemods.makeUsingStub(stubsRoot, 'config/ally.stub', {\n    providers: providers.map((provider) => {\n      return { provider, envPrefix: provider.toUpperCase() }\n    }),\n  })\n\n  /**\n   * Publish provider\n   */\n  await codemods.updateRcFile((rcFile) => {\n    rcFile.addProvider('@adonisjs/ally/ally_provider')\n  })\n\n  /**\n   * Define env variables for the selected providers\n   */\n  await codemods.defineEnvVariables(\n    providers.reduce<Record<string, string>>((result, provider) => {\n      result[`${provider.toUpperCase()}_CLIENT_ID`] = ''\n      result[`${provider.toUpperCase()}_CLIENT_SECRET`] = ''\n      return result\n    }, {})\n  )\n\n  /**\n   * Define env variables validation for the selected providers\n   */\n  await codemods.defineEnvValidations({\n    variables: providers.reduce<Record<string, string>>((result, provider) => {\n      result[`${provider.toUpperCase()}_CLIENT_ID`] = 'Env.schema.string()'\n      result[`${provider.toUpperCase()}_CLIENT_SECRET`] = 'Env.schema.string()'\n      return result\n    }, {}),\n    leadingComment: 'Variables for configuring ally package',\n  })\n}\n","/*\n * @adonisjs/ally\n *\n * (c) Ally\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { configProvider } from '@adonisjs/core'\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { ConfigProvider } from '@adonisjs/core/types'\n\nimport type { GoogleDriver } from './drivers/google.js'\nimport type { GithubDriver } from './drivers/github.js'\nimport type { SpotifyDriver } from './drivers/spotify.js'\nimport type { TwitterDriver } from './drivers/twitter.js'\nimport type { DiscordDriver } from './drivers/discord.js'\nimport type { FacebookDriver } from './drivers/facebook.js'\nimport type { LinkedInDriver } from './drivers/linked_in.js'\nimport type { LinkedInOpenidConnectDriver } from './drivers/linked_in_openid_connect.js'\nimport type {\n  GoogleDriverConfig,\n  GithubDriverConfig,\n  SpotifyDriverConfig,\n  DiscordDriverConfig,\n  TwitterDriverConfig,\n  LinkedInDriverConfig,\n  LinkedInOpenidConnectDriverConfig,\n  FacebookDriverConfig,\n  AllyManagerDriverFactory,\n} from './types.js'\n\n/**\n * Shape of config after it has been resolved from\n * the config provider\n */\ntype ResolvedConfig<\n  KnownSocialProviders extends Record<\n    string,\n    AllyManagerDriverFactory | ConfigProvider<AllyManagerDriverFactory>\n  >,\n> = {\n  [K in keyof KnownSocialProviders]: KnownSocialProviders[K] extends ConfigProvider<infer A>\n    ? A\n    : KnownSocialProviders[K]\n}\n\n/**\n * Define config for the ally\n */\nexport function defineConfig<\n  KnownSocialProviders extends Record<\n    string,\n    AllyManagerDriverFactory | ConfigProvider<AllyManagerDriverFactory>\n  >,\n>(config: KnownSocialProviders): ConfigProvider<ResolvedConfig<KnownSocialProviders>> {\n  return configProvider.create(async (app) => {\n    const serviceNames = Object.keys(config)\n    const services = {} as Record<string, AllyManagerDriverFactory>\n\n    for (let serviceName of serviceNames) {\n      const service = config[serviceName]\n      if (typeof service === 'function') {\n        services[serviceName] = service\n      } else {\n        services[serviceName] = await service.resolver(app)\n      }\n    }\n\n    return services as ResolvedConfig<KnownSocialProviders>\n  })\n}\n\n/**\n * Helpers to configure social auth services\n */\nexport const services: {\n  discord: (config: DiscordDriverConfig) => ConfigProvider<(ctx: HttpContext) => DiscordDriver>\n  facebook: (config: FacebookDriverConfig) => ConfigProvider<(ctx: HttpContext) => FacebookDriver>\n  github: (config: GithubDriverConfig) => ConfigProvider<(ctx: HttpContext) => GithubDriver>\n  google: (config: GoogleDriverConfig) => ConfigProvider<(ctx: HttpContext) => GoogleDriver>\n  linkedin: (config: LinkedInDriverConfig) => ConfigProvider<(ctx: HttpContext) => LinkedInDriver>\n  linkedinOpenidConnect: (\n    config: LinkedInOpenidConnectDriverConfig\n  ) => ConfigProvider<(ctx: HttpContext) => LinkedInOpenidConnectDriver>\n  spotify: (config: SpotifyDriverConfig) => ConfigProvider<(ctx: HttpContext) => SpotifyDriver>\n  twitter: (config: TwitterDriverConfig) => ConfigProvider<(ctx: HttpContext) => TwitterDriver>\n} = {\n  discord(config) {\n    return configProvider.create(async () => {\n      const { DiscordDriver } = await import('./drivers/discord.js')\n      return (ctx) => new DiscordDriver(ctx, config)\n    })\n  },\n  facebook(config) {\n    return configProvider.create(async () => {\n      const { FacebookDriver } = await import('./drivers/facebook.js')\n      return (ctx) => new FacebookDriver(ctx, config)\n    })\n  },\n  github(config) {\n    return configProvider.create(async () => {\n      const { GithubDriver } = await import('./drivers/github.js')\n      return (ctx) => new GithubDriver(ctx, config)\n    })\n  },\n  google(config) {\n    return configProvider.create(async () => {\n      const { GoogleDriver } = await import('./drivers/google.js')\n      return (ctx) => new GoogleDriver(ctx, config)\n    })\n  },\n  linkedin(config) {\n    return configProvider.create(async () => {\n      const { LinkedInDriver } = await import('./drivers/linked_in.js')\n      return (ctx) => new LinkedInDriver(ctx, config)\n    })\n  },\n  linkedinOpenidConnect(config) {\n    return configProvider.create(async () => {\n      const { LinkedInOpenidConnectDriver } = await import('./drivers/linked_in_openid_connect.js')\n      return (ctx) => new LinkedInOpenidConnectDriver(ctx, config)\n    })\n  },\n  spotify(config) {\n    return configProvider.create(async () => {\n      const { SpotifyDriver } = await import('./drivers/spotify.js')\n      return (ctx) => new SpotifyDriver(ctx, config)\n    })\n  },\n  twitter(config) {\n    return configProvider.create(async () => {\n      const { TwitterDriver } = await import('./drivers/twitter.js')\n      return (ctx) => new TwitterDriver(ctx, config)\n    })\n  },\n}\n"],"mappings":"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","names":["services"]}