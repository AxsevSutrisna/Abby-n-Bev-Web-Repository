{"version":3,"sources":["../src/errors.ts","../src/redirect_request.ts"],"sourcesContent":["/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { createError } from '@poppinss/utils'\n\nexport const E_OAUTH_MISSING_CODE = createError<[string]>(\n  'Cannot request access token. Redirect request is missing the \"%s\" param',\n  'E_OAUTH_MISSING_CODE',\n  500\n)\n\nexport const E_OAUTH_STATE_MISMATCH = createError(\n  'Unable to verify re-redirect state',\n  'E_OAUTH_STATE_MISMATCH',\n  400\n)\n","/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { UrlBuilder } from '@poppinss/oauth-client'\nimport { LiteralStringUnion } from './types.js'\n\n/**\n * Redirect request with first class support for defining scopes.\n */\nexport class RedirectRequest<Scopes extends string> extends UrlBuilder {\n  #scopesTransformer: undefined | ((scopes: LiteralStringUnion<Scopes>[]) => string[])\n  #scopeParamName: string\n  #scopeSeparator: string\n\n  constructor(baseUrl: string, scopeParamName: string, scopeSeparator: string) {\n    super(baseUrl)\n    this.#scopeParamName = scopeParamName\n    this.#scopeSeparator = scopeSeparator\n  }\n\n  /**\n   * Register a custom function to transform scopes. Exposed for drivers\n   * to implement.\n   */\n  transformScopes(callback: (scopes: LiteralStringUnion<Scopes>[]) => string[]): this {\n    this.#scopesTransformer = callback\n    return this\n  }\n\n  /**\n   * Define an array of scopes.\n   */\n  scopes(scopes: LiteralStringUnion<Scopes>[]): this {\n    if (typeof this.#scopesTransformer === 'function') {\n      scopes = this.#scopesTransformer(scopes)\n    }\n\n    this.param(this.#scopeParamName, scopes.join(this.#scopeSeparator))\n    return this\n  }\n\n  /**\n   * Merge to existing scopes\n   */\n  mergeScopes(scopes: LiteralStringUnion<Scopes>[]): this {\n    if (typeof this.#scopesTransformer === 'function') {\n      scopes = this.#scopesTransformer(scopes)\n    }\n\n    const existingScopes = this.getParams()[this.#scopeParamName]\n    const scopesString = scopes.join(this.#scopeSeparator)\n\n    if (!existingScopes) {\n      this.param(this.#scopeParamName, scopesString)\n      return this\n    }\n\n    this.param(this.#scopeParamName, `${existingScopes}${this.#scopeSeparator}${scopesString}`)\n    return this\n  }\n\n  /**\n   * Clear existing scopes\n   */\n  clearScopes(): this {\n    this.clearParam(this.#scopeParamName)\n    return this\n  }\n}\n"],"mappings":";;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,SAAS,mBAAmB;AAErB,IAAM,uBAAuB;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AACF;AAEO,IAAM,yBAAyB;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AACF;;;ACZA,SAAS,kBAAkB;AAMpB,IAAM,kBAAN,cAAqD,WAAW;AAAA,EACrE;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,SAAiB,gBAAwB,gBAAwB;AAC3E,UAAM,OAAO;AACb,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,UAAoE;AAClF,SAAK,qBAAqB;AAC1B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,QAA4C;AACjD,QAAI,OAAO,KAAK,uBAAuB,YAAY;AACjD,eAAS,KAAK,mBAAmB,MAAM;AAAA,IACzC;AAEA,SAAK,MAAM,KAAK,iBAAiB,OAAO,KAAK,KAAK,eAAe,CAAC;AAClE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,QAA4C;AACtD,QAAI,OAAO,KAAK,uBAAuB,YAAY;AACjD,eAAS,KAAK,mBAAmB,MAAM;AAAA,IACzC;AAEA,UAAM,iBAAiB,KAAK,UAAU,EAAE,KAAK,eAAe;AAC5D,UAAM,eAAe,OAAO,KAAK,KAAK,eAAe;AAErD,QAAI,CAAC,gBAAgB;AACnB,WAAK,MAAM,KAAK,iBAAiB,YAAY;AAC7C,aAAO;AAAA,IACT;AAEA,SAAK,MAAM,KAAK,iBAAiB,GAAG,cAAc,GAAG,KAAK,eAAe,GAAG,YAAY,EAAE;AAC1F,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,cAAoB;AAClB,SAAK,WAAW,KAAK,eAAe;AACpC,WAAO;AAAA,EACT;AACF;","names":[]}