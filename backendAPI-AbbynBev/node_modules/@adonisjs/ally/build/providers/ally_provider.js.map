{"version":3,"sources":["../../providers/ally_provider.ts"],"sourcesContent":["/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { configProvider } from '@adonisjs/core'\nimport { HttpContext } from '@adonisjs/core/http'\nimport { RuntimeException } from '@poppinss/utils'\nimport type { ApplicationService } from '@adonisjs/core/types'\n\nimport type { AllyService } from '../src/types.js'\nimport { AllyManager } from '../src/ally_manager.js'\n\ndeclare module '@adonisjs/core/http' {\n  export interface HttpContext {\n    ally: AllyService\n  }\n}\n\n/**\n * AllyProvider extends the HTTP context with the \"ally\" property\n */\nexport default class AllyProvider {\n  constructor(protected app: ApplicationService) {}\n\n  async boot() {\n    const allyConfigProvider = this.app.config.get<any>('ally')\n\n    /**\n     * Resolve config from the provider\n     */\n    const config = await configProvider.resolve<any>(this.app, allyConfigProvider)\n    if (!config) {\n      throw new RuntimeException(\n        'Invalid \"config/ally.ts\" file. Make sure you are using the \"defineConfig\" method'\n      )\n    }\n\n    /**\n     * Setup HTTPContext getter\n     */\n    HttpContext.getter(\n      'ally',\n      function (this: HttpContext) {\n        return new AllyManager(config, this) as unknown as AllyService\n      },\n      true\n    )\n  }\n}\n"],"mappings":";;;;;;AASA,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB;AAC5B,SAAS,wBAAwB;AAejC,IAAqB,eAArB,MAAkC;AAAA,EAChC,YAAsB,KAAyB;AAAzB;AAAA,EAA0B;AAAA,EAEhD,MAAM,OAAO;AACX,UAAM,qBAAqB,KAAK,IAAI,OAAO,IAAS,MAAM;AAK1D,UAAM,SAAS,MAAM,eAAe,QAAa,KAAK,KAAK,kBAAkB;AAC7E,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAKA,gBAAY;AAAA,MACV;AAAA,MACA,WAA6B;AAC3B,eAAO,IAAI,YAAY,QAAQ,IAAI;AAAA,MACrC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;","names":[]}