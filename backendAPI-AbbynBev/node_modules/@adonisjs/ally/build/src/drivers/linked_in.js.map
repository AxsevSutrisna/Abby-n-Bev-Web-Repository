{"version":3,"sources":["../../../src/drivers/linked_in.ts"],"sourcesContent":["/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Exception } from '@poppinss/utils'\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { HttpClient } from '@poppinss/oauth-client'\nimport type {\n  LinkedInToken,\n  LinkedInScopes,\n  ApiRequestContract,\n  LinkedInDriverConfig,\n  RedirectRequestContract,\n} from '../types.js'\nimport { Oauth2Driver } from '../abstract_drivers/oauth2.js'\n\n/**\n * LinkedIn driver to login user via LinkedIn\n */\nexport class LinkedInDriver extends Oauth2Driver<LinkedInToken, LinkedInScopes> {\n  protected accessTokenUrl = 'https://www.linkedin.com/oauth/v2/accessToken'\n  protected authorizeUrl = 'https://www.linkedin.com/oauth/v2/authorization'\n  protected userInfoUrl = 'https://api.linkedin.com/v2/me'\n  protected userEmailUrl = 'https://api.linkedin.com/v2/clientAwareMemberHandles'\n\n  /**\n   * The param name for the authorization code\n   */\n  protected codeParamName = 'code'\n\n  /**\n   * The param name for the error\n   */\n  protected errorParamName = 'error'\n\n  /**\n   * Cookie name for storing the \"linkedin_oauth_state\"\n   */\n  protected stateCookieName = 'linkedin_oauth_state'\n\n  /**\n   * Parameter name to be used for sending and receiving the state\n   * from linkedin\n   */\n  protected stateParamName = 'state'\n\n  /**\n   * Parameter name for defining the scopes\n   */\n  protected scopeParamName = 'scope'\n\n  /**\n   * Scopes separator\n   */\n  protected scopesSeparator = ' '\n\n  constructor(\n    ctx: HttpContext,\n    public config: LinkedInDriverConfig\n  ) {\n    super(ctx, config)\n    /**\n     * Extremely important to call the following method to clear the\n     * state set by the redirect request\n     */\n    this.loadState()\n  }\n\n  /**\n   * Configuring the redirect request with defaults\n   */\n  protected configureRedirectRequest(request: RedirectRequestContract<LinkedInScopes>) {\n    /**\n     * Define user defined scopes or the default one's\n     */\n    request.scopes(this.config.scopes || ['r_emailaddress', 'r_liteprofile'])\n\n    /**\n     * Set \"response_type\" param\n     */\n    request.param('response_type', 'code')\n  }\n\n  /**\n   * Returns the HTTP request with the authorization header set\n   */\n  protected getAuthenticatedRequest(url: string, token: string): HttpClient {\n    const request = this.httpClient(url)\n    request.header('Authorization', `Bearer ${token}`)\n    request.header('Accept', 'application/json')\n    request.parseAs('json')\n    return request\n  }\n\n  /**\n   * Fetches the user info from the LinkedIn API\n   */\n  protected async getUserInfo(token: string, callback?: (request: ApiRequestContract) => void) {\n    let url = this.config.userInfoUrl || this.userInfoUrl\n    const request = this.getAuthenticatedRequest(url, token)\n    request.param(\n      'projection',\n      '(id,localizedLastName,localizedFirstName,vanityName,profilePicture(displayImage~digitalmediaAsset:playableStreams))'\n    )\n\n    if (typeof callback === 'function') {\n      callback(request)\n    }\n\n    const body = await request.get()\n\n    /**\n     * Finding the user avatar\n     */\n    let avatar: string = ''\n    if (body.profilePicture) {\n      const avatars = body.profilePicture['displayImage~']['elements'] || []\n      if (avatars.length && avatars[0].identifiers && avatars[0].identifiers.length) {\n        avatar = avatars[0].identifiers[0].identifier\n      }\n    }\n\n    return {\n      id: body.id,\n      nickName: body.vanityName || `${body.localizedFirstName} ${body.localizedLastName}`,\n      name: `${body.localizedFirstName} ${body.localizedLastName}`,\n      avatarUrl: avatar,\n      original: body,\n    }\n  }\n\n  /**\n   * Fetches the user email from the LinkedIn API\n   */\n  protected async getUserEmail(token: string, callback?: (request: ApiRequestContract) => void) {\n    let url = this.config.userEmailUrl || this.userEmailUrl\n    const request = this.getAuthenticatedRequest(url, token)\n    request.param('q', 'members')\n    request.param('projection', '(elements*(primary,type,handle~))')\n\n    if (typeof callback === 'function') {\n      callback(request)\n    }\n\n    const body = await request.get()\n    let mainEmail = body.elements.find((resource: any) => {\n      return resource.type === 'EMAIL' && resource['handle~']\n    })\n\n    /**\n     * We except email to always exist\n     */\n    if (!mainEmail) {\n      throw new Exception(\n        'Cannot request user email. Make sure you are using the \"r_emailaddress\" scope'\n      )\n    }\n\n    return mainEmail['handle~']['emailAddress']\n  }\n\n  /**\n   * Find if the current error code is for access denied\n   */\n  accessDenied(): boolean {\n    const error = this.getError()\n    if (!error) {\n      return false\n    }\n\n    return error === 'user_cancelled_login' || error === 'user_cancelled_authorize'\n  }\n\n  /**\n   * Returns details for the authorized user\n   */\n  async user(callback?: (request: ApiRequestContract) => void) {\n    const token = await this.accessToken(callback)\n    const user = await this.getUserInfo(token.token, callback)\n    const email = await this.getUserEmail(token.token, callback)\n\n    return {\n      ...user,\n      email: email,\n      emailVerificationState: 'unsupported' as const,\n      token: token,\n    }\n  }\n\n  /**\n   * Finds the user by the access token\n   */\n  async userFromToken(token: string, callback?: (request: ApiRequestContract) => void) {\n    const user = await this.getUserInfo(token, callback)\n    const email = await this.getUserEmail(token, callback)\n\n    return {\n      ...user,\n      email: email,\n      emailVerificationState: 'unsupported' as const,\n      token: { token, type: 'bearer' as const },\n    }\n  }\n}\n"],"mappings":"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","names":[]}