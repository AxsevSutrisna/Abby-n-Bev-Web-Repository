{"version":3,"sources":["../../../src/drivers/discord.ts"],"sourcesContent":["/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { HttpClient } from '@poppinss/oauth-client'\n\nimport type {\n  DiscordScopes,\n  DiscordToken,\n  ApiRequestContract,\n  DiscordDriverConfig,\n  RedirectRequestContract,\n} from '../types.js'\nimport { Oauth2Driver } from '../abstract_drivers/oauth2.js'\n\n/**\n * Discord driver to login user via Discord\n */\nexport class DiscordDriver extends Oauth2Driver<DiscordToken, DiscordScopes> {\n  protected accessTokenUrl = 'https://discord.com/api/oauth2/token'\n  protected authorizeUrl = 'https://discord.com/oauth2/authorize'\n  protected userInfoUrl = 'https://discord.com/api/users/@me'\n\n  /**\n   * The param name for the authorization code\n   */\n  protected codeParamName = 'code'\n\n  /**\n   * The param name for the error\n   */\n  protected errorParamName = 'error'\n\n  /**\n   * Cookie name for storing the \"discord_oauth_state\"\n   */\n  protected stateCookieName = 'discord_oauth_state'\n\n  /**\n   * Parameter name to be used for sending and receiving the state\n   * from Discord\n   */\n  protected stateParamName = 'state'\n\n  /**\n   * Parameter name for defining the scopes\n   */\n  protected scopeParamName = 'scope'\n\n  /**\n   * Scopes separator\n   */\n  protected scopesSeparator = ' '\n\n  constructor(\n    ctx: HttpContext,\n    public config: DiscordDriverConfig\n  ) {\n    super(ctx, config)\n\n    /**\n     * Extremely important to call the following method to clear the\n     * state set by the redirect request\n     */\n    this.loadState()\n  }\n\n  /**\n   * Configuring the redirect request with defaults\n   */\n  protected configureRedirectRequest(request: RedirectRequestContract<DiscordScopes>) {\n    /**\n     * Define user defined scopes or the default one's\n     */\n    request.scopes(this.config.scopes || ['identify', 'email'])\n\n    request.param('response_type', 'code')\n    request.param('grant_type', 'authorization_code')\n    request.param('integration_type', 1)\n\n    /**\n     * Define params based upon user config\n     */\n    if (this.config.prompt) {\n      request.param('prompt', this.config.prompt)\n    }\n    if (this.config.guildId) {\n      request.param('guild_id', this.config.guildId)\n    }\n    if (this.config.disableGuildSelect !== undefined) {\n      request.param('disable_guild_select', this.config.disableGuildSelect)\n    }\n    if (this.config.permissions !== undefined) {\n      request.param('permissions', this.config.permissions)\n    }\n  }\n\n  /**\n   * Configuring the access token API request to send extra fields\n   */\n  protected configureAccessTokenRequest(request: ApiRequestContract) {\n    /**\n     * Send state to Discord when request is not stateles\n     */\n    if (!this.isStateless) {\n      request.field('state', this.stateCookieValue)\n    }\n  }\n\n  /**\n   * Returns the HTTP request with the authorization header set\n   */\n  protected getAuthenticatedRequest(url: string, token: string): HttpClient {\n    const request = this.httpClient(url)\n    request.header('Authorization', `Bearer ${token}`)\n    request.header('Accept', 'application/json')\n    request.parseAs('json')\n    return request\n  }\n\n  /**\n   * Fetches the user info from the Discord API\n   * https://discord.com/developers/docs/resources/user#get-current-user\n   */\n  protected async getUserInfo(token: string, callback?: (request: ApiRequestContract) => void) {\n    const request = this.getAuthenticatedRequest(this.config.userInfoUrl || this.userInfoUrl, token)\n    if (typeof callback === 'function') {\n      callback(request)\n    }\n\n    const body = await request.get()\n    return {\n      id: body.id,\n      name: `${body.username}#${body.discriminator}`,\n      nickName: body.username,\n      avatarUrl: body.avatar\n        ? `https://cdn.discordapp.com/avatars/${body.id}/${body.avatar}.${\n            body.avatar.startsWith('a_') ? 'gif' : 'png'\n          }`\n        : `https://cdn.discordapp.com/embed/avatars/${body.discriminator % 5}.png`,\n      email: body.email, // May not always be there (requires email scope)\n      emailVerificationState:\n        'verified' in body\n          ? body.verified\n            ? ('verified' as const)\n            : ('unverified' as const)\n          : ('unsupported' as const),\n      original: body,\n    }\n  }\n\n  /**\n   * Find if the current error code is for access denied\n   */\n  accessDenied(): boolean {\n    const error = this.getError()\n    if (!error) {\n      return false\n    }\n\n    return error === 'access_denied'\n  }\n\n  /**\n   * Returns details for the authorized user\n   */\n  async user(callback?: (request: ApiRequestContract) => void) {\n    const token = await this.accessToken(callback)\n    const user = await this.getUserInfo(token.token, callback)\n\n    return {\n      ...user,\n      token,\n    }\n  }\n\n  /**\n   * Finds the user by the access token\n   */\n  async userFromToken(token: string, callback?: (request: ApiRequestContract) => void) {\n    const user = await this.getUserInfo(token, callback)\n\n    return {\n      ...user,\n      token: { token, type: 'bearer' as const },\n    }\n  }\n}\n"],"mappings":"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","names":[]}