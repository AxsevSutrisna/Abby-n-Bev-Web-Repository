{"version":3,"sources":["../../../src/drivers/linked_in_openid_connect.ts"],"sourcesContent":["import { Oauth2Driver } from '../abstract_drivers/oauth2.js'\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type {\n  ApiRequestContract,\n  LinkedInOpenidConnectAccessToken,\n  LinkedInOpenidConnectDriverConfig,\n  LinkedInOpenidConnectScopes,\n  RedirectRequestContract,\n} from '@adonisjs/ally/types'\nimport type { HttpClient } from '@poppinss/oauth-client'\n\n/**\n * LinkedIn openid connect driver to login user via LinkedIn using openid connect requirements\n */\nexport class LinkedInOpenidConnectDriver extends Oauth2Driver<\n  LinkedInOpenidConnectAccessToken,\n  LinkedInOpenidConnectScopes\n> {\n  protected authorizeUrl = 'https://www.linkedin.com/oauth/v2/authorization'\n  protected accessTokenUrl = 'https://www.linkedin.com/oauth/v2/accessToken'\n  protected userInfoUrl = 'https://api.linkedin.com/v2/userinfo'\n\n  /**\n   * The param name for the authorization code\n   */\n  protected codeParamName = 'code'\n\n  /**\n   * The param name for the error\n   */\n  protected errorParamName = 'error'\n\n  /**\n   * Cookie name for storing the \"linkedin_openid_connect_oauth_state\"\n   */\n  protected stateCookieName = 'linkedin_openid_connect_oauth_state'\n\n  /**\n   * Parameter name to be used for sending and receiving the state\n   * from linkedin\n   */\n  protected stateParamName = 'state'\n\n  /**\n   * Parameter name for defining the scopes\n   */\n  protected scopeParamName = 'scope'\n\n  /**\n   * Scopes separator\n   */\n  protected scopesSeparator = ' '\n\n  constructor(\n    ctx: HttpContext,\n    public config: LinkedInOpenidConnectDriverConfig\n  ) {\n    super(ctx, config)\n    /**\n     * Extremely important to call the following method to clear the\n     * state set by the redirect request.\n     *\n     * DO NOT REMOVE THE FOLLOWING LINE\n     */\n    this.loadState()\n  }\n\n  /**\n   * Configuring the redirect request with defaults\n   */\n  protected configureRedirectRequest(\n    request: RedirectRequestContract<LinkedInOpenidConnectScopes>\n  ) {\n    /**\n     * Define user defined scopes or the default one's\n     */\n    request.scopes(this.config.scopes || ['openid', 'profile', 'email'])\n\n    /**\n     * Set \"response_type\" param\n     */\n    request.param('response_type', 'code')\n  }\n\n  /**\n   * Returns the HTTP request with the authorization header set\n   */\n  protected getAuthenticatedRequest(url: string, token: string): HttpClient {\n    const request = this.httpClient(url)\n    request.header('Authorization', `Bearer ${token}`)\n    request.header('Accept', 'application/json')\n    request.parseAs('json')\n    return request\n  }\n\n  /**\n   * Fetches the user info from the LinkedIn API\n   */\n  protected async getUserInfo(token: string, callback?: (request: ApiRequestContract) => void) {\n    let url = this.config.userInfoUrl || this.userInfoUrl\n    const request = this.getAuthenticatedRequest(url, token)\n\n    if (typeof callback === 'function') {\n      callback(request)\n    }\n\n    const body = await request.get()\n    const emailVerificationState: 'verified' | 'unverified' = body.email_verified\n      ? 'verified'\n      : 'unverified'\n\n    return {\n      id: body.sub,\n      nickName: body.given_name,\n      name: body.family_name,\n      avatarUrl: body.picture,\n      email: body.email,\n      emailVerificationState,\n      original: body,\n    }\n  }\n\n  /**\n   * Find if the current error code is for access denied\n   */\n  accessDenied(): boolean {\n    const error = this.getError()\n    if (!error) {\n      return false\n    }\n\n    return error === 'user_cancelled_login' || error === 'user_cancelled_authorize'\n  }\n\n  /**\n   * Returns details for the authorized user\n   */\n  async user(callback?: (request: ApiRequestContract) => void) {\n    const accessToken = await this.accessToken(callback)\n    const userInfo = await this.getUserInfo(accessToken.token, callback)\n\n    return {\n      ...userInfo,\n      token: { ...accessToken },\n    }\n  }\n\n  /**\n   * Finds the user by the access token\n   */\n  async userFromToken(token: string, callback?: (request: ApiRequestContract) => void) {\n    const user = await this.getUserInfo(token, callback)\n\n    return {\n      ...user,\n      token: { token, type: 'bearer' as const },\n    }\n  }\n}\n"],"mappings":";;;;;;;AAcO,IAAM,8BAAN,cAA0C,aAG/C;AAAA,EAoCA,YACE,KACO,QACP;AACA,UAAM,KAAK,MAAM;AAFV;AASP,SAAK,UAAU;AAAA,EACjB;AAAA,EA/CU,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,cAAc;AAAA;AAAA;AAAA;AAAA,EAKd,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAKhB,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAKjB,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlB,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAKjB,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAKjB,kBAAkB;AAAA;AAAA;AAAA;AAAA,EAmBlB,yBACR,SACA;AAIA,YAAQ,OAAO,KAAK,OAAO,UAAU,CAAC,UAAU,WAAW,OAAO,CAAC;AAKnE,YAAQ,MAAM,iBAAiB,MAAM;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA,EAKU,wBAAwB,KAAa,OAA2B;AACxE,UAAM,UAAU,KAAK,WAAW,GAAG;AACnC,YAAQ,OAAO,iBAAiB,UAAU,KAAK,EAAE;AACjD,YAAQ,OAAO,UAAU,kBAAkB;AAC3C,YAAQ,QAAQ,MAAM;AACtB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAgB,YAAY,OAAe,UAAkD;AAC3F,QAAI,MAAM,KAAK,OAAO,eAAe,KAAK;AAC1C,UAAM,UAAU,KAAK,wBAAwB,KAAK,KAAK;AAEvD,QAAI,OAAO,aAAa,YAAY;AAClC,eAAS,OAAO;AAAA,IAClB;AAEA,UAAM,OAAO,MAAM,QAAQ,IAAI;AAC/B,UAAM,yBAAoD,KAAK,iBAC3D,aACA;AAEJ,WAAO;AAAA,MACL,IAAI,KAAK;AAAA,MACT,UAAU,KAAK;AAAA,MACf,MAAM,KAAK;AAAA,MACX,WAAW,KAAK;AAAA,MAChB,OAAO,KAAK;AAAA,MACZ;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAwB;AACtB,UAAM,QAAQ,KAAK,SAAS;AAC5B,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,WAAO,UAAU,0BAA0B,UAAU;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,KAAK,UAAkD;AAC3D,UAAM,cAAc,MAAM,KAAK,YAAY,QAAQ;AACnD,UAAM,WAAW,MAAM,KAAK,YAAY,YAAY,OAAO,QAAQ;AAEnE,WAAO;AAAA,MACL,GAAG;AAAA,MACH,OAAO,EAAE,GAAG,YAAY;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,OAAe,UAAkD;AACnF,UAAM,OAAO,MAAM,KAAK,YAAY,OAAO,QAAQ;AAEnD,WAAO;AAAA,MACL,GAAG;AAAA,MACH,OAAO,EAAE,OAAO,MAAM,SAAkB;AAAA,IAC1C;AAAA,EACF;AACF;","names":[]}