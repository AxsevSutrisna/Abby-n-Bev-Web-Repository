{"version":3,"sources":["../../../src/drivers/github.ts"],"sourcesContent":["/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { HttpClient } from '@poppinss/oauth-client'\nimport type {\n  GithubToken,\n  GithubScopes,\n  AllyUserContract,\n  GithubDriverConfig,\n  ApiRequestContract,\n  RedirectRequestContract,\n} from '../types.js'\nimport { Oauth2Driver } from '../abstract_drivers/oauth2.js'\n\n/**\n * Github driver to login user via Github\n */\nexport class GithubDriver extends Oauth2Driver<GithubToken, GithubScopes> {\n  protected accessTokenUrl = 'https://github.com/login/oauth/access_token'\n  protected authorizeUrl = 'https://github.com/login/oauth/authorize'\n  protected userInfoUrl = 'https://api.github.com/user'\n  protected userEmailUrl = 'https://api.github.com/user/emails'\n\n  /**\n   * The param name for the authorization code\n   */\n  protected codeParamName = 'code'\n\n  /**\n   * The param name for the error\n   */\n  protected errorParamName = 'error'\n\n  /**\n   * Cookie name for storing the \"gh_oauth_state\"\n   */\n  protected stateCookieName = 'gh_oauth_state'\n\n  /**\n   * Parameter name to be used for sending and receiving the state\n   * from Github\n   */\n  protected stateParamName = 'state'\n\n  /**\n   * Parameter name for defining the scopes\n   */\n  protected scopeParamName = 'scope'\n\n  /**\n   * Scopes separator\n   */\n  protected scopesSeparator = ' '\n\n  constructor(\n    ctx: HttpContext,\n    public config: GithubDriverConfig\n  ) {\n    super(ctx, config)\n    /**\n     * Extremely important to call the following method to clear the\n     * state set by the redirect request\n     */\n    this.loadState()\n  }\n\n  /**\n   * Configuring the redirect request with defaults\n   */\n  protected configureRedirectRequest(request: RedirectRequestContract<GithubScopes>) {\n    /**\n     * Define user defined scopes or the default one's\n     */\n    request.scopes(this.config.scopes || ['user'])\n\n    /**\n     * Set \"allow_signup\" option when defined\n     */\n    if (this.config.allowSignup !== undefined) {\n      request.param('allow_signup', this.config.allowSignup)\n    }\n\n    /**\n     * Set \"login\" option when defined\n     */\n    if (this.config.login) {\n      request.param('login', this.config.login)\n    }\n  }\n\n  /**\n   * Configuring the access token API request to send extra fields\n   */\n  protected configureAccessTokenRequest(request: ApiRequestContract) {\n    /**\n     * Send state to github when request is not stateles\n     */\n    if (!this.isStateless) {\n      request.field('state', this.stateCookieValue)\n    }\n\n    /**\n     * Clearing the default defined \"grant_type\". Github doesn't accept this.\n     * https://github.com/poppinss/oauth-client#following-is-the-list-of-fieldsparams-set-by-the-clients-implicitly\n     */\n    request.clearField('grant_type')\n  }\n\n  /**\n   * Returns the HTTP request with the authorization header set\n   */\n  protected getAuthenticatedRequest(url: string, token: string): HttpClient {\n    const request = this.httpClient(url)\n    request.header('Authorization', `token ${token}`)\n    request.header('Accept', 'application/json')\n    request.parseAs('json')\n    return request\n  }\n\n  /**\n   * Fetches the user info from the Github API\n   * https://docs.github.com/en/rest/reference/users#get-the-authenticated-user\n   */\n  protected async getUserInfo(token: string, callback?: (request: ApiRequestContract) => void) {\n    const request = this.getAuthenticatedRequest(this.config.userInfoUrl || this.userInfoUrl, token)\n    if (typeof callback === 'function') {\n      callback(request)\n    }\n\n    const body = await request.get()\n    return {\n      id: body.id,\n      nickName: body.name,\n      email: body.email, // May not always be there\n      emailVerificationState: (body.email\n        ? 'verified'\n        : 'unsupported') as AllyUserContract<any>['emailVerificationState'],\n      name: body.name ?? body.login,\n      avatarUrl: body.avatar_url,\n      original: body,\n    }\n  }\n\n  /**\n   * Fetches the user email from the Github API.\n   * https://docs.github.com/en/rest/reference/users#list-email-addresses-for-the-authenticated-user\n   */\n  protected async getUserEmail(token: string, callback?: (request: ApiRequestContract) => void) {\n    const request = this.getAuthenticatedRequest(\n      this.config.userEmailUrl || this.userEmailUrl,\n      token\n    )\n\n    if (typeof callback === 'function') {\n      callback(request)\n    }\n\n    try {\n      let emails = await request.get()\n\n      /**\n       * Sort emails to keep the primary ones on the top\n       */\n      emails = emails.sort((email: any) => (email.primary ? -1 : 1))\n\n      /**\n       * Get the first verified email of the user\n       */\n      let mainEmail = emails.find((email: any) => email.verified)\n\n      /**\n       * If there are no verified emails, then get any first one\n       */\n      if (!mainEmail) {\n        mainEmail = emails[0]\n      }\n\n      return mainEmail\n    } catch (error) {\n      if (error && error.response && error.response.statusCode === 404) {\n        return\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Find if the current error code is for access denied\n   */\n  accessDenied(): boolean {\n    const error = this.getError()\n    if (!error) {\n      return false\n    }\n\n    return error === 'access_denied'\n  }\n\n  /**\n   * Returns details for the authorized user\n   */\n  async user(callback?: (request: ApiRequestContract) => void) {\n    const token = await this.accessToken(callback)\n    const user = await this.getUserInfo(token.token, callback)\n\n    /**\n     * Fetch email separately\n     */\n    if (!user.email) {\n      this.ctx.logger.trace('Fetching github user email separately')\n\n      const emailResponse = await this.getUserEmail(token.token, callback)\n      if (emailResponse) {\n        user.email = emailResponse.email\n        user.emailVerificationState = emailResponse.verified\n          ? ('verified' as const)\n          : ('unverified' as const)\n      }\n    }\n\n    return {\n      ...user,\n      token: token,\n    }\n  }\n\n  /**\n   * Finds the user by the access token\n   */\n  async userFromToken(token: string, callback?: (request: ApiRequestContract) => void) {\n    const user = await this.getUserInfo(token, callback)\n\n    /**\n     * Fetch email separately\n     */\n    if (!user.email) {\n      this.ctx.logger.trace('Fetching github user email separately')\n\n      const emailResponse = await this.getUserEmail(token, callback)\n      if (emailResponse) {\n        user.email = emailResponse.email\n        user.emailVerificationState = emailResponse.verified\n          ? ('verified' as const)\n          : ('unverified' as const)\n      }\n    }\n\n    return {\n      ...user,\n      token: { token, type: 'bearer' as const },\n    }\n  }\n}\n"],"mappings":"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","names":[]}