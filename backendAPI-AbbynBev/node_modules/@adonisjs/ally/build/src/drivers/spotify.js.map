{"version":3,"sources":["../../../src/drivers/spotify.ts"],"sourcesContent":["/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { HttpClient } from '@poppinss/oauth-client'\nimport type {\n  SpotifyScopes,\n  SpotifyToken,\n  ApiRequestContract,\n  SpotifyDriverConfig,\n  RedirectRequestContract,\n} from '../types.js'\nimport { Oauth2Driver } from '../abstract_drivers/oauth2.js'\n\n/**\n * Spotify driver to login user via Spotify\n */\nexport class SpotifyDriver extends Oauth2Driver<SpotifyToken, SpotifyScopes> {\n  protected accessTokenUrl = 'https://accounts.spotify.com/api/token'\n  protected authorizeUrl = 'https://accounts.spotify.com/authorize'\n  protected userInfoUrl = 'https://api.spotify.com/v1/me'\n\n  /**\n   * The param name for the authorization code\n   */\n  protected codeParamName = 'code'\n\n  /**\n   * The param name for the error\n   */\n  protected errorParamName = 'error'\n\n  /**\n   * Cookie name for storing the \"spotify_oauth_state\"\n   */\n  protected stateCookieName = 'spotify_oauth_state'\n\n  /**\n   * Parameter name to be used for sending and receiving the state\n   * from Spotify\n   */\n  protected stateParamName = 'state'\n\n  /**\n   * Parameter name for defining the scopes\n   */\n  protected scopeParamName = 'scope'\n\n  /**\n   * Scopes separator\n   */\n  protected scopesSeparator = ' '\n\n  constructor(\n    ctx: HttpContext,\n    public config: SpotifyDriverConfig\n  ) {\n    super(ctx, config)\n\n    /**\n     * Extremely important to call the following method to clear the\n     * state set by the redirect request\n     */\n    this.loadState()\n  }\n\n  /**\n   * Configuring the redirect request with defaults\n   */\n  protected configureRedirectRequest(request: RedirectRequestContract<SpotifyScopes>) {\n    /**\n     * Define user defined scopes or the default one's\n     */\n    request.scopes(this.config.scopes || ['user-read-email'])\n\n    request.param('response_type', 'code')\n    request.param('grant_type', 'authorization_code')\n\n    /**\n     * Define params based upon user config\n     */\n    if (this.config.showDialog) {\n      request.param('show_dialog', this.config.showDialog)\n    }\n  }\n\n  /**\n   * Returns the HTTP request with the authorization header set\n   */\n  protected getAuthenticatedRequest(url: string, token: string): HttpClient {\n    const request = this.httpClient(url)\n    request.header('Authorization', `Bearer ${token}`)\n    request.header('Accept', 'application/json')\n    request.parseAs('json')\n    return request\n  }\n\n  /**\n   * Fetches the user info from the Spotify API\n   * https://discord.com/developers/docs/resources/user#get-current-user\n   */\n  protected async getUserInfo(token: string, callback?: (request: ApiRequestContract) => void) {\n    const request = this.getAuthenticatedRequest(this.userInfoUrl, token)\n    if (typeof callback === 'function') {\n      callback(request)\n    }\n\n    const body = await request.get()\n\n    return {\n      id: body.id,\n      nickName: body.display_name,\n      name: body.display_name,\n      email: body.email,\n      avatarUrl: body.images[0]?.url || null,\n      emailVerificationState: 'unsupported' as const,\n      original: body,\n    }\n  }\n\n  /**\n   * Find if the current error code is for access denied\n   */\n  accessDenied(): boolean {\n    const error = this.getError()\n    if (!error) {\n      return false\n    }\n\n    return error === 'access_denied'\n  }\n\n  /**\n   * Returns details for the authorized user\n   */\n  async user(callback?: (request: ApiRequestContract) => void) {\n    const token = await this.accessToken(callback)\n    const user = await this.getUserInfo(token.token, callback)\n\n    return {\n      ...user,\n      token,\n    }\n  }\n\n  /**\n   * Finds the user by the access token\n   */\n  async userFromToken(token: string, callback?: (request: ApiRequestContract) => void) {\n    const user = await this.getUserInfo(token, callback)\n\n    return {\n      ...user,\n      token: { token, type: 'bearer' as const },\n    }\n  }\n}\n"],"mappings":";;;;;;;AAuBO,IAAM,gBAAN,cAA4B,aAA0C;AAAA,EAoC3E,YACE,KACO,QACP;AACA,UAAM,KAAK,MAAM;AAFV;AAQP,SAAK,UAAU;AAAA,EACjB;AAAA,EA9CU,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf,cAAc;AAAA;AAAA;AAAA;AAAA,EAKd,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAKhB,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAKjB,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlB,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAKjB,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAKjB,kBAAkB;AAAA;AAAA;AAAA;AAAA,EAkBlB,yBAAyB,SAAiD;AAIlF,YAAQ,OAAO,KAAK,OAAO,UAAU,CAAC,iBAAiB,CAAC;AAExD,YAAQ,MAAM,iBAAiB,MAAM;AACrC,YAAQ,MAAM,cAAc,oBAAoB;AAKhD,QAAI,KAAK,OAAO,YAAY;AAC1B,cAAQ,MAAM,eAAe,KAAK,OAAO,UAAU;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKU,wBAAwB,KAAa,OAA2B;AACxE,UAAM,UAAU,KAAK,WAAW,GAAG;AACnC,YAAQ,OAAO,iBAAiB,UAAU,KAAK,EAAE;AACjD,YAAQ,OAAO,UAAU,kBAAkB;AAC3C,YAAQ,QAAQ,MAAM;AACtB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAgB,YAAY,OAAe,UAAkD;AAC3F,UAAM,UAAU,KAAK,wBAAwB,KAAK,aAAa,KAAK;AACpE,QAAI,OAAO,aAAa,YAAY;AAClC,eAAS,OAAO;AAAA,IAClB;AAEA,UAAM,OAAO,MAAM,QAAQ,IAAI;AAE/B,WAAO;AAAA,MACL,IAAI,KAAK;AAAA,MACT,UAAU,KAAK;AAAA,MACf,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,WAAW,KAAK,OAAO,CAAC,GAAG,OAAO;AAAA,MAClC,wBAAwB;AAAA,MACxB,UAAU;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAwB;AACtB,UAAM,QAAQ,KAAK,SAAS;AAC5B,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,KAAK,UAAkD;AAC3D,UAAM,QAAQ,MAAM,KAAK,YAAY,QAAQ;AAC7C,UAAM,OAAO,MAAM,KAAK,YAAY,MAAM,OAAO,QAAQ;AAEzD,WAAO;AAAA,MACL,GAAG;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,OAAe,UAAkD;AACnF,UAAM,OAAO,MAAM,KAAK,YAAY,OAAO,QAAQ;AAEnD,WAAO;AAAA,MACL,GAAG;AAAA,MACH,OAAO,EAAE,OAAO,MAAM,SAAkB;AAAA,IAC1C;AAAA,EACF;AACF;","names":[]}