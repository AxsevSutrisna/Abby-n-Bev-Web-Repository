{"version":3,"sources":["../../../src/drivers/twitter.ts"],"sourcesContent":["/*\n * @adonisjs/ally\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HttpContext } from '@adonisjs/core/http'\nimport {\n  TwitterToken,\n  AllyUserContract,\n  ApiRequestContract,\n  TwitterDriverConfig,\n} from '../types.js'\nimport { Oauth1Driver } from '../abstract_drivers/oauth1.js'\n\n/**\n * Twitter driver to login user via twitter\n */\nexport class TwitterDriver extends Oauth1Driver<TwitterToken, string> {\n  protected requestTokenUrl = 'https://api.twitter.com/oauth/request_token'\n  protected authorizeUrl = 'https://api.twitter.com/oauth/authenticate'\n  protected accessTokenUrl = 'https://api.twitter.com/oauth/access_token'\n  protected userInfoUrl = 'https://api.twitter.com/1.1/account/verify_credentials.json'\n\n  /**\n   * The query string param name for the error.\n   */\n  protected errorParamName = 'error'\n\n  /**\n   * The query string param name for the \"oauth_verifier\". Used\n   * for both the post redirect value access and during the\n   * time of generating the access token\n   */\n  protected oauthTokenVerifierName = 'oauth_verifier'\n\n  /**\n   * Cookie name for storing the oauth_token. The cookie\n   * name for storing oauth_token_secret is derived\n   * from this property\n   */\n  protected oauthTokenCookieName = 'twitter_oauth_token'\n\n  /**\n   * Param name for defined the \"oauth_token\" pre redirect\n   * and also used post redirect for reading the \"oauth_token\"\n   * value\n   */\n  protected oauthTokenParamName = 'oauth_token'\n\n  /**\n   * Twitter doesn't support scopes\n   */\n  protected scopeParamName = ''\n  protected scopesSeparator = ' '\n\n  constructor(\n    protected ctx: HttpContext,\n    public config: TwitterDriverConfig\n  ) {\n    super(ctx, config)\n\n    /**\n     * Extremely important to call the following method to clear the\n     * state set by the redirect request\n     */\n    this.loadState()\n  }\n\n  /**\n   * Returns user info\n   */\n  protected async getUserInfo(\n    token: string,\n    secret: string,\n    callback?: (request: ApiRequestContract) => void\n  ) {\n    const requestToken = { token, secret }\n    const userInfoUrl = this.config.userInfoUrl || this.userInfoUrl\n\n    const user = await this.makeSignedRequest(userInfoUrl, 'get', requestToken, (request) => {\n      /**\n       * Include email\n       */\n      request.param('include_email', true)\n\n      /**\n       * Parse response as JSON\n       */\n      request['parseAs']('json')\n\n      /**\n       * Invoke user callback\n       */\n      if (typeof callback === 'function') {\n        callback(request)\n      }\n    })\n\n    return {\n      id: user.id_str,\n      nickName: user.screen_name,\n      name: user.name || user.screen_name,\n      email: user.email,\n      emailVerificationState: 'unsupported' as const,\n      avatarUrl: user.profile_image_url_https.replace('_normal.jpg', '_400x400.jpg'),\n      original: user,\n    }\n  }\n\n  /**\n   * Returns details for the authorized user\n   */\n  async user(callback?: (request: ApiRequestContract) => void) {\n    const token = await this.accessToken()\n    const userInfo = await this.getUserInfo(token.token, token.secret, callback)\n\n    return {\n      ...userInfo,\n      token,\n    }\n  }\n\n  /**\n   * Finds the user info from the \"oauth_token\" and \"oauth_token_secret\"\n   * access from the access token.\n   */\n  async userFromTokenAndSecret(\n    token: string,\n    secret: string,\n    callback?: (request: ApiRequestContract) => void\n  ): Promise<AllyUserContract<{ token: string; secret: string }>> {\n    const userInfo = await this.getUserInfo(token, secret, callback)\n\n    return {\n      ...userInfo,\n      token: { token, secret },\n    }\n  }\n\n  /**\n   * Find if the current error code is for access denied\n   */\n  accessDenied(): boolean {\n    return this.ctx.request.input('denied')\n  }\n}\n"],"mappings":";;;;;;;AAqBO,IAAM,gBAAN,cAA4B,aAAmC;AAAA,EAsCpE,YACY,KACH,QACP;AACA,UAAM,KAAK,MAAM;AAHP;AACH;AAQP,SAAK,UAAU;AAAA,EACjB;AAAA,EAhDU,kBAAkB;AAAA,EAClB,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,cAAc;AAAA;AAAA;AAAA;AAAA,EAKd,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjB,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzB,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOvB,sBAAsB;AAAA;AAAA;AAAA;AAAA,EAKtB,iBAAiB;AAAA,EACjB,kBAAkB;AAAA;AAAA;AAAA;AAAA,EAkB5B,MAAgB,YACd,OACA,QACA,UACA;AACA,UAAM,eAAe,EAAE,OAAO,OAAO;AACrC,UAAM,cAAc,KAAK,OAAO,eAAe,KAAK;AAEpD,UAAM,OAAO,MAAM,KAAK,kBAAkB,aAAa,OAAO,cAAc,CAAC,YAAY;AAIvF,cAAQ,MAAM,iBAAiB,IAAI;AAKnC,cAAQ,SAAS,EAAE,MAAM;AAKzB,UAAI,OAAO,aAAa,YAAY;AAClC,iBAAS,OAAO;AAAA,MAClB;AAAA,IACF,CAAC;AAED,WAAO;AAAA,MACL,IAAI,KAAK;AAAA,MACT,UAAU,KAAK;AAAA,MACf,MAAM,KAAK,QAAQ,KAAK;AAAA,MACxB,OAAO,KAAK;AAAA,MACZ,wBAAwB;AAAA,MACxB,WAAW,KAAK,wBAAwB,QAAQ,eAAe,cAAc;AAAA,MAC7E,UAAU;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,KAAK,UAAkD;AAC3D,UAAM,QAAQ,MAAM,KAAK,YAAY;AACrC,UAAM,WAAW,MAAM,KAAK,YAAY,MAAM,OAAO,MAAM,QAAQ,QAAQ;AAE3E,WAAO;AAAA,MACL,GAAG;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,uBACJ,OACA,QACA,UAC8D;AAC9D,UAAM,WAAW,MAAM,KAAK,YAAY,OAAO,QAAQ,QAAQ;AAE/D,WAAO;AAAA,MACL,GAAG;AAAA,MACH,OAAO,EAAE,OAAO,OAAO;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAwB;AACtB,WAAO,KAAK,IAAI,QAAQ,MAAM,QAAQ;AAAA,EACxC;AACF;","names":[]}